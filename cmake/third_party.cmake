cmake_policy(SET CMP0074 NEW)
if (NOT WIN32)
  find_package(Threads)
endif()

# include(zlib)
find_package(ZLIB REQUIRED)
# include(protobuf)
find_package(Protobuf REQUIRED)
# include(googletest)
find_package(GTest REQUIRED)
# include(gflags)
find_package(gflags REQUIRED)
# include(glog)
find_package(glog REQUIRED)
# include(libjpeg-turbo)
# include(opencv)
find_package(OpenCV REQUIRED)
# include(eigen)
find_package(Eigen3 REQUIRED)
if (WITH_COCOAPI)
  include(cocoapi)
endif()
# include(half)
find_package(half REQUIRED)
# include(re2)
find_package(re2 REQUIRED)
# include(json)
find_package(nlohmann_json REQUIRED)
if (RPC_BACKEND MATCHES "GRPC")
  # include(absl)
  # include(cares)
  # include(openssl)
  # include(grpc)
  find_package(gRPC REQUIRED)
endif()
# include(flatbuffers)
find_package(Flatbuffers REQUIRED)
# include(lz4)
find_package(lz4 REQUIRED)

if (WITH_XLA)
  include(tensorflow)
endif()

if (WITH_TENSORRT)
  include(tensorrt)
endif()

include(hwloc)

option(CUDA_STATIC "" ON)

if (BUILD_CUDA)
  if ((NOT CUDA_STATIC) OR WITH_XLA OR BUILD_SHARED_LIBS)
    set(OF_CUDA_LINK_DYNAMIC_LIBRARY ON)
  else()
    set(OF_CUDA_LINK_DYNAMIC_LIBRARY OFF)
  endif()
  if(OF_CUDA_LINK_DYNAMIC_LIBRARY)
    set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
  endif()
  find_package(CUDA REQUIRED)
  add_definitions(-DWITH_CUDA)
  set(VENDOR_CUDA_LIBRARIES ${CUDA_LIBRARIES})
  if(OF_CUDA_LINK_DYNAMIC_LIBRARY)
    list(APPEND VENDOR_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES})
    list(APPEND VENDOR_CUDA_LIBRARIES ${CUDA_curand_LIBRARY})
    if(CUDA_VERSION VERSION_GREATER_EQUAL "10.2")
      find_cuda_helper_libs(nvjpeg)
      list(APPEND VENDOR_CUDA_LIBRARIES ${CUDA_nvjpeg_LIBRARY})
      list(APPEND VENDOR_CUDA_LIBRARIES ${CUDA_nppc_LIBRARY})
      list(APPEND VENDOR_CUDA_LIBRARIES ${CUDA_nppig_LIBRARY})
    endif()
  else()
    foreach(cuda_lib_path ${CUDA_LIBRARIES})
      get_filename_component(cuda_lib_name ${cuda_lib_path} NAME)
      if (${cuda_lib_name} STREQUAL libcudart_static.a)
        get_filename_component(cuda_lib_dir ${cuda_lib_path} DIRECTORY)
        break()
      endif()
    endforeach()
    if(NOT EXISTS ${cuda_lib_dir}/libcudart_static.a)
      if(NOT EXISTS ${CUDA_cudart_static_LIBRARY})
        message(FATAL_ERROR "cuda lib not found: ${cuda_lib_dir}/libcudart_static.a")
      endif()
      get_filename_component(cuda_lib_dir ${CUDA_cudart_static_LIBRARY} DIRECTORY)
    endif()
    set(extra_cuda_libs libculibos.a libcurand_static.a)
    if(CUDA_VERSION VERSION_GREATER_EQUAL "10.2")
      list(APPEND extra_cuda_libs libnvjpeg_static.a libnppc_static.a libnppig_static.a)
    endif()
    foreach(extra_cuda_lib ${extra_cuda_libs})
      list(APPEND VENDOR_CUDA_LIBRARIES ${cuda_lib_dir}/${extra_cuda_lib})
    endforeach()
    foreach(cublas_lib_path ${CUDA_CUBLAS_LIBRARIES})
      get_filename_component(cublas_lib_name ${cublas_lib_path} NAME)
      if (${cublas_lib_name} STREQUAL libcublas.so)
        get_filename_component(cublas_lib_dir ${cublas_lib_path} DIRECTORY)
        break()
      endif()
    endforeach()
    if(EXISTS ${cublas_lib_dir}/libcublas_static.a AND EXISTS ${cublas_lib_dir}/libcublasLt_static.a)
      list(APPEND VENDOR_CUDA_LIBRARIES ${cublas_lib_dir}/libcublasLt_static.a)
      list(APPEND VENDOR_CUDA_LIBRARIES ${cublas_lib_dir}/libcublas_static.a)
    elseif(EXISTS ${cublas_lib_dir}/libcublas_static.a)
      list(APPEND VENDOR_CUDA_LIBRARIES ${cublas_lib_dir}/libcublas_static.a)
    elseif(EXISTS ${cuda_lib_dir}/libcublas_static.a)
      list(APPEND VENDOR_CUDA_LIBRARIES ${cuda_lib_dir}/libcublas_static.a)
    else()
      message(FATAL_ERROR "cuda lib not found: ${cublas_lib_dir}/libcublas_static.a or ${cuda_lib_dir}/libcublas_static.a")
    endif()
  endif()
  set(CMAKE_CUDA_COMPILER ${CUDA_NVCC_EXECUTABLE})
  set(CMAKE_CUDA_STANDARD 11)
  find_package(CUDNN REQUIRED)
endif()

if (NOT WIN32)
  set(BLA_STATIC ON)
  set(BLA_VENDOR "Intel10_64lp_seq")
  find_package(BLAS)
  if (NOT BLAS_FOUND)
    set(BLA_VENDOR "All")
    find_package(BLAS)
  endif()
else()
  set(MKL_LIB_PATH "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries_2017/windows/mkl/lib/intel64_win")
  set(BLAS_LIBRARIES ${MKL_LIB_PATH}/mkl_core_dll.lib ${MKL_LIB_PATH}/mkl_sequential_dll.lib ${MKL_LIB_PATH}/mkl_intel_lp64_dll.lib)
endif()
message(STATUS "Found Blas Lib: " ${BLAS_LIBRARIES})

set(oneflow_third_party_libs
  gflags::gflags
  glog::glog
  GTest::gtest
  protobuf::libprotobuf
  gRPC::grpc
  ${BLAS_LIBRARIES}
  opencv::opencv
  ZLIB::ZLIB
  flatbuffers::flatbuffers
  lz4::lz4
  nlohmann_json::nlohmann_json
  half::half
  ${CMAKE_THREAD_LIBS_INIT}
)

if (NOT WITH_XLA)
  list(APPEND oneflow_third_party_libs ${RE2_LIBRARIES})
endif()

if(WIN32)
  # static gflags lib requires "PathMatchSpecA" defined in "ShLwApi.Lib"
  list(APPEND oneflow_third_party_libs "ShLwApi.Lib")
  list(APPEND oneflow_third_party_libs "Ws2_32.lib")
endif()

list(APPEND ONEFLOW_THIRD_PARTY_INCLUDE_DIRS)

if (NOT WITH_XLA)
  list(APPEND oneflow_third_party_libs re2::re2)
endif()

if (BUILD_CUDA)
  if(CUDA_VERSION VERSION_GREATER_EQUAL "11.0")
    if(CMAKE_CXX_STANDARD LESS 14)
      add_definitions(-DTHRUST_IGNORE_DEPRECATED_CPP_DIALECT)
      add_definitions(-DCUB_IGNORE_DEPRECATED_CPP11)
    endif()
    if(CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0")
      add_definitions(-DCUB_IGNORE_DEPRECATED_COMPILER)
    endif()
  else()
    include(cub)
  endif()
  include(nccl)

  list(APPEND oneflow_third_party_libs ${VENDOR_CUDA_LIBRARIES})
  list(APPEND oneflow_third_party_libs ${CUDNN_LIBRARIES})
  list(APPEND oneflow_third_party_libs ${NCCL_LIBRARIES})

  list(APPEND ONEFLOW_THIRD_PARTY_INCLUDE_DIRS
    ${CUDNN_INCLUDE_DIRS}
    ${CUB_INCLUDE_DIR}
    ${NCCL_INCLUDE_DIR}
  )
endif()

if(BUILD_RDMA)
  if(UNIX)
    include(CheckIncludeFiles)
    include(CheckLibraryExists)
    CHECK_INCLUDE_FILES(infiniband/verbs.h HAVE_VERBS_H)
    if(HAVE_VERBS_H)
      add_definitions(-DWITH_RDMA)
    else()
      message(FATAL_ERROR "RDMA head file not found")
    endif()
  else()
    message(FATAL_ERROR "UNIMPLEMENTED")
  endif()
endif()

if(BUILD_HWLOC)
  list(APPEND oneflow_third_party_libs ${HWLOC_STATIC_LIBRARIES})
  list(APPEND oneflow_third_party_libs ${PCIACCESS_STATIC_LIBRARIES})
  list(APPEND ONEFLOW_THIRD_PARTY_INCLUDE_DIRS ${HWLOC_INCLUDE_DIR})
  add_definitions(-DWITH_HWLOC)
endif()

include_directories(SYSTEM ${ONEFLOW_THIRD_PARTY_INCLUDE_DIRS})

if(WITH_XLA)
  list(APPEND oneflow_third_party_libs ${TENSORFLOW_XLA_LIBRARIES})
endif()

if(WITH_TENSORRT)
  list(APPEND oneflow_third_party_libs ${TENSORRT_LIBRARIES})
endif()

message(STATUS "oneflow_third_party_libs: ${oneflow_third_party_libs}")

add_definitions(-DHALF_ENABLE_CPP11_USER_LITERALS=0)
