#include "task/task.h"
#include <vector>
#include <string>
#include <memory>
#include <algorithm>
#include "dag/dag.h"
#include "dag/dag_node.h"
#include "dag/task_dag.h"
#include "dag/node_meta.h"
#include "context/one.h"
#include "common/common.h"
#include "task/task_context.h"
#include "task/device_register.h"
#include "memory/memory_manager.h"
#include "task/task_item.h"
#include "task/task_op.h"
#include "task/task_consequence.h"
#include "task/fsm/task_fsm.h"
#include "context/id_map.h"
#include "context/config_parser.h"
#include "context/solver_descriptor.h"
#include "task/fsm/task_fsm_factory.h"

namespace caffe {

template <typename Dtype>
Task<Dtype>::Task(std::shared_ptr<DeviceContext<Dtype>> device_context,
  std::shared_ptr<TaskDag<Dtype>> task_dag)
: device_context_(device_context), task_dag_(task_dag),
  is_forward_(task_dag->is_forward()),
  task_id_(task_dag->task_id()),
  task_name_(task_dag->actor_name()),
  task_type_(task_dag->task_type()) {
  //auto& solver_descriptor = TheOne<Dtype>::config_parser()->solver_descriptor();
  //num_data_param_copy_ = solver_descriptor->num_data_param_copy();
  //num_model_param_copy_ = solver_descriptor->num_model_param_copy();
}

template <typename Dtype>
Task<Dtype>::~Task() {}

template <typename Dtype>
void Task<Dtype>::Setup() {
  LOG(INFO) << "Build task: " << task_name_ << std::endl;
  task_context_.reset(new TaskContext<Dtype>(this));
  task_context_->Setup();

  task_fsm_ = TaskFSMFactory<Dtype>::CreateFSM(this);
  task_consequence_.reset(new TaskConsequence<Dtype>(this));

  task_op_.reset(new TaskOp<Dtype>(this, device_context_));
  task_op_->Setup();
}

template <typename Dtype>
void Task<Dtype>::Release() {
  task_context_->Release();
}

template <typename Dtype>
void Task<Dtype>::ProcessMessage(std::shared_ptr<EventMessage> message) {
<<<<<<< HEAD
  task_sm_->ConsumeMessage(message);
  if (task_sm_->HasAction()) {
    TaskItem *item = task_sm_->GetTaskItem();
    task_op_->Execute(item);
=======
  task_fsm_->ProcessMessage(message);
  bool hasTaskItem = task_fsm_->HasTaskItem();
  if (hasTaskItem) {
    // |task_item| is created by |task_fsm_| and will be released by |task_op_|
    TaskItem *task_item = task_fsm_->GetTaskItem();
    task_op_->Execute(task_item);
>>>>>>> users/v-kayin/tetris
  }
}

template <typename Dtype>
std::shared_ptr<TaskDag<Dtype>> Task<Dtype>::task_dag() const {
  return task_dag_;
}

template <typename Dtype>
std::shared_ptr<TaskFSM<Dtype>> Task<Dtype>::task_fsm() const {
  return task_fsm_;
}

template <typename Dtype>
std::shared_ptr<TaskConsequence<Dtype>> Task<Dtype>::task_consequence() const {
  return task_consequence_;
}

template <typename Dtype>
std::shared_ptr<TaskOp<Dtype>> Task<Dtype>::task_op() const {
  return task_op_;
}

template <typename Dtype>
std::shared_ptr<TaskContext<Dtype>> Task<Dtype>::task_context() const {
  return task_context_;
}

INSTANTIATE_CLASS(Task);
}  // namespace caffe
