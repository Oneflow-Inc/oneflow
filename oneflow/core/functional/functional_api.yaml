# Copyright 2020 The OneFlow Authors. All rights reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The following data types are allowed,
# {
#   "Tensor", "TensorTuple", "Scalar", "Int", "Int32", "Int64", "Float", "Double", "String", "Bool",
#   "ScalarList", "IntList", "Int32List", "Int64List", "FloatList", "DoubleList", "StringList",
#   "BoolList", "DataType", "Shape", "Generator", "TensorIndex", "Device", "Placement",
#   "Sbp", "SbpList"
# }

- name: "add_n"
  signature: "Tensor AddN(TensorTuple inputs, *, Bool inplace=False)"
  bind_python: True

- name: "add"
  signature: "Tensor Add(Tensor x, Tensor y, *, Bool inplace=False)"
  bind_python: False

- name: "add_scalar"
  signature: "Tensor ScalarAdd(Tensor x, *, Scalar alpha, Bool inplace=False)"
  bind_python: False

- name: "add_scalar_by_tensor"
  signature: "Tensor ScalarAddByTensor(Tensor x, Tensor scalar, *, Bool inplace=False)"
  bind_python: False

- name: "broadcast_add"
  signature: "Tensor BroadcastAdd(Tensor x, Tensor y)"
  bind_python: False

- name: "sub_scalar_by_tensor"
  signature: "Tensor ScalarSubByTensor(Tensor x, Tensor scalar)"
  bind_python: False

- name: "broadcast_sub"
  signature: "Tensor BroadcastSub(Tensor x, Tensor y)"
  bind_python: False

- name: "mul"
  signature: "Tensor Multiply(Tensor x, Tensor y)"
  bind_python: False

- name: "mul_scalar"
  signature: "Tensor ScalarMul(Tensor x, *, Scalar alpha)"
  bind_python: False

- name: "mul_scalar_by_tensor"
  signature: "Tensor ScalarMulByTensor(Tensor x, Tensor scalar)"
  bind_python: False

- name: "broadcast_mul"
  signature: "Tensor BroadcastMul(Tensor x, Tensor y)"
  bind_python: False

- name: "div_scalar_by_tensor"
  signature: "Tensor ScalarDivByTensor(Tensor x, Tensor scalar)"
  bind_python: False

- name: "broadcast_div"
  signature: "Tensor BroadcastDiv(Tensor x, Tensor y)"
  bind_python: False

- name: "broadcast_div_grad"
  signature: "Tensor BroadcastDivGrad(Tensor y, Tensor z, Tensor dz)"
  bind_python: False

- name: "broadcast_equal"
  signature: "Tensor BroadcastEqual(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_not_equal"
  signature: "Tensor BroadcastNotEqual(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_greater"
  signature: "Tensor BroadcastGreater(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_greater_equal"
  signature: "Tensor BroadcastGreaterEqual(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_logical_and"
  signature: "Tensor BroadcastLogicalAnd(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_logical_or"
  signature: "Tensor BroadcastLogicalOr(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_less"
  signature: "Tensor BroadcastLess(Tensor x, Tensor y)"
  bind_python: True

- name: "broadcast_less_equal"
  signature: "Tensor BroadcastLessEqual(Tensor x, Tensor y)"
  bind_python: True

- name: "pow"
  signature: "Tensor Pow(Tensor x, Tensor y)"
  bind_python: False

- name: "pow_scalar"
  signature: "Tensor ScalarPow(Tensor x, *, Scalar alpha)"
  bind_python: False

- name: "reduce_sum"
  signature: "Tensor ReduceSum(Tensor x, *, Int32List axis, Bool keepdims=False)"
  bind_python: True

- name: "reduce_mean"
  signature: "Tensor ReduceMean(Tensor x, *, Int32List axis, Bool keepdims=False)"
  bind_python: True

- name: "transpose"
  signature: "Tensor Transpose(Tensor x, *, Int32List perm)"
  bind_python: True

- name: "reciprocal"
  signature: "Tensor Reciprocal(Tensor x)"
  bind_python: True

- name: "reciprocal_no_nan"
  signature: "Tensor ReciprocalNoNan(Tensor x)"
  bind_python: True

- name: "image_flip"
  signature: "Tensor ImageFlip(Tensor x, *, Int32 flip_code)"
  bind_python: True

- name: "sin"
  signature: "Tensor Sin(Tensor x, *, Bool inplace=False)"
  bind_python: True

- name: "cos"
  signature: "Tensor Cos(Tensor x)"
  bind_python: True

- name: "cosh"
  signature: "Tensor Cosh(Tensor x)"
  bind_python: True

- name: "fmod"
  signature: "Tensor BroadcastFMod(Tensor x, Tensor y)"
  bind_python: True

- name: "log"
  signature: "Tensor Log(Tensor x)"
  bind_python: True

- name: "sqrt"
  signature: "Tensor Sqrt(Tensor x)"
  bind_python: True

- name: "rsqrt"
  signature: "Tensor Rsqrt(Tensor x)"
  bind_python: True

- name: "square"
  signature: "Tensor Square(Tensor x)"
  bind_python: True

- name: "relu"
  signature: "Tensor Relu(Tensor x, *, Bool inplace=False)"
  bind_python: True

- name: "relu_grad"
  signature: "Tensor ReluGrad(Tensor dy, Tensor y)"
  bind_python: False

- name: "hardtanh"
  signature: "Tensor HardTanh(Tensor x, *, Double min_val, Double max_val)"
  bind_python: True

- name: "hardtanh_grad"
  signature: "Tensor HardTanhGrad(Tensor y, Tensor dy, *, Double min_val, Double max_val)"
  bind_python: False

- name: "tan"
  signature: "Tensor Tan(Tensor x)"
  bind_python: True

- name: "tanh"
  signature: "Tensor Tanh(Tensor x)"
  bind_python: True

- name: "elu"
  signature: "Tensor Elu(Tensor x, *, Double alpha)"
  bind_python: True

- name: "elu_grad"
  signature: "Tensor EluGrad(Tensor x, Tensor dy, *, Double alpha)"
  bind_python: False

- name: "gelu"
  signature: "Tensor Gelu(Tensor x)"
  bind_python: True

- name: "gelu_grad"
  signature: "Tensor GeluGrad(Tensor dy, Tensor x)"
  bind_python: False

- name: "sigmoid"
  signature: "Tensor Sigmoid(Tensor x)"
  bind_python: True

- name: "hardsigmoid"
  signature: "Tensor HardSigmoid(Tensor x)"
  bind_python: True

- name: "hardsigmoid_grad"
  signature: "Tensor HardSigmoidGrad(Tensor dy, Tensor x)"
  bind_python: False

- name: "softmax"
  signature: "Tensor Softmax(Tensor x)"
  bind_python: True

- name: "hardswish"
  signature: "Tensor HardSwish(Tensor x)"
  bind_python: True

- name: "hardswish_grad"
  signature: "Tensor HardSwishGrad(Tensor dy, Tensor x)"
  bind_python: False

- name: "leaky_relu"
  signature: "Tensor LeakyRelu(Tensor x, *, Float alpha)"
  bind_python: True

- name: "leaky_relu_grad"
  signature: "Tensor LeakyReluGrad(Tensor x, Tensor dy, *, Float alpha)"
  bind_python: False

- name: "normalization"
  signature:
    "Tensor Normalization(Tensor x, Tensor moving_mean=None, Tensor moving_variance=None,
                          Tensor gamma, Tensor beta, *, Int32 axis=1, Float epsilon=1e-5,
                          Float momentum=0.9, Bool is_training=False)"
  bind_python: True

- name: "normalization_grad"
  signature:
    "TensorTuple NormalizationGrad(Tensor grad, Tensor x, Tensor mean, Tensor inv_variance,
                                   Tensor gamma, Float epsilon, Int32 axis)"
  bind_python: False

- name: "range"
  signature: "Tensor Range(*, Int64 start, Int64 limit, Int64 delta, DataType dtype=kInt64)"
  bind_python: True

- name: "flatten"
  signature: "Tensor Flatten(Tensor x, *, Int32 start_dim=0, Int32 end_dim=-1)"
  bind_python: True

- name: "argmax"
  signature: "Tensor ArgMax(Tensor x)"
  bind_python: True

- name: "argwhere"
  signature: "TensorTuple ArgWhere(Tensor x, *, DataType dtype=kInt32)"
  bind_python: True

- name: "broadcast_like"
  signature: "Tensor BroadcastLike(Tensor x, Tensor like, *, Int32List broadcast_axes)"
  bind_python: True

- name: "cast"
  signature: "Tensor Cast(Tensor x, *, DataType dtype)"
  bind_python: True

- name: "constant"
  signature: "Tensor Constant(*, Shape shape, Scalar value, DataType dtype, Device device=None)"
  bind_python: True

- name: "consistent_constant"
  signature: "Tensor ConsistentConstant(*, Shape shape, Scalar value, DataType dtype, Placement placement, SbpList sbp_tuple)"
  bind_python: True

- name: "empty"
  signature: "Tensor Empty(*, Shape shape, DataType dtype, Device device=None)"
  bind_python: True

- name: "consistent_empty"
  signature: "Tensor ConsistentEmpty(*, Shape shape, DataType dtype, Placement placement, SbpList sbp_tuple)"
  bind_python: True

- name: "zeros_like"
  signature: "Tensor ZerosLike(Tensor x)"
  bind_python: True

- name: "ones_like"
  signature: "Tensor OnesLike(Tensor x)"
  bind_python: True

- name: "bernoulli"
  signature:
    "Tensor Bernoulli(Tensor x, DataType dtype=kFloat, Generator generator=None)"
  bind_python: True

- name: "concat"
  signature: "Tensor Concat(TensorTuple inputs, *, Int64 axis, Int64 max_dim_size)"
  bind_python: True

- name: "bias_add"
  signature: "Tensor BiasAdd(Tensor x, Tensor bias, *, Int32 axis=1)"
  bind_python: True

- name: "conv1d"
  signature:
    "Tensor Conv1d(Tensor x, Tensor weight, *, Tensor bias=None, Int32List stride, 
                   Int32List padding, Int32List dilation, Int32 groups=1)"
  bind_python: True

- name: "conv2d"
  signature:
    "Tensor Conv2d(Tensor x, Tensor weight, *, Tensor bias=None, Int32List stride, 
                   Int32List padding, Int32List dilation, Int32 groups=1)"
  bind_python: True

- name: "fake_quantization"
  signature:
    "Tensor FakeQuantization(Tensor in, Tensor scale, Tensor zero_point, *, String quantization_formula, Int32 quantization_bit, String quantization_scheme)"
  bind_python: True

- name: "quantization"
  signature:
    "Tensor Quantization(Tensor in, Tensor scale, Tensor zero_point, *, String quantization_formula, Int32 quantization_bit, String quantization_scheme)"
  bind_python: True

- name: "min_max_observer"
  signature:
    "TensorTuple MinMaxObserver(Tensor in, *, String quantization_formula, Int32 quantization_bit, String quantization_scheme, Bool per_layer_quantization)"
  bind_python: True

- name: "moving_average_min_max_observer"
  signature:
    "TensorTuple MovingAverageMinMaxObserver(Tensor in, Tensor current_train_step, Tensor moving_max, Tensor moving_min,  *, Bool training, String quantization_formula,
          Int64 stop_update_after_iters, Int32 quantization_bit, String quantization_scheme, Float momentum)"
  bind_python: True

- name: "conv3d"
  signature:
    "Tensor Conv3d(Tensor x, Tensor weight, *, Tensor bias=None, Int32List stride, 
                   Int32List padding, Int32List dilation, Int32 groups=1)"
  bind_python: True
  
- name: "conv_data_grad"
  signature:
    "Tensor ConvDataGrad(Tensor dy, Tensor weight, Tensor x, *, Int32 num_spatial_dims,
                         Int32List kernel_size, Int32List strides, Int32List padding_before,
                         Int32List dilation_rate, Int32 groups=1,
                         String data_format=\"channels_first\")"
  bind_python: False

- name: "conv_filter_grad"
  signature:
    "Tensor ConvFilterGrad(Tensor dy, Tensor x, *, Int32 num_spatial_dims, Int32List kernel_size,
                           Int32List strides, Int32List padding_before, Int32List dilation_rate,
                           Int32 groups=1, String data_format=\"channels_first\")"
  bind_python: False

- name: "conv_bias_grad"
  signature:
    "Tensor ConvBiasGrad(Tensor dy, *, Int32 num_spatial_dims,
                         String data_format=\"channels_first\")"
  bind_python: False

- name: "expand"
  signature: "Tensor Expand(Tensor x, *, Shape shape)"
  bind_python: True

- name: "expand_dims"
  signature: "Tensor ExpandDims(Tensor x, *, Int32 axis)"
  bind_python: True

- name: "exp"
  signature: "Tensor Exp(Tensor x)"
  bind_python: True

- name: "gather"
  signature: "Tensor Gather(Tensor x, Tensor indices, *, Int64 axis)"
  bind_python: True

- name: "dim_gather"
  signature: "Tensor DimGather(Tensor x, Tensor indices, *, Int32 dim)"
  bind_python: True

- name: "gather_nd"
  signature: "Tensor GatherNd(Tensor params, Tensor indices, *)"
  bind_python: True

- name: "scatternd"
  signature: "Tensor ScatterNd(Tensor indices, Tensor updates, Shape shape)"
  bind_python: True

- name: "scatterndlike"
  signature: "Tensor ScatterNdLike(Tensor like, Tensor updates, Tensor indices)"
  bind_python: True

- name: "matmul"
  signature:
    "Tensor MatMul(Tensor a, Tensor b, *, Bool transpose_a=False, Bool transpose_b=False,
                   Double alpha=1.0)"
  bind_python: True

- name: "batch_matmul"
  signature:
    "Tensor BatchMatMul(Tensor a, Tensor b, *, Bool transpose_a=False, Bool transpose_b=False,
                        Double alpha=1.0)"
  bind_python: True

- name: "sparse_softmax_cross_entropy"
  signature: "Tensor SparseSoftmaxCrossEntropy(Tensor logits, Tensor label, *, Int64 depth)"
  bind_python: True

- name: "smooth_l1_loss"
  signature: "Tensor SmoothL1Loss(Tensor logits, Tensor label, *, Float beta)"
  bind_python: True

- name: "smooth_l1_loss_grad"
  signature:
    "Tensor SmoothL1LossGrad(Tensor loss_grad, Tensor prediction, Tensor label, *, Float beta)"
  bind_python: False

- name: "where"
  signature: "Tensor Where(Tensor condition, Tensor x, Tensor y)"
  bind_python: True

- name: "negative"
  signature: "Tensor Negative(Tensor x)"
  bind_python: True

- name: "layer_norm_affine"
  signature:
    "Tensor LayerNormAffine(Tensor x, Tensor gamma, Tensor beta, *, Int64 begin_norm_axis,
                            Int64 begin_params_axis, Double epsilon)"
  bind_python: True

- name: "layer_norm"
  signature:
    "Tensor LayerNorm(Tensor x, *, Int64 begin_norm_axis, Int64 begin_params_axis, Double epsilon)"
  bind_python: True

- name: "avg_pool_2d"
  signature:
    "Tensor AvgPool2D(Tensor x, *, Int32List kernel_size, Int32List stride, String padding,
                      Int32List padding_before, Int32List padding_after,
                      String data_format=\"channels_first\", Bool ceil_mode=False)"
  bind_python: True

- name: "max_pool_2d"
  signature:
    "Tensor MaxPool2D(Tensor x, *, Int32List kernel_size, Int32List stride, String padding,
                      Int32List padding_before, Int32List padding_after,
                      String data_format=\"channels_first\", Bool ceil_mode=False)"
  bind_python: True

- name: "adaptive_avg_pool1d"
  signature:
    "Tensor AdaptiveAvgPool1D(Tensor x, *, Int64List output_size)"
  bind_python: True

- name: "adaptive_avg_pool2d"
  signature:
    "Tensor AdaptiveAvgPool2D(Tensor x, *, Int64List output_size)"
  bind_python: True

- name: "adaptive_avg_pool3d"
  signature:
    "Tensor AdaptiveAvgPool3D(Tensor x, *, Int64List output_size)"
  bind_python: True

- name: "adaptive_pool_grad"
  signature:
    "Tensor AdaptivePoolNdGrad(Tensor x, Tensor dy, *, String mode, Int32 ndims)"

- name: "pool_grad"
  signature:
    "Tensor PoolNdGrad(Tensor x, Tensor y, Tensor dy, *, String mode, Int32 ndims, String data_format,
                       String padding, Int32List padding_before, Int32List padding_after, Int32List pool_size,
                       Int32List strides, Bool ceil_mode)"
  bind_python: False

- name: "maxpool_1d"
  signature:
    "TensorTuple Maxpool1D(Tensor x, *, String data_format=\"channels_first\", Int32List padding,
                      Int32List kernel_size, Int32List stride, Int32List dilation, 
                      Bool return_indices=True, Bool ceil_mode=False)"
  bind_python: True

- name: "maxpool_2d"
  signature:
    "TensorTuple Maxpool2D(Tensor x, *, String data_format=\"channels_first\", Int32List padding,
                      Int32List kernel_size, Int32List stride, Int32List dilation, 
                      Bool return_indices=True, Bool ceil_mode=False)"
  bind_python: True

- name: "maxpool_3d"
  signature:
    "TensorTuple Maxpool3D(Tensor x, *, String data_format=\"channels_first\", Int32List padding,
                      Int32List kernel_size, Int32List stride, Int32List dilation, 
                      Bool return_indices=True, Bool ceil_mode=False)"
  bind_python: True

- name: "pooling_grad"
  signature:
    "Tensor PoolingNdGrad(Tensor x, Tensor y, Tensor indice, Tensor dy, *, String mode, Int32 ndims, 
                       String data_format, Int32List padding, Int32List kernel_size,
                       Int32List stride, Int32List dilation, Bool return_indices, Bool ceil_mode)"
  bind_python: False

- name: "prelu"
  signature: "Tensor PRelu(Tensor x, Tensor alpha)"
  bind_python: True

- name: "prelu_grad"
  signature: "TensorTuple PReluGrad(Tensor dy, Tensor x, Tensor alpha)"
  bind_python: False

- name: "reshape"
  signature: "Tensor Reshape(Tensor x, *, Shape shape)"
  bind_python: True

- name: "slice"
  signature: "Tensor Slice(Tensor x, *, Int64List start, Int64List stop, Int64List step)"
  bind_python: True

- name: "slice_grad"
  signature: "Tensor SliceGrad(Tensor dy, Tensor like, *, Int64List start, Int64List stop, Int64List step)"
  bind_python: False

- name: "slice_update"
  signature:
    "Tensor SliceUpdate(Tensor x, Tensor update, *, Int64List start, Int64List stop,
                        Int64List step)"
  bind_python: True

- name: "logical_slice"
  signature: "Tensor LogicalSlice(Tensor x, *, Int64List start, Int64List stop, Int64List step)"
  bind_python: True

- name: "logical_slice_assign"
  signature:
    "Void LogicalSliceAssign(Tensor ref, Tensor value, *, Int64List start, Int64List stop,
                             Int64List step)"
  bind_python: True

- name: "squeeze"
  signature: "Tensor Squeeze(Tensor x, *, Int32List dim)"
  bind_python: True

- name: "copy"
  signature: "Tensor Copy(Tensor x, *, String device_type, Int64 device_id)"
  bind_python: True

- name: "flip"
  signature: "Tensor Flip(Tensor x, *, Int32List dims)"
  bind_python: True

- name: "flip_grad"
  signature: "Tensor FlipGrad(Tensor dy, *, Int32List dims)"
  bind_python: False

- name: "upsample"
  signature:
    "Tensor Upsample(Tensor x, *, Float height_scale, Float width_scale, Bool align_corners,
                     String interpolation, String data_format=\"channels_first\")"
  bind_python: True

- name: "upsample_linear_1d"
  signature:
    "Tensor UpsampleLinear1D(Tensor x, *, Float scale_factor, Bool align_corners,
                     String data_format=\"channels_first\")"
  bind_python: True

- name: "upsample_linear_1d_grad"
  signature:
    "Tensor UpsampleLinear1DGrad(Tensor dy, Tensor x, *, Float scale_factor, Bool align_corners,
                     String data_format=\"channels_first\")"
  bind_python: False

- name: "upsample_nearest_1d"
  signature:
    "Tensor UpsampleNearest1D(Tensor x, *, Float scale_factor,
                     String data_format=\"channels_first\")"
  bind_python: True  

- name: "upsample_nearest_1d_grad"
  signature:
    "Tensor UpsampleNearest1DGrad(Tensor dy, Tensor x, *, Float scale_factor,
                     String data_format=\"channels_first\")"
  bind_python: False

- name: "upsample_nearest_2d"
  signature:
    "Tensor UpsampleNearest2D(Tensor x, *, Float height_scale, Float width_scale, 
                     String data_format=\"channels_first\")"
  bind_python: True  

- name: "upsample_nearest_2d_grad"
  signature:
    "Tensor UpsampleNearest2DGrad(Tensor dy, Tensor x, *, Float height_scale, Float width_scale, 
                     String data_format=\"channels_first\")"
  bind_python: False 

- name: "upsample_bilinear_2d"
  signature:
    "Tensor UpsampleBilinear2D(Tensor x, *, Float height_scale, Float width_scale, Bool align_corners,
                     String data_format=\"channels_first\")"
  bind_python: True

- name: "upsample_bilinear_2d_grad"
  signature:
    "Tensor UpsampleBilinear2DGrad(Tensor dy, Tensor x, *, Float height_scale, Float width_scale, Bool align_corners,
                     String data_format=\"channels_first\")"
  bind_python: False

- name: "upsample_bicubic_2d"
  signature:
    "Tensor UpsampleBicubic2D(Tensor x, *, Float height_scale, Float width_scale, Bool align_corners,
                     String data_format=\"channels_first\")"
  bind_python: True

- name: "upsample_bicubic_2d_grad"
  signature:
    "Tensor UpsampleBicubic2DGrad(Tensor dy, Tensor x, *, Float height_scale, Float width_scale, Bool align_corners,
                     String data_format=\"channels_first\")"
  bind_python: False

- name: "upsample_nearest_3d"
  signature:
    "Tensor UpsampleNearest3D(Tensor x, *, Float depth_scale, Float height_scale, Float width_scale,
                     String data_format=\"channels_first\")"
  bind_python: True

- name: "upsample_nearest_3d_grad"
  signature:
    "Tensor UpsampleNearest3DGrad(Tensor dy, Tensor x, *, Float depth_scale, Float height_scale, Float width_scale,
                     String data_format=\"channels_first\")"
  bind_python: False

- name: "upsample_trilinear_3d"
  signature:
    "Tensor UpsampleTrilinear3D(Tensor x, *, Float depth_scale, Float height_scale, Float width_scale,
                     Bool align_corners, String data_format=\"channels_first\")"
  bind_python: True

- name: "upsample_trilinear_3d_grad"
  signature:
    "Tensor UpsampleTrilinear3DGrad(Tensor dy, Tensor x, *, Float depth_scale, Float height_scale, Float width_scale,
                     Bool align_corners, String data_format=\"channels_first\")"
  bind_python: False

- name: "abs"
  signature: "Tensor Abs(Tensor x)"
  bind_python: True

- name: "acos"
  signature: "Tensor Acos(Tensor x)"
  bind_python: True

- name: "acosh"
  signature: "Tensor Acosh(Tensor x)"
  bind_python: True

- name: "asin"
  signature: "Tensor Asin(Tensor x)"
  bind_python: True

- name: "asinh"
  signature: "Tensor Asinh(Tensor x)"
  bind_python: True

- name: "atan"
  signature: "Tensor Atan(Tensor x)"
  bind_python: True

- name: "atanh"
  signature: "Tensor Atanh(Tensor x)"
  bind_python: True

- name: "ceil"
  signature: "Tensor Ceil(Tensor x)"
  bind_python: True

- name: "erf"
  signature: "Tensor Erf(Tensor x)"
  bind_python: True

- name: "erfc"
  signature: "Tensor Erfc(Tensor x)"
  bind_python: True

- name: "expm1"
  signature: "Tensor Expm1(Tensor x)"
  bind_python: True

- name: "floor"
  signature: "Tensor Floor(Tensor x)"
  bind_python: True

- name: "lgamma"
  signature: "Tensor Lgamma(Tensor x)"
  bind_python: True

- name: "log1p"
  signature: "Tensor Log1p(Tensor x)"
  bind_python: True

- name: "log_sigmoid"
  signature: "Tensor LogSigmoid(Tensor x)"
  bind_python: True

- name: "rint"
  signature: "Tensor Rint(Tensor x)"
  bind_python: True

- name: "round"
  signature: "Tensor Round(Tensor x)"
  bind_python: True

- name: "sign"
  signature: "Tensor Sign(Tensor x)"
  bind_python: True

- name: "sinh"
  signature: "Tensor Sinh(Tensor x)"
  bind_python: True

- name: "softplus"
  signature: "Tensor Softplus(Tensor x)"
  bind_python: True

- name: "unsorted_segment_sum_like"
  signature:
    "Tensor UnsortedSegmentSumLike(Tensor x, Tensor segment_ids, Tensor like, *, Int64 axis)"
  bind_python: False

- name: "triu"
  signature: "Tensor Triu(Tensor x, Int64 diagonal=0)"
  bind_python: True
  
- name: "clip_by_scalar"
  signature: "Tensor ClipByScalar(Tensor x, *, Scalar min, Scalar max)"
  bind_python: false

- name: "clip_by_scalar_grad"
  signature: "Tensor ClipByScalarGrad(Tensor dy, Tensor x, *, Scalar min, Scalar max)"
  bind_python: False

- name: "clip_by_scalar_min"
  signature: "Tensor ClipByScalarMin(Tensor x, *, Scalar min)"
  bind_python: false

- name: "clip_by_scalar_min_grad"
  signature: "Tensor ClipByScalarMinGrad(Tensor dy, Tensor x, *, Scalar min)"
  bind_python: False

- name: "clip_by_scalar_max"
  signature: "Tensor ClipByScalarMax(Tensor x, *, Scalar max)"
  bind_python: false

- name: "clip_by_scalar_max_grad"
  signature: "Tensor ClipByScalarMaxGrad(Tensor dy, Tensor x, *, Scalar max)"
  bind_python: False

- name: "dropout"
  signature:
    "Tensor Dropout(Tensor x, *, Float p=0.5, Generator generator=None)"
  bind_python: True

- name: "pad"
  signature: "Tensor Pad(Tensor x, *, Int64List pad, String mode=\"constant\", Scalar value=0)"
  bind_python: True

- name: "pad_grad"
  signature: "Tensor PadGrad(Tensor dy, *, Int64List pad, String mode=\"constant\", Scalar value=0)"
  bind_python: False

- name: "silu"
  signature: "Tensor Silu(Tensor x, *)"
  bind_python: True

- name: "silu_grad"
  signature: "Tensor SiluGrad(Tensor x, Tensor dy, *)"
  bind_python: False

- name: "mish"
  signature: "Tensor Mish(Tensor x, *)"
  bind_python: True

- name: "mish_grad"
  signature: "Tensor MishGrad(Tensor x, Tensor dy, *)"
  bind_python: False

- name: "selu"
  signature: "Tensor Selu(Tensor x, *)"
  bind_python: True

- name: "selu_grad"
  signature: "Tensor SeluGrad(Tensor x, Tensor dy, *)"
  bind_python: False

- name: "softsign"
  signature: "Tensor SoftSign(Tensor x, *)"
  bind_python: True

- name: "softsign_grad"
  signature: "Tensor SoftSignGrad(Tensor x, Tensor dy, *)"
  bind_python: False
  
- name: "diag"
  signature: "Tensor Diag(Tensor x, *, Int32 diagonal=0)"
  bind_python: True

- name: "diag_grad"
  signature: "Tensor DiagGrad(Tensor dy, Tensor in, *, Int32 diagonal=0)"
  bind_python: False

- name: "tensor_getitem"
  signature: "Tensor TensorGetItem(Tensor x, *, TensorIndex index)"
  bind_python: True

- name: "dim_scatter"
  signature: "Tensor DimScatter(Tensor input, Tensor index, Tensor src, *, Int32 dim)"
  bind_python: False

- name: "dim_scatter_add"
  signature: "Tensor DimScatterAdd(Tensor input, Tensor index, Tensor src, *, Int32 dim)"
  bind_python: True

- name: "dim_scatter_scalar"
  signature: "Tensor DimScatterUpdateScalar(Tensor input, Tensor index, *, Float src, Int32 dim)"
  bind_python: False

- name: "dim_scatter_add_scalar"
  signature: "Tensor DimScatterAddScalar(Tensor input, Tensor index, *, Float src, Int32 dim)"
  bind_python: True

- name: "tensor_setitem"
  signature: "Void TensorSetItem(Tensor x, *, TensorIndex index, Tensor value)"
  bind_python: True

- name: "avgpool_1d"
  signature:
    "Tensor Avgpool1D(Tensor x, *, String data_format=\"channels_first\", Int32List padding,
                      Int32List kernel_size, Int32List stride, Bool ceil_mode=False, Bool count_include_pad=True, 
                      Int64 divisor_override=0)"
  bind_python: True 

- name: "avgpool_2d"
  signature:
    "Tensor Avgpool2D(Tensor x, *, String data_format=\"channels_first\", Int32List padding,
                      Int32List kernel_size, Int32List stride, Bool ceil_mode=False, Bool count_include_pad=True, 
                      Int64 divisor_override=0)"
  bind_python: True 

- name: "avgpool_3d"
  signature:
    "Tensor Avgpool3D(Tensor x, *, String data_format=\"channels_first\", Int32List padding,
                      Int32List kernel_size, Int32List stride, Bool ceil_mode=False, Bool count_include_pad=True, 
                      Int64 divisor_override=0)"
  bind_python: True

- name: "avg_pooling_grad"
  signature:
    "Tensor AvgPoolingNdGrad(Tensor x, Tensor y, Tensor dy, *, Int32 ndims, 
                       String data_format, Int32List padding, Int32List kernel_size,
                       Int32List stride, Bool ceil_mode, Bool count_include_pad, Int64 divisor_override=0)"
  bind_python: False
  
- name: "minimum"
  signature: "Tensor Minimum(Tensor x, Tensor y)"
  bind_python: True

- name: "maximum"
  signature: "Tensor Maximum(Tensor x, Tensor y)"
  bind_python: True

- name: "elementwise_min_grad"
  signature: "TensorTuple ElementwiseMinGrad(Tensor dz, Tensor x, Tensor y)"
  bind_python: False

- name: "elementwise_max_grad"
  signature: "TensorTuple ElementwiseMaxGrad(Tensor dz, Tensor x, Tensor y)"
  bind_python: False

- name: "stack"
  signature: "Tensor Stack(TensorTuple inputs, *, Int64 dim=0)"
  bind_python: True

- name: "to_consistent"
  signature: "Tensor ToConsistent(Tensor x, *, Placement placement, SbpList sbp, Shape shape=None)"
  bind_python: True

- name: "to_local"
  signature: "Tensor ConsistentToLocal(Tensor x)"
  bind_python: True

- name: "all_reduce"
  signature: "Tensor AllReduce(Tensor x)"
  bind_python: True

- name: "select_first"
  signature: "Tensor SelectFirst(TensorTuple inputs)"
  bind_python: True

- name: "cast_like"
  signature: "Tensor CastLike(Tensor x, Tensor like)"
  bind_python: False

- name: "identity"
  signature: "Tensor Identity(Tensor in)"
  bind_python: True

- name: "reshape_like"
  signature: "Tensor ReshapeLike(Tensor in, Tensor like)"
  bind_python: True

- name: "reduce_sum_like"
  signature: "Tensor ReduceSumLike(Tensor in, Tensor like, *,Int32List axis)"
  bind_python: True

- name: "randn"
  signature: "Tensor RandN(*, Shape shape, DataType dtype=None, Device device=None, 
                           Generator generator=None)"
  bind_python: True

- name: "consistent_randn"
  signature: "Tensor ConsistentRandN(*, Shape shape, Placement placement, 
                                     SbpList sbp_tuple, DataType dtype=None, Generator generator=None)"
  bind_python: True
