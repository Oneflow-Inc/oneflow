syntax = "proto2";
package oneflow;

import "oneflow/core/common/shape.proto";
import "oneflow/core/common/data_type.proto";
import "oneflow/core/record/image.proto";
import "oneflow/core/job/resource.proto";
import "oneflow/core/register/logical_blob_id.proto";

enum ActivationType {
  kNone = 0;
  kTanH = 1;
  kSigmoid = 2;
  kRelu = 3;
}

message ConstantInitializerConf {
  optional float value = 1 [default = 0];
}

message ConstantIntInitializerConf {
  optional int32 value = 1 [default = 0];
}

message RandomUniformInitializerConf {
  optional float min = 1 [default = 0];
  optional float max = 2 [default = 1];
}

message RandomUniformIntInitializerConf {
  optional int32 min = 1 [default = 0];
  optional int32 max = 2 [default = 1];
}

message RandomNormalInitializerConf {
  optional float mean = 1 [default = 0];
  optional float std = 2 [default = 1];
}

enum VarianceNorm {
  kFanIn = 0;
  kFanOut = 1;
  kAverage = 2;
}

message XavierInitializerConf {
  required VarianceNorm variance_norm = 1;
}

message MsraInitializerConf {
  required VarianceNorm variance_norm = 1;
}

message InitializerConf {
  oneof type {
    ConstantInitializerConf constant_conf = 1;
    ConstantIntInitializerConf constant_int_conf = 2;
    RandomUniformInitializerConf random_uniform_conf = 3;
    RandomUniformIntInitializerConf random_uniform_int_conf = 4;
    RandomNormalInitializerConf random_normal_conf = 5;
    XavierInitializerConf xavier_conf = 6;
    MsraInitializerConf msra_conf = 7;
  }
}

message Conv1DOpConf {
  required string in = 1;
  required string out = 2;
  required int32 filters = 3;
  optional string padding = 4 [default = "valid"];
  required string data_format = 5;
  repeated int32 kernel_size = 6;
  repeated int32 strides = 7;
  repeated int32 dilation_rate = 8;
  optional ActivationType activation = 9 [default = kNone];
  optional bool use_bias = 10 [default = true];
  optional InitializerConf weight_initializer = 11;
  optional InitializerConf bias_initializer = 12;
}

message Conv2DOpConf {
  required string in = 1;
  required string out = 2;
  required int32 filters = 3;
  optional string padding = 4 [default = "valid"];
  required string data_format = 5;
  repeated int32 kernel_size = 6;
  repeated int32 strides = 7;
  repeated int32 dilation_rate = 8;
  optional ActivationType activation = 9 [default = kNone];
  optional bool use_bias = 10 [default = true];
  optional InitializerConf weight_initializer = 11;
  optional InitializerConf bias_initializer = 12;
}

message Conv3DOpConf {
  required string in = 1;
  required string out = 2;
  required int32 filters = 3;
  optional string padding = 4 [default = "valid"];
  required string data_format = 5;
  repeated int32 kernel_size = 6;
  repeated int32 strides = 7;
  repeated int32 dilation_rate = 8;
  optional ActivationType activation = 9 [default = kNone];
  optional bool use_bias = 10 [default = true];
  optional InitializerConf weight_initializer = 11;
  optional InitializerConf bias_initializer = 12;
}

message FullyConnectedOpConf {
  required string in = 1;
  required string out = 2;
  required int32 units = 3;
  optional ActivationType activation = 4 [default = kNone];
  optional bool use_bias = 5 [default = true];
  optional InitializerConf weight_initializer = 6;
  optional InitializerConf bias_initializer = 7;
}

message AveragePooling1DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message MaxPooling1DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message AveragePooling2DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message MaxPooling2DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message AveragePooling3DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message MaxPooling3DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message ReluOpConf {
  required string in = 1;
  required string out = 2;
}

message SigmoidOpConf {
  required string in = 1;
  required string out = 2;
}

message TanHOpConf {
  required string in = 1;
  required string out = 2;
}

message SoftmaxOpConf {
  required string in = 1;
  required string out = 2;
  optional int32 axis = 3 [default = -1];
}

enum LossReductionType {
  kSumOverOne = 0;
  kSumOverWeight = 1;
  kSumOverN = 2;
  kSumOverNonZeroWeight = 3;
}

message SparseSoftmaxCrossEntropyLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional LossReductionType reduction = 4 [default = kSumOverN];
  optional float weight_scalar = 5 [default = 1.0];
  optional string weight = 6;
}

message SparseCrossEntropyLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional LossReductionType reduction = 4 [default = kSumOverN];
  optional float weight_scalar = 5 [default = 1.0];
  optional string weight = 6;
}

message ConcatOpConf {
  repeated string in = 1;
  required string out = 2;
  required int32 axis = 3;
}

message CopyCommNetOpConf {
}

message CopyHdOpConf {
  enum Type {
    H2D = 0;
    D2H = 1;
  }
  required Type type = 1;
}

message CloneOpConf {
  required int32 out_num = 1;
}

message BoxConcatConf {
  required int32 axis = 1;
}

message BoxAddConf {
}

message BoxSplitConf {
  required int32 axis = 1;
  repeated int32 part_num = 2;
}

message BoxCloneConf {
}

message BoxingOpConf {
  required LogicalBlobId lbi = 1;
  required int32 in_num = 2;
  required int32 out_num = 3;

  oneof in_box {
    BoxConcatConf concat_box = 4;
    BoxAddConf add_box = 5;
  }
  oneof out_box {
    BoxSplitConf split_box = 6;
    BoxCloneConf clone_box = 7;
  }
}

message NaiveModelUpdateConf {
}

message MomentumModelUpdateConf {
  optional float beta = 1 [default = 0.9];
}

message RMSPropModelUpdateConf {
  optional float decay_rate = 1 [default = 0.99];
  optional float epsilon = 2 [default = 1e-8];
}

message LARSModelUpdateConf {
  optional float momentum_beta = 1 [default = 0.9];
  optional float epsilon = 2 [default = 1e-9];
  optional float lars_coefficient = 3 [default = 0.0001];
}

message ExponentialDecayConf {
  required int64 decay_batches = 1;
  required double decay_rate = 2;
  optional bool staircase = 3 [default = false];
}

message InverseTimeDecayConf {
  required int64 decay_batches = 1;
  required double decay_rate = 2;
  optional bool staircase = 3 [default = false];
}

message NaturalExpDecayConf {
  required int64 decay_batches = 1;
  required double decay_rate = 2;
  optional bool staircase = 3 [default = false];
}

message PiecewiseConstantConf {
  repeated int64 boundaries = 1;
  repeated double values = 2;
}

message PolynomialDecayConf {
  required int64 decay_batches = 1;
  optional double end_learning_rate = 2 [default = 0.0001];
  optional double power = 3 [default = 1.0];
  optional bool cycle = 4 [default = false];
}

message CosineDecayConf {
  required int64 decay_batches = 1; 
  optional double alpha = 2 [default = 0.0];
}

message LinearCosineDecayConf {
  required int64 decay_batches = 1; 
  optional double num_periods = 2 [default = 0.5];
  optional double alpha = 3 [default = 0.0];
  optional double beta = 4 [default = 0.001];
}

message LearningRateDecayConf {
  oneof type {
    ExponentialDecayConf exponential_conf = 2000;
    InverseTimeDecayConf inverse_time_conf = 2001;
    NaturalExpDecayConf natural_exp_conf = 2002;
    PiecewiseConstantConf piecewise_constant_conf = 2003;
    PolynomialDecayConf polynomial_conf = 2004;
    CosineDecayConf cosine_conf = 2005;
    LinearCosineDecayConf linear_cosine_conf = 2006;
  }
}

message ConstantWarmupConf {
  required int64 warmup_batches = 1;
  required double multiplier = 2;
}

message LinearWarmupConf {
  required int64 warmup_batches = 1;
  required double start_multiplier = 2;
}

message WarmupConf {
  oneof type {
    ConstantWarmupConf constant_conf = 3000;
    LinearWarmupConf linear_conf = 3001;
  }
}

message NormalModelUpdateOpUserConf {
  optional LearningRateDecayConf learning_rate_decay = 1;
  optional WarmupConf warmup_conf = 2;
  oneof normal_mdupdt {
    NaiveModelUpdateConf naive_conf = 1000;
    MomentumModelUpdateConf momentum_conf = 1001;
    RMSPropModelUpdateConf rmsprop_conf = 1002;
    LARSModelUpdateConf lars_conf = 1003;
  }
}

message NormalModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string model_diff = 2;
  required string total_instance_num_diff = 3;
  required string model = 4;
  required float learning_rate = 5;
  required float l1 = 6;
  required float l2 = 7;
}

message AccumulateOpConf {
}

message EmbeddingLookupAccumulateOpConf {
}

message ModelSaveOpConf {
}


message PrintRecordConf {
  required string lbn = 1;
  optional string name = 2;
  required EncodeConf encode_case = 3;
}

message PrintOpConf {
  repeated PrintRecordConf in = 1;
  required string print_dir = 2;
  optional string part_name_prefix = 3 [default = "part-"];
  optional int32 part_name_suffix_length = 4 [default = -1];
}

message LogCounterOpConf {
  required string in = 1;
  optional int32 interval = 2 [default = 1];
}

message GeluOpConf {
  required string in = 1;
  required string out = 2;
}

message LossPrintOpConf {
  required LogicalBlobId loss_lbi = 1;
  required LogicalBlobId loss_instance_num_lbi = 2;
  optional LogicalBlobId reduction_lbi = 3;
  optional float weight_scalar = 4 [default = 1.0];
  optional LossReductionType reduction_type = 5 [default = kSumOverN];
}

message AccuracyPrintOpConf {
  required LogicalBlobId accuracy_lbi = 1;
  required LogicalBlobId accuracy_instance_num_lbi = 2;
  optional int32 top_k_print = 3 [default = 1];
}

message ReduceSumOpConf {
  oneof in_conf {
    string in = 1; // For User
    LogicalBlobId in_sys = 2; // For System
  }
  required string out = 3;
  optional int32 axis = 4;
  optional bool keepdims = 5 [default = false];
}

message BasicRnnOpConf {
  required string in = 1;
  optional string init_hidden = 2;
  required string out = 3;
  required int32 hidden_size = 4;
  optional ActivationType activation = 6 [default = kTanH];

  optional InitializerConf init_hidden_initializer = 7;
  optional InitializerConf bias_initializer = 8;
  optional InitializerConf i2h_weight_initializer = 9;
  optional InitializerConf h2h_weight_initializer = 10;

  optional bool is_init_hidden_trainable = 11 [default = true];
  optional bool use_bias = 12 [default = true];
}

message BasicLstmOpConf {
}

message ReshapeOpConf {
  required string in = 1;
  required string out = 2;
  required ShapeProto shape = 3;
  optional bool has_dim0_in_shape = 4;
}

message EmbeddingLookupOpConf {
  required string ids = 1;
  required string out = 2;
  required int32 units = 3;
  required int32 table_size = 4;
  optional InitializerConf weight_initializer = 5;
}

message AddOpConf {
  repeated string in = 1;
  required string out = 2;
  optional ActivationType activation = 3 [default = kNone];
}

message MaximumOpConf {
  repeated string in = 1;
  required string out = 2;
}

message SharedModelDiffAddOpConf {
  required int32 in_num = 1;
}

message CastOpConf {
  required string in = 1;
  required string out = 2;
  required DataType data_type = 3;
}

message VariableOpConf {
  required string tick = 1;
  required string out = 2;
  required ShapeProto shape = 3;
  optional DataType data_type = 4;
  optional InitializerConf initializer = 5;
}

message LocalResponseNormalizationOpConf {
  required string in = 1;
  required string out = 2;
  required string data_format = 3; 
  optional int32 depth_radius = 4 [default = 5];
  optional double bias = 5 [default = 1];
  optional double alpha = 6 [default = 1];
  optional double beta = 7 [default = 0.5];
}

message EncodeConf {
  oneof encode {
    EncodeRaw raw = 1;
    EncodeJpeg jpeg = 2;
    EncodeBytesList bytes_list = 3;
  }
}

message EncodeBytesList {
}

message EncodeRaw {
  optional bool dim1_varying_length = 1 [default = false];
}

message EncodeJpeg {
  repeated ImagePreprocess preprocess = 1;
}

message SubtractPreprocessConf {
  required float value = 1;
}

message NormByChannelPreprocessConf {
  repeated float mean_value = 1;
  repeated float std_value = 2;
  required string data_format = 3;
}

message ScalePreprocessConf {
  required float value = 1;
}

message PreprocessConf {
  oneof type {
    SubtractPreprocessConf subtract_conf = 1;
    NormByChannelPreprocessConf norm_by_channel_conf = 2;
    ScalePreprocessConf scale_conf = 3;
  }
}

message RecordLoadOpConf {
  required string out = 1;
  required string data_dir = 2;
  optional string part_name_prefix = 3 [default = "part-"];
  optional int32 part_name_suffix_length = 4 [default = -1];
}

message BlobConf {
  required string name = 1;
  required ShapeProto shape = 2;
  required DataType data_type = 3;
  optional int32 max_sequence_size = 4 [default = 1];
  required EncodeConf encode_case = 5;
  repeated PreprocessConf preprocess = 6;
}

message DecodeOFRecordOpConf {
  required string data_dir = 1;
  optional string part_name_prefix = 2 [default = "part-"];
  optional int32 part_name_suffix_length = 3 [default = -1];
  optional string in = 4;
  repeated BlobConf blob = 5;
}

message DecodeRandomOpConf {
  required string out = 1;
  required ShapeProto shape = 2;
  required DataType data_type = 3;
  required InitializerConf data_initializer = 4;
}

message DefineTestBlobOpConf {
  required string out = 1;
  required ShapeProto shape = 2;
  required DataType data_type = 3;
  optional ShapeProto dim0_inner_shape = 4;
  optional int64 dim0_valid_num = 5;
  optional int64 dim1_valid_num = 6;
  optional int64 dim2_valid_num = 7;
  repeated int64 record_id_in_device_piece = 8;
}

message NormalizationOpConf {
  required string in = 1;
  required string out = 2;
  optional int32 axis = 3 [default = -1]; // NCHW = 1, NHWC = 3, TODO: axis list
  optional float momentum = 4 [default = 0.99];
  optional float epsilon = 5 [default = 0.001];
  optional bool center = 6 [default = true];
  optional bool scale = 7 [default = true];
  optional float beta_init = 8 [default = 0.0];
  optional float gamma_init = 9 [default = 1.0];
  optional float mean_init = 10 [default = 0.0];
  optional float variance_init = 11 [default = 1.0];
  optional bool use_first_piece_init_moving = 12 [default = false];
  optional ActivationType activation = 13 [default = kNone];
}

message DropoutOpConf {
  required string in = 1;
  required string out = 2;
  required double rate = 3;
  optional ShapeProto noise_shape = 4;
  optional int64 seed = 5;
}

message TransposeOpConf {
  required string in = 1;
  required string out = 2;
  repeated int32 perm = 3;
}

message ReduceConcatOpConf {
  required int32 in_num = 1;
}

message NcclAllReduceOpConf {
}

message NcclReduceScatterOpConf {
}

message NcclAllGatherOpConf {
}

message ReduceSplitOpConf {
  required int32 out_num = 1;
}

message ReduceScatterOpConf {
  required int32 out_num = 1;
}

message ReduceAddOpConf {
  required int32 in_num = 1;
}

message ReduceGatherOpConf {
  required int32 in_num = 1;
}

message AccuracyOpConf {
  required string prediction = 1;
  required string label = 2;
  optional int32 top_k = 3 [default = 1];
  required string accuracy = 4;
}

message MatmulOpConf {
  // input lbn
  required string a = 1;
  required string b = 2;
  // output bn
  required string out = 5;
  optional bool transpose_a = 6 [default = false];
  optional bool transpose_b = 7 [default = false];
}

message DotOpConf {
  required string in = 1;
  required string weight = 2;
  optional string bias = 3;
  required string out = 4;
}

message MultiplyOpConf {
  required string in_0 = 1;
  required string in_1 = 2;
  required string out = 4;
}

enum Norm {
  L1 = 1;
  L2 = 2;
}

message HingeLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional LossReductionType reduction = 4 [default = kSumOverN];
  optional float weight_scalar = 5 [default = 1.0];
  optional string weight = 6;
  optional Norm norm = 7[default = L1];
}

message PackOpConf {
  required string in = 1;
  required string out = 2;
  oneof pack_num_conf {
    int32 pack_num = 3;
    int32 pack_num_per_record = 4;
  }
  required string related_unpack = 5;
}

message UnpackOpConf {
  required string in = 1;
  required string out = 2;
  oneof unpack_num_conf {
    int32 unpack_num = 3;
    int32 unpack_num_per_record = 4;
  }
}
message RepeatOpConf {
  required string in = 1;
  required string out = 2;
  oneof repeat_num_conf {
    int32 repeat_num = 3;
    int32 repeat_num_per_record = 4;
  }
}

message GatherOpConf {
  required string in = 1;
  required string indices = 2;
  required string out = 3;
}

message SqrtOpConf {
  required string in = 1;
  required string out = 2;
}

message SquareOpConf {
  required string in = 1;
  required string out = 2;
}

message BroadcastAddOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastSubOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastMulOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastDivOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message ConstScalarOpConf {
  required string tick = 1;
  required string out = 2;
  oneof value {
    int64 int_val = 3;
    double float_val = 4;
  }
  optional DataType data_type = 5;
  optional int32 rank = 6 [default = 1];
}

message BiasAddOpConf {
  // inputs
  required string a = 1;
  required string b = 2;
  // output
  required string out = 3;
}

message ConstRangeOpConf {
  required string tick = 1;
  required string out = 2;
  message UseDevicePieceSizeConf{}
  oneof size_conf {
    int64 size = 3;
    UseDevicePieceSizeConf use_device_piece_size = 4;
  }
  optional DataType data_type = 5 [default = kInt32];
  optional int64 start = 6 [default = 0];
  optional int64 stride = 7 [default = 1];
}

message MeanOpConf {
  required string in = 1;
  required string out = 2;
  // TODO: axis of mean
}

message DimSliceConf {
  optional int32 start = 1 [default = 0];
  optional int32 end = 2 [default = 0];
  optional int32 stride = 3 [default = 1];
}

message SliceOpConf {
  required string in = 1;
  required string out = 2;
  repeated DimSliceConf dim_slice_conf = 3;
}

message OperatorConf {
  required string name = 1;
  optional string model_load_dir = 2;
  optional bool trainable = 3 [default = true];
  optional DeviceType device_type = 4 [default = kInvalidDevice];
  optional bool enable_cudnn = 5;
  optional int64 cudnn_buf_limit_mbyte = 6;
  oneof op_type {
    // system op
    DecodeOFRecordOpConf decode_ofrecord_conf = 101;
    DecodeRandomOpConf decode_random_conf = 102;
    RecordLoadOpConf record_load_conf = 103;
    CopyHdOpConf copy_hd_conf = 104;
    CloneOpConf clone_conf = 105;
    CopyCommNetOpConf copy_comm_net_conf = 106;
    ConcatOpConf concat_conf = 107;
    BoxingOpConf boxing_conf = 108;
    ReduceScatterOpConf reduce_scatter_conf = 109;
    ReduceAddOpConf reduce_add_conf = 110;
    ReduceGatherOpConf reduce_gather_conf = 111;
    ReduceConcatOpConf reduce_concat_conf = 112;
    ReduceSplitOpConf reduce_split_conf = 113;
    NcclAllReduceOpConf nccl_all_reduce_conf = 114;
    NcclReduceScatterOpConf nccl_reduce_scatter_conf = 115;
    NcclAllGatherOpConf nccl_all_gather_conf = 116;
    AccumulateOpConf accumulate_conf = 117;
    NormalModelUpdateOpConf normal_mdupdt_conf = 118;
    ModelSaveOpConf model_save_conf = 119;
    SharedModelDiffAddOpConf shared_model_diff_add_conf = 120;
    CastOpConf cast_conf = 121;
    VariableOpConf variable_conf = 122;
    
    // domain op
    TransposeOpConf transpose_conf = 201;
    ReshapeOpConf reshape_conf = 202;
    BasicRnnOpConf basic_rnn_conf = 203;
    FullyConnectedOpConf fully_connected_conf = 204;
    Conv1DOpConf conv_1d_conf = 205;
    Conv2DOpConf conv_2d_conf = 206;
    Conv3DOpConf conv_3d_conf = 207;
    AveragePooling1DOpConf average_pooling_1d_conf = 208;
    MaxPooling1DOpConf max_pooling_1d_conf = 209;
    AveragePooling2DOpConf average_pooling_2d_conf = 210;
    MaxPooling2DOpConf max_pooling_2d_conf = 211;
    AveragePooling3DOpConf average_pooling_3d_conf = 212;
    MaxPooling3DOpConf max_pooling_3d_conf = 213;
    EmbeddingLookupOpConf embedding_lookup_conf = 214;
    EmbeddingLookupAccumulateOpConf embedding_lookup_accumulate_conf = 215;
    LocalResponseNormalizationOpConf local_response_normalization_conf = 216;
    NormalizationOpConf normalization_conf = 217;
    DropoutOpConf dropout_conf = 218;
    ReduceSumOpConf reduce_sum_conf = 219;
    AddOpConf add_conf = 220;
    MatmulOpConf matmul_conf = 221;
    DotOpConf dot_conf = 222;
    MultiplyOpConf multiply_conf = 223;
    MaximumOpConf maximum_conf = 224;
    SigmoidOpConf sigmoid_conf = 225;
    TanHOpConf tanh_conf = 226;
    ReluOpConf relu_conf = 227;
    SoftmaxOpConf softmax_conf = 228;
    SparseCrossEntropyLossOpConf sparse_cross_entropy_loss_conf = 229;
    HingeLossOpConf hinge_loss_conf = 230;
    SparseSoftmaxCrossEntropyLossOpConf sparse_softmax_cross_entropy_loss_conf = 231;
    AccuracyOpConf accuracy_conf = 232;
    PrintOpConf print_conf = 233;
    AccuracyPrintOpConf accuracy_print_conf = 234;
    LossPrintOpConf loss_print_conf = 235;
    DefineTestBlobOpConf define_test_blob_conf = 236;
    PackOpConf pack_conf = 237;
    UnpackOpConf unpack_conf = 238;
    RepeatOpConf repeat_conf = 239;
    LogCounterOpConf log_counter_conf = 240;
    GeluOpConf gelu_conf = 241;
    GatherOpConf gather_conf = 242;
    SqrtOpConf sqrt_conf = 243;
    SquareOpConf square_conf = 244;
    ConstScalarOpConf const_scalar_conf = 245;
    ConstRangeOpConf const_range_conf = 246;
    BroadcastAddOpConf broadcast_add_conf = 247;
    BroadcastSubOpConf broadcast_sub_conf = 248;
    BroadcastMulOpConf broadcast_mul_conf = 249;
    BroadcastDivOpConf broadcast_div_conf = 250;
    MeanOpConf mean_conf = 251;
    SliceOpConf slice_conf = 252;
    BiasAddOpConf bias_add_conf = 253;
  }
}

message OpNameSet {
  repeated string op_name = 1;
}
