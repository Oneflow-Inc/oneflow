syntax = "proto2";
package oneflow;

import "oneflow/core/common/shape.proto";
import "oneflow/core/common/data_type.proto";
import "oneflow/core/record/image.proto";
import "oneflow/core/record/record.proto";
import "oneflow/core/job/resource.proto";
import "oneflow/core/register/logical_blob_id.proto";
import "oneflow/core/data/data.proto";

enum ActivationType {
  kNone = 0;
  kTanH = 1;
  kSigmoid = 2;
  kRelu = 3;
}

message ConstantInitializerConf {
  optional float value = 1 [default = 0];
}

message ConstantIntInitializerConf {
  optional int64 value = 1 [default = 0];
}

message RandomUniformInitializerConf {
  optional float min = 1 [default = 0];
  optional float max = 2 [default = 1];
}

message RandomUniformIntInitializerConf {
  optional int32 min = 1 [default = 0];
  optional int32 max = 2 [default = 1];
}

message RandomNormalInitializerConf {
  optional float mean = 1 [default = 0];
  optional float std = 2 [default = 1];
}

message TruncatedNormalInitializerConf {
  optional float mean = 1 [default = 0.0];
  optional float std = 2 [default = 0.05];
}

enum VarianceNorm {
  kFanIn = 0;
  kFanOut = 1;
  kAverage = 2;
}

enum RandomDistribution {
  kRandomUniform = 0;
  kRandomNormal = 1;
  kTruncatedNormal = 2;
}

message XavierInitializerConf {
  required VarianceNorm variance_norm = 1;
  required string data_format = 2;
}

message MsraInitializerConf {
  required VarianceNorm variance_norm = 1;
  required string data_format = 2;
}

//output[D_0 ... D_(axis - 1) i D_(axis + 1) ... D_n] = start + i * stride
message RangeInitializerConf {
  optional double start = 1 [default = 0];
  optional double stride = 2 [default = 1];
  optional int64 axis = 3 [default = -1];
}

message IntRangeInitializerConf {
  optional int64 start = 1 [default = 0];
  optional int64 stride = 2 [default = 1];
  optional int64 axis = 3 [default = -1];
}

message VarianceScalingInitializerConf {
  required float scale = 1;
  required VarianceNorm variance_norm = 2;
  required RandomDistribution distribution = 3;
  required string data_format = 4;
}

message InitializerConf {
  oneof type {
    ConstantInitializerConf constant_conf = 1;
    ConstantIntInitializerConf constant_int_conf = 2;
    RandomUniformInitializerConf random_uniform_conf = 3;
    RandomUniformIntInitializerConf random_uniform_int_conf = 4;
    RandomNormalInitializerConf random_normal_conf = 5;
    TruncatedNormalInitializerConf truncated_normal_conf = 6;
    XavierInitializerConf xavier_conf = 7;
    MsraInitializerConf msra_conf = 8;
    RangeInitializerConf range_conf = 9;
    IntRangeInitializerConf int_range_conf = 10;
    VarianceScalingInitializerConf variance_scaling_conf = 11;
  }
}

message Conv1DOpConf {
  required string in = 1;
  required string out = 2;
  required int32 filters = 3;
  optional string padding = 4 [default = "valid"];
  required string data_format = 5;
  repeated int32 kernel_size = 6;
  repeated int32 strides = 7;
  repeated int32 dilation_rate = 8;
  optional bool use_bias = 10 [default = true];
  required string weight = 13;
  optional string bias = 14;
}

message Conv2DOpConf {
  required string in = 1;
  required string out = 2;
  required int32 filters = 3;
  optional string padding = 4 [default = "valid"];
  required string data_format = 5;
  repeated int32 kernel_size = 6;
  repeated int32 strides = 7;
  repeated int32 dilation_rate = 8;
  optional bool use_bias = 10 [default = true];
  required string weight = 13;
  optional string bias = 14;
}

message Conv3DOpConf {
  required string in = 1;
  required string out = 2;
  required int32 filters = 3;
  optional string padding = 4 [default = "valid"];
  required string data_format = 5;
  repeated int32 kernel_size = 6;
  repeated int32 strides = 7;
  repeated int32 dilation_rate = 8;
  optional bool use_bias = 10 [default = true];
  required string weight = 13;
  optional string bias = 14;
}

message ConvConf {
  required int32 num_spatial_dims = 1;
  required string padding = 2;
  required string data_format = 3;
  repeated int32 kernel_size = 4;
  repeated int32 strides = 5;
  repeated int32 dilation_rate = 6;
}

message ConvDataGradOpConf {
  required string dy = 1;
  required string filter = 2;
  required string x_like = 3;
  required string dx = 4;
  required ConvConf conv_conf = 5;
}

message ConvFilterGradOpConf {
  required string dy = 1;
  required string x = 2;
  required string filter_diff = 3;
  required ConvConf conv_conf = 4;
}

message ConvBiasGradOpConf {
  required string dy = 1;
  required string bias_diff = 2;
  required string data_format = 3;
  required int64 num_spatial_dims = 4;
}

message AveragePooling1DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message MaxPooling1DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message AveragePooling2DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message MaxPooling2DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message AveragePooling3DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message MaxPooling3DOpConf {
  required string in = 1;
  required string out = 2;

  optional string padding = 3 [default = "valid"];
  required string data_format = 4;
  repeated int32 pool_size = 5;
  repeated int32 strides = 6;
}

message PoolingConf {
  required int32 num_spatial_dims = 1;
  // "avg" or "max"
  required string pool_mode = 2;
  required string data_format = 3;
  repeated int32 pool_size = 4;
  repeated int32 strides = 5;
  optional string padding = 6 [default = "valid"];
}

message PoolingGradOpConf {
  // input
  required string x = 1;
  required string y = 2;
  required string dy = 3;
  // output
  required string dx = 4;
  required PoolingConf pooling_conf = 5;
}

message ReluOpConf {
  required string in = 1;
  required string out = 2;
}

message ReluGradOpConf {
  required string y = 1;
  required string dy = 2;
  required string dx = 3;
}

message PReluOpConf {
  required string in = 1;
  required string out = 2;
  required string data_format = 3;
  optional bool channel_shared = 4 [default = false];
  optional float alpha_init = 5 [default = 0.25];
  required string alpha = 6;
}

message PReluDataGradOpConf {
  required string dy = 1;
  required string x = 2;
  required string alpha = 3;
  required string dx = 4;
  required string data_format = 5;
  required bool channel_shared = 6;
}

message PReluAlphaGradOpConf {
  required string dy = 1;
  required string x = 2;
  required string alpha_grad = 3;
  required string data_format = 4;
  required bool channel_shared = 5;
}

message SigmoidOpConf {
  required string in = 1;
  required string out = 2;
}

message SigmoidGradOpConf {
  required string y = 1;
  required string dy = 2;
  required string dx = 3;
}

message TanHOpConf {
  required string in = 1;
  required string out = 2;
}

message TanHGradOpConf {
  required string y = 1;
  required string dy = 2;
  required string dx = 3;
}

message SoftmaxOpConf {
  required string in = 1;
  required string out = 2;
  optional int32 axis = 3 [default = -1];
  optional string transpose_in = 4 [default = "transpose_in"];
  optional string transpose_out = 5 [default = "transpose_out"];
}

message SoftmaxGradOpConf {
  required string y = 1;
  required string dy = 2;
  required string dx = 3;
  optional string transpose_x = 4;
  optional string transpose_y = 5;
  optional int32 axis = 6 [default = -1];
}

enum ScalarReductionType {
  kSumOverOne = 0;
  kSumOverWeight = 1;
  kSumOverN = 2;
  kSumOverNonZeroWeight = 3;
}

message SparseCrossEntropyOpConf {
  required string prediction = 1;
  required string label = 2;
  required string out = 3;
}

message SparseCrossEntropyGradOpConf {
  required string prediction = 1;
  required string label = 2;
  required string dy = 3;
  required string prediction_diff = 4;
}

message SparseSoftmaxCrossEntropyLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional ScalarReductionType reduction = 4 [default = kSumOverN];
  optional float weight_scalar = 5 [default = 1.0];
  optional string weight = 6;
}

message SparseCrossEntropyLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional ScalarReductionType reduction = 4 [default = kSumOverN];
  optional float weight_scalar = 5 [default = 1.0];
  optional string weight = 6;
}

message SigmoidCrossEntropyLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional bool normalize = 4 [default = true];
  optional float scale = 5 [default = 1.0];
  optional ScalarReductionType reduction = 6 [default = kSumOverN];
  optional float weight_scalar = 7 [default = 1.0];
  optional string weight = 8;
}

message SigmoidCrossEntropyLossGradOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss_diff = 3;
  required string prediction_diff = 4;
  optional float weight_scalar = 5 [default = 1.0];
  optional ScalarReductionType reduction = 6 [default = kSumOverN];
}

message SigmoidCrossEntropyOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  required DataType label_type = 4;
}

message SigmoidCrossEntropyGradOpConf {
  required string prediction = 1;
  required string label = 2;
  required string prediction_diff = 3;
  required string loss_diff = 4;
  required DataType label_type = 5;
}

message IdentityLossOpConf {
  required string prediction = 1;
  required string loss = 2;
  optional ScalarReductionType reduction = 3 [default = kSumOverN];
  optional float weight_scalar = 4 [default = 1.0];
  optional string weight = 5;
}

message ConcatOpConf {
  repeated string in = 1;
  required string out = 2;
  required int32 axis = 3;
}

message DistributeConcatOpConf {
  repeated string in = 1;
  required string out = 2;
  required int32 axis = 3;
}

message DistributeSplitOpConf {
  required string in = 1;
  repeated string out = 2;
  required int32 axis = 3;
}

message DistributeCloneOpConf {
  required string in = 1;
  repeated string out = 2;
}

message DistributeAddOpConf {
  repeated string in = 1;
  required string out = 2;
}

message SplitLikeOpConf {
  required string in = 1;
  repeated string like = 2;
  repeated string out = 3;
  required int32 axis = 4;
}

message CopyCommNetOpConf {
}

message CopyHdOpConf {
  enum Type {
    H2D = 0;
    D2H = 1;
  }
  required Type type = 1;
}

message BoxConcatConf {
  required int32 axis = 1;
}

message BoxAddConf {
}

message BoxSplitConf {
  required int32 axis = 1;
  repeated int32 part_num = 2;
}

message BoxCloneConf {
}

message BoxingOpConf {
  required LogicalBlobId lbi = 1;
  required int32 in_num = 2;
  required int32 out_num = 3;

  oneof in_box {
    BoxConcatConf concat_box = 4;
    BoxAddConf add_box = 5;
  }
  oneof out_box {
    BoxSplitConf split_box = 6;
    BoxCloneConf clone_box = 7;
  }
}

message NaiveModelUpdateConf {
}

message MomentumModelUpdateConf {
  optional float beta = 1 [default = 0.9];
}

message RMSPropModelUpdateConf {
  optional float decay_rate = 1 [default = 0.99];
  optional float epsilon = 2 [default = 1e-8];
}

message LARSModelUpdateConf {
  optional float momentum_beta = 1 [default = 0.9];
  optional float epsilon = 2 [default = 1e-9];
  optional float lars_coefficient = 3 [default = 0.0001];
}

message AdamModelUpdateConf {
  optional float beta1 = 1 [default = 0.9];
  optional float beta2 = 2 [default = 0.999];
  optional float epsilon = 3 [default = 1e-8];
  optional bool do_bias_correction = 4 [default = false];
}

message LazyAdamModelUpdateConf {
  optional float beta1 = 1 [default = 0.9];
  optional float beta2 = 2 [default = 0.999];
  optional float epsilon = 3 [default = 1e-8];
}

message ExponentialDecayConf {
  required int64 decay_batches = 1;
  required double decay_rate = 2;
  optional bool staircase = 3 [default = false];
}

message InverseTimeDecayConf {
  required int64 decay_batches = 1;
  required double decay_rate = 2;
  optional bool staircase = 3 [default = false];
}

message NaturalExpDecayConf {
  required int64 decay_batches = 1;
  required double decay_rate = 2;
  optional bool staircase = 3 [default = false];
}

message PiecewiseConstantConf {
  repeated int64 boundaries = 1;
  repeated double values = 2;
}

message PolynomialDecayConf {
  required int64 decay_batches = 1;
  optional double end_learning_rate = 2 [default = 0.0001];
  optional double power = 3 [default = 1.0];
  optional bool cycle = 4 [default = false];
}

message CosineDecayConf {
  required int64 decay_batches = 1;
  optional double alpha = 2 [default = 0.0];
}

message LinearCosineDecayConf {
  required int64 decay_batches = 1;
  optional double num_periods = 2 [default = 0.5];
  optional double alpha = 3 [default = 0.0];
  optional double beta = 4 [default = 0.001];
}

message PiecewiseScalingConf {
  repeated int64 boundaries = 1;
  repeated double scales = 2; 
}

message LearningRateDecayConf {
  oneof type {
    ExponentialDecayConf exponential_conf = 2000;
    InverseTimeDecayConf inverse_time_conf = 2001;
    NaturalExpDecayConf natural_exp_conf = 2002;
    PiecewiseConstantConf piecewise_constant_conf = 2003;
    PolynomialDecayConf polynomial_conf = 2004;
    CosineDecayConf cosine_conf = 2005;
    LinearCosineDecayConf linear_cosine_conf = 2006;
    PiecewiseScalingConf piecewise_scaling_conf = 2007;
  }
}

message ConstantWarmupConf {
  required int64 warmup_batches = 1;
  required double multiplier = 2;
}

message LinearWarmupConf {
  required int64 warmup_batches = 1;
  required double start_multiplier = 2;
}

message WarmupConf {
  oneof type {
    ConstantWarmupConf constant_conf = 3000;
    LinearWarmupConf linear_conf = 3001;
  }
}

message ClipByGlobalNormConf {
  required float clip_norm = 1;
  optional float global_norm = 2;
}

message ClipConf {
  oneof type {
    ClipByGlobalNormConf clip_by_global_norm = 1;
  }
}

message NormalModelUpdateOpUserConf {
  optional LearningRateDecayConf learning_rate_decay = 1;
  optional WarmupConf warmup_conf = 2;
  optional ClipConf clip_conf = 3;
  oneof normal_mdupdt {
    NaiveModelUpdateConf naive_conf = 1000;
    MomentumModelUpdateConf momentum_conf = 1001;
    RMSPropModelUpdateConf rmsprop_conf = 1002;
    LARSModelUpdateConf lars_conf = 1003;
    AdamModelUpdateConf adam_conf = 1004;
    LazyAdamModelUpdateConf lazy_adam_conf = 1005;
  }
}

message NormalModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string model_diff = 2;
  required string total_instance_num_diff = 3;
  required string model = 4;
  required string train_step = 5;
  required string learning_rate = 6;
  required float l1 = 7;
  required float l2 = 8;
}

message NaiveModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string model_diff = 2;
  required string total_instance_num_diff = 3;
  required string model = 4;
  required string train_step = 5;
  required string learning_rate = 6;
  required float l1 = 7;
  required float l2 = 8;
}

message MomentumModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string momentum = 2;
  required string model_diff = 3;
  required string total_instance_num_diff = 4;
  required string model = 5;
  required string train_step = 6;
  required string learning_rate = 7;
  required float l1 = 8;
  required float l2 = 9;
}

message RMSPropModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string model_diff = 2;
  required string total_instance_num_diff = 3;
  required string model = 4;
  required string train_step = 5;
  required string learning_rate = 6;
  required float l1 = 7;
  required float l2 = 8;
}

message LARSModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string momentum = 2;
  required string model_diff = 3;
  required string total_instance_num_diff = 4;
  required string model = 5;
  required string train_step = 6;
  required string learning_rate = 7;
  required float l1 = 8;
  required float l2 = 9;
}

message AdamModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string m = 2;
  required string v = 3;
  optional string beta1_t = 4;
  optional string beta2_t = 5;
  required string model_diff = 6;
  required string total_instance_num_diff = 7;
  required string model = 8;
  required string train_step = 9;
  required string learning_rate = 10;
  required float l1 = 11;
  required float l2 = 12;
}

message LazyAdamModelUpdateOpConf {
  required NormalModelUpdateOpUserConf user_conf = 1;
  required string m = 2;
  required string v = 3;
  optional string beta1_t = 4;
  optional string beta2_t = 5;
  required string model_diff = 6;
  required string total_instance_num_diff = 7;
  required string model = 8;
  required string train_step = 9;
  required string learning_rate = 10;
  required float l1 = 11;
  required float l2 = 12;
}

message AccumulateOpConf {
}

message PrintRecordConf {
  required string lbn = 1;
  optional string name = 2;
  required EncodeConf encode_case = 3;
}

message PrintOpConf {
  repeated PrintRecordConf in = 1;
  required string print_dir = 2;
  optional string part_name_prefix = 3 [default = "part-"];
  optional int32 part_name_suffix_length = 4 [default = -1];
}

message GeluOpConf {
  required string in = 1;
  required string out = 2;
}

message GeluGradOpConf {
  required string x = 1;
  required string dy = 2;
  required string dx = 3;
}

message ReduceSumOpConf {
  oneof in_conf {
    string in = 1; // For User
    LogicalBlobId in_sys = 2; // For System
  }
  required string out = 3;
  repeated int32 axis = 4;
  optional bool keep_dims = 5 [default = false];
}

message ReduceSumLikeOpConf {
  required string x = 1;
  required string like = 2;
  required string y = 3;
  repeated int32 axis = 4;
  optional string temp_storage = 5 [default = "temp_storage"];
}

message ReduceMeanOpConf {
  required string in = 1;
  required string out = 2;
  repeated int32 axis = 3;
  optional bool keep_dims = 4 [default = false];
}

message ReduceMeanGradOpConf {
  required string dy = 1;
  required string x = 2; // like
  required string dx = 3;
  repeated int32 reduced_axis = 4;
  optional string temp_storage = 5 [default = "temp_storage"];
}

message ReshapeOpConf {
  required string in = 1;
  required string out = 2;
  required ShapeProto shape = 3;
}

message ReshapeLikeOpConf {
  required string x = 1;
  required string y = 2;
  required string like = 3;
}

message AddOpConf {
  repeated string in = 1;
  required string out = 2;
}

message MaximumOpConf {
  repeated string in = 1;
  required string out = 2;
}

message CastOpConf {
  required string in = 1;
  required string out = 2;
  required DataType data_type = 3;
}

message InterfaceBlobConf {
  required ShapeProto shape = 1;
  required DataType data_type = 2;
  optional OptInt64 split_axis = 3;
  required OptInt64 batch_axis = 4;
  optional bool is_dynamic = 5;
  optional int64 num_of_lod_levels = 6 [default = 0];
}

message InputOpConf {
  optional string tick = 1;
  required string out = 2;
  required InterfaceBlobConf blob_conf = 3;
}

message ForeignInputOpConf {
  optional string tick = 1;
  required string out = 2;
  required InterfaceBlobConf blob_conf = 3;
  required string ofblob_buffer_name = 4;
}

message ReturnOpConf {
  required string in = 1;
  required string out = 2;
}

message OutputOpConf {
  required string in = 1;
  required string out = 2;
  required InterfaceBlobConf blob_conf = 3;
}

message SwitchOutputOpConf {
  repeated string in = 1;
  required string in_index = 2;
  required string out = 3;
  required InterfaceBlobConf blob_conf = 4;
}

message ForeignOutputOpConf {
  required string in = 1;
  required string ofblob_buffer_name = 3;
}

message ForeignWatchOpConf {
  required string in = 1;
  required string handler_uuid = 2;
}

message InitializeWithSnapshotConf {
  required string path = 1;
  optional string key = 2;
}

message VariableOpConf {
  optional string tick = 1;
  required string out = 2;
  required ShapeProto shape = 3;
  optional DataType data_type = 4;
  oneof initialize {
    InitializerConf initializer = 5;
    InitializeWithSnapshotConf initialize_with_snapshot = 6;
  }
  optional string model_name = 7 [default = "weight"];
  required OptInt64 split_axis = 8;
  optional int64 random_seed = 9;
}

message LocalResponseNormalizationOpConf {
  required string in = 1;
  required string out = 2;
  required string data_format = 3;
  optional int32 depth_radius = 4 [default = 5];
  optional double bias = 5 [default = 1];
  optional double alpha = 6 [default = 1];
  optional double beta = 7 [default = 0.5];
}

message EncodeConf {
  oneof encode {
    EncodeRaw raw = 1;
    EncodeJpeg jpeg = 2;
    EncodeBytesList bytes_list = 3;
  }
}

message EncodeBytesList {
}

message EncodeRaw {
  optional bool dim1_varying_length = 1 [default = false];
  optional bool auto_zero_padding = 2 [default = false];
}

message EncodeJpeg {
  repeated ImagePreprocess preprocess = 1;
}

message SubtractPreprocessConf {
  required float value = 1;
}

message NormByChannelPreprocessConf {
  repeated float mean_value = 1;
  repeated float std_value = 2;
  required string data_format = 3;
}

message ScalePreprocessConf {
  required float value = 1;
}

message PreprocessConf {
  oneof type {
    SubtractPreprocessConf subtract_conf = 1;
    NormByChannelPreprocessConf norm_by_channel_conf = 2;
    ScalePreprocessConf scale_conf = 3;
  }
}

message RandomShuffleConf {
  optional int32 buffer_size = 1 [default = 1024];
}

message RecordLoadOpConf {
  optional string tick  = 1;
  required string out = 2;
  required string data_dir = 3;
  required int32 data_part_num = 4;
  optional string part_name_prefix = 5 [default = "part-"];
  optional int32 part_name_suffix_length = 6 [default = -1];
  optional RandomShuffleConf random_shuffle_conf = 7;
  required int64 batch_size = 8;
}

message BlobConf {
  required string name = 1;
  required ShapeProto shape = 2;
  required DataType data_type = 3;
  optional int32 max_sequence_size = 4 [default = 1];
  required EncodeConf encode_case = 5;
  repeated PreprocessConf preprocess = 6;
  repeated int32 variable_length_axes = 7;
  optional DataSourceCase data_source = 8;
  optional bool is_dynamic = 9 [default = false];
}

message DataLoadOpConf {
  required int64 batch_size = 1;
  optional string tick = 2;
  required DatasetProto dataset = 3;
  repeated BlobConf blobs = 4;
  repeated DataTransformProto transforms = 5;
  required int32 num_parallels = 6;
}

message DecodeOFRecordOpConf {
  required string data_dir = 1;
  required int32 data_part_num = 2; // piece_size % data_part_num = 0
  optional string part_name_prefix = 3 [default = "part-"];
  optional int32 part_name_suffix_length = 4 [default = -1];
  optional string in = 5;
  repeated BlobConf blob = 6;
  optional RandomShuffleConf random_shuffle_conf = 7;
  required int64 batch_size = 8;
}

message DecodeRandomOpConf {
  optional string tick = 1;
  required string out = 2;
  required ShapeProto shape = 3;
  required DataType data_type = 4;
  required InitializerConf data_initializer = 5;
  required int64 batch_size = 8;
}

message NormalizationOpConf {
  required string in = 1;
  required string out = 2;
  optional int32 axis = 3 [default = -1]; // NCHW = 1, NHWC = 3, TODO: axis list
  optional float momentum = 4 [default = 0.99];
  optional float epsilon = 5 [default = 0.001];
  optional bool center = 6 [default = true];
  optional bool scale = 7 [default = true];
  optional float beta_init = 8 [default = 0.0];
  optional float gamma_init = 9 [default = 1.0];
  optional float mean_init = 10 [default = 0.0];
  optional float variance_init = 11 [default = 1.0];
  required string moving_mean = 14;
  required string moving_variance = 15;
  optional string beta = 16;
  optional string gamma = 17;
  optional string mean = 18 [default = "mean"];
  optional string inv_variance = 19 [default = "inv_variance"];
  optional bool is_training = 20 [default = true];
}

message NormalizationGradOpConf {
  //in
  required string dy = 1;
  required string x = 2;
  optional string mean = 3;
  optional string inv_variance = 4;
  optional string gamma = 5;
  //out
  optional string dx = 6 [default = "dx"];
  optional string beta_diff = 7 [default = "beta_diff"];
  optional string gamma_diff = 8 [default = "gamma_diff"];

  required int32 axis = 9;
  required float epsilon = 10;
}

message RandomMaskLikeOpConf {
  required string like = 1;
  required string out = 2;
  required double rate = 3;
  optional ShapeProto noise_shape = 4;
  optional int64 seed = 5;
}

message DropoutOpConf {
  required string mask = 1;
  required string in = 2;
  required string out = 3;
  required float scale = 4;
}

message DropoutGradOpConf {
  required string mask = 1;
  required string dy = 2;
  required string dx = 3;
  required float scale = 4;
}

message TransposeOpConf {
  required string in = 1;
  required string out = 2;
  repeated int32 perm = 3;
}

message ReduceConcatOpConf {
  required int32 in_num = 1;
  repeated string in = 2;
  optional string out = 3;
}

message NcclAllReduceOpConf {
  optional string in = 1;
  optional string out = 2;
}

message NcclReduceScatterOpConf {
}

message NcclAllGatherOpConf {
}

message NcclTupleBroadcastOpConf {
  optional string tick = 1;
  repeated string in = 2;
  repeated string out = 3;
  repeated int64 root = 4;
  repeated DataType data_type = 5;
  repeated ShapeProto shape = 6;
  optional int64 nccl_order_hint = 7 [default = 0];
}

message NcclTupleReduceOpConf {
  repeated string in = 1;
  repeated string out = 2;
  repeated int64 root = 3;
  optional int64 nccl_order_hint = 4 [default = 0];
}

message ReduceSplitOpConf {
  required int32 out_num = 1;
  required string in = 2;
  repeated string out = 3;
  repeated ShapeProto out_shape = 4;
  optional int32 order_in_graph = 5;
}

message ReduceScatterOpConf {
  optional int32 out_num = 1 [default = 0];
}

message ReduceAddOpConf {
  optional int32 in_num = 1 [default = 0];
}

message ReduceGatherOpConf {
  optional int32 in_num = 1 [default = 0];
}

message AccuracyOpConf {
  required string prediction = 1;
  required string label = 2;
  optional int32 top_k = 3 [default = 1];
  required string accuracy = 4;
  optional string weight = 5;
}

message MatmulOpConf {
  // input lbn
  required string a = 1;
  required string b = 2;
  // output bn
  required string out = 5;
  optional bool transpose_a = 6 [default = false];
  optional bool transpose_b = 7 [default = false];
}

message DotOpConf {
  required string in = 1;
  required string weight = 2;
  optional string bias = 3;
  required string out = 4;
}

message MultiplyOpConf {
  required string in_0 = 1;
  required string in_1 = 2;
  required string out = 4;
}

enum Norm {
  L1 = 1;
  L2 = 2;
}

message HingeLossOpConf {
  required string prediction = 1;
  required string label = 2;
  required string loss = 3;
  optional ScalarReductionType reduction = 4 [default = kSumOverN];
  optional float weight_scalar = 5 [default = 1.0];
  optional string weight = 6;
  optional Norm norm = 7[default = L1];
}

message PackOpConf {
  required string in = 1;
  required string out = 2;
  required int32 pack_num = 3;
  required string related_unpack = 4;
}

message UnpackOpConf {
  required string in = 1;
  required string out = 2;
  required int32 unpack_num = 3;
}

message RepeatOpConf {
  required string in = 1;
  required string out = 2;
  required int32 repeat_num = 3;
}

message GatherOpConf {
  required string in = 1;
  required string indices = 2;
  required string out = 3;
  optional int64 axis = 4 [default = 0];
}

message GatherMs0OpConf {
  required string in = 1;
  required string indices = 2;
  required string out = 3;
}

message UnsortedSegmentSumOpConf {
  required string data = 1;
  required string segment_ids = 2;
  required string out = 3;
  required int64 axis = 4;
  required int64 num_segments = 5;
}

message GatherMs0GradOpConf {
  required string out_diff = 1;
  required string indices = 2;
  required string in_diff = 3;
  required int64 gather_dim_size = 4;
}

message BatchGatherOpConf {
  required string in = 1;
  required string indices = 2;
  required string out = 3;
}

message SqrtOpConf {
  required string in = 1;
  required string out = 2;
}

message RsqrtOpConf {
  required string in = 1;
  required string out = 2;
  optional double epsilon = 3 [default = 1e-5];
}

message SquareOpConf {
  required string in = 1;
  required string out = 2;
}

message BroadcastAddOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastSubOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastMulOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastDivOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastLikeOpConf {
  required string x = 1;
  required string like = 2;
  required string y = 3;
  repeated int32 reduced_axis = 4;
}

message BroadcastDivGradOpConf {
  //  input
  required string b = 1; // denominator in fw
  required string y = 2;
  required string dy = 3;
  //  output
  required string db = 4;
  optional string temp_storage = 5 [default = "temp_storage"];
}

message BroadcastEqualOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastNotEqualOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastLessThanOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastLessEqualOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastGreaterThanOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastGreaterEqualOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastLogicalAndOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastMinOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BroadcastMaxOpConf {
  required string a = 1;
  required string b = 2;
  required string out = 3;
  optional bool is_const = 4 [default = false];
}

message BiasAddOpConf {
  // inputs
  required string a = 1;
  required string b = 2;
  // output
  required string out = 3;
  // conf
  required int32 axis = 4;
}

message DimSliceConf {
  optional int32 start = 1 [default = 0];
  optional int32 end = 2 [default = 0];
  optional int32 stride = 3 [default = 1];
}

message SliceOpConf {
  required string in = 1;
  required string out = 2;
  repeated DimSliceConf dim_slice_conf = 3;
}

message SliceV2OpConf {
  required string in = 1;
  required string out = 2;
  repeated DimSliceConf dim_slice_conf = 3;
}

message SliceGradOpConf {
  required string dy = 1;
  required string dx = 2;
  required string like = 3;
  repeated DimSliceConf dim_slice_conf = 4;
}

message LayerNormOpConf {
  // in
  required string in = 1;
  optional string beta = 2;
  optional string gamma = 3;

  // out
  required string out = 4;
  optional string normalized = 5 [default = "normalized"];
  optional string mean = 6 [default = "mean"];
  optional string inv_variance = 7 [default = "inv_variance"];

  optional bool center = 8 [default = true];
  optional bool scale = 9 [default = true];
  optional int64 begin_norm_axis = 11 [default = 1];
  optional int64 begin_params_axis = 12 [default = -1];
  optional double epsilon = 13 [default = 1e-5];
}

message LayerNormGradOpConf {
  // in
  required string dy = 1;
  required string x = 2;
  optional string mean = 3;
  optional string inv_variance = 4;
  // out
  required string dx = 5;

  required int64 begin_norm_axis = 6;
  required double epsilon = 7;
}

message LayerNormParamGradOpConf {
  // in
  required string dy = 1;
  optional string normalized = 2;
  optional string gamma = 3;
  // out
  optional string normalized_diff = 4;
  optional string beta_diff = 5;
  optional string gamma_diff = 6;

  required int64 begin_params_axis = 7;
}

message ConstantOpConf {
  optional string tick = 1;
  required string out = 2;
  optional ShapeProto shape = 3;
  optional DataType data_type = 4;
  optional InitializerConf initializer = 5;
}

message OneHotOpConf {
  required string indices = 1;
  required string out = 2;
  required int64 depth = 3;
  optional DataType data_type = 4;
}

message ScalarAddOpConf {
  required string in = 1;
  required string out = 2;
  oneof scalar_operand {
    int64 int_operand = 3;
    double float_operand = 4;
  }
}

message ScalarMulOpConf {
  required string in = 1;
  required string out = 2;
  oneof scalar_operand {
    int64 int_operand = 3;
    double float_operand = 4;
  }
}

message ReduceIdentityOpConf {
  optional string in = 1;
  optional string out = 2;
  optional int32 order_in_graph = 3;
}

message TickOpConf {
  repeated string tick = 1;
  required string out = 2;
}

message WaitAndSendIdsOpConf {
  required string out = 1;
  required string wait_buffer_name = 2;
  repeated Int64List id_list = 3;
  required DataType data_type = 4 [default = kInt32];
}

message CallbackNotifyOpConf {
  required string in = 1;
  repeated string callback_buffer_name = 2;
}

message ReentrantLockOpConf {
  required string start = 1;
  optional string end = 2;
  required string out = 3;
  repeated Int64List lock_id2intersecting_lock_ids = 4;
}

message SourceTickOpConf {
  required string out = 1;
}

message SinkTickOpConf {
  repeated string tick = 1;
  required string out = 2;
}

message TupleIdentityOpConf {
  repeated string in = 1;
  repeated string out = 2;
}

message TopKOpConf {
  required string in = 1;
  required string out = 2;
  optional int32 k = 3 [default = 1];
  optional bool sorted = 4 [default = true];
}

message L2NormalizeOpConf {
  required string in = 1;
  required string out = 2;
  required int32 axis = 3 [default = -1];
  optional float epsilon = 4 [default = 1e-12];
}

message KeepHeaderOnlyOpConf {
  repeated string in = 1;
  repeated string out = 2;
}

message AxpyOpConf {
  required string x = 1;
  required string y = 2;
  required double alpha = 3;
}

message TotalLossInstanceNumOpConf {
  repeated string in = 1;
  required string out = 2;
}

message UnsortedBatchSegmentSumOpConf {
  required string data = 1;
  required string segment_ids = 2;
  required string out = 3;
  required int64 num_segments = 4;
}

message ShapeElemCntAxisConf {
  repeated int32 axis = 1;
}

message ShapeElemCntRangeAxisConf {
  // closed interval: [begin_axis, end_axis]
  optional int32 begin_axis = 1 [default = 0];
  optional int32 end_axis = 2 [default = -1];
}

message ShapeElemCntOpConf {
  required string x = 1;
  required string y = 2;
  optional DataType data_type = 3 [default = kInt32];
  oneof axis_conf {
    ShapeElemCntAxisConf exclude_axis_conf = 4;
    ShapeElemCntAxisConf include_axis_conf = 5;
    ShapeElemCntRangeAxisConf range_axis_conf = 6;
  }
}

message AccOpConf {
  // in
  required string one = 1;
  // out
  required string acc = 2;
  optional int32 max_acc_num = 3 [default = 1];   
}

message AccTickOpConf {
  // in
  required string one = 1;
  // out
  required string acc = 2;
  optional int32 max_acc_num = 3 [default = 1];   
}

message EveryNthOpConf {
  required string in = 1;
  required string out = 2;
  required int64 n = 3;
}

message ModelInitOpConf {
  required string tick = 1;
  repeated string out = 2;
  repeated string variable_op_name = 3;
  repeated VariableOpConf original_variable_conf = 4;
}

message ModelLoadOpConf {
  required string path = 1;
  repeated string out = 2;
  repeated string variable_op_name = 3;
  repeated VariableOpConf original_variable_conf = 4;
}

message AllReduceFacadeOpConf {
  required string in = 1;
  required string out = 2;
}

message IdentityOpConf {
  required string in = 1;
  required string out = 2;
}

message SleepOpConf {
  required string in = 1;
  required string out = 2;
  required int64 seconds = 3;
}

message LoDToDenseOpConf {
  required string in = 1;
  required string out = 2;
}

message CaseOpConf {
  required string in = 1;
  repeated string out = 2;
}

message EsacOpConf {
  repeated string in = 1;
  required string out = 2;
  optional DataType data_type = 3 [default=kInt32];
}

message PartialTickOpConf {
  required string tick = 1;
  required string out = 2;
}

message AssignOpConf {
  required string ref = 1;
  required string value = 2;
}

message ModelSaveOpConf {
  required string path = 1;
  repeated string in = 2;
  repeated string key = 3;
}

message LearningRateScheduleOpConf {
  required string train_step = 1;
  required string out = 2;
  required float learning_rate = 3;
  optional LearningRateDecayConf learning_rate_decay = 4;
  optional WarmupConf warmup_conf = 5;
}

message DeconvOpConf {
    required string x = 1;
    required string y = 2;
    required string filter = 3;
    required int32 filters = 4;
    required ConvConf conv_conf = 5;
    optional bool use_bias = 6 [default = true];
    optional InitializerConf weight_initializer = 7;
    optional InitializerConf bias_initializer = 8;
}

message RoiAlignArgs {
  required int32 pooled_h = 4;
  required int32 pooled_w = 5;
  optional float spatial_scale = 6 [default = 0.0625]; // 1/16
  optional int32 sampling_ratio = 7 [default = 2]; // adaptive if negative
  optional string data_format = 8 [default = "channels_first"];
}

message RoiAlignOpConf {
  required string x = 1;
  required string rois = 2;
  required string y = 3;
  required RoiAlignArgs roi_align_args = 4;
}

message RoiAlignGradOpConf {
  required string dy = 1;
  required string x_like = 2;
  required string rois = 3;
  required string dx = 4;
  required RoiAlignArgs roi_align_args = 5;
}

message WhereOpConf {
  // in
  required string condition = 1;
  required string lhs = 2;
  required string rhs = 3;
  // out
  required string out = 4;
}

message ClipByValueOpConf {
  // in
  required string in = 1;
  // conf
  optional float min_val = 2;
  optional float max_val = 3;
  // out
  required string out = 4;
}

message ConstantLikeOpConf {
  required string in = 1;
  required float scalar = 2;
  required string out = 3;
}

message LocalNonzeroOpConf {
  required string in = 1;
  required string out = 2;
  required string num_nonzero = 3;
}

message SqueezeOpConf {
  required string in = 1;
  required string out = 2;
  repeated int32 axis = 3;
}

message ExpandDimsOpConf {
  required string in = 1;
  required string out = 2;
  required int32 axis = 3;
}

message LocalGatherOpConf {
  required string in = 1;
  required string indices = 2;
  required string out = 3;
  optional int64 axis = 4 [default = 0];
}

message LocalScatterNdUpdateOpConf {
  // in
  required string in = 1;
  required string indices = 2;
  required string updates = 3;
  // out
  required string out = 4;
}

message MaskrcnnPositiveNegativeSampleOpConf {
  // in
  required string pos_inds = 1;
  required string neg_inds = 2;
  // config
  required int32 total_subsample_num = 3;
  required float pos_fraction = 4;
  // out
  required string sampled_pos_inds = 5;
  required string sampled_neg_inds = 6;
}

message CalcIoUMatrixOpConf {
  // in
  required string boxes1= 1;
  required string boxes2= 2;
  // out
  required string iou_matrix = 3;
}

message BBoxRegressionWeights {
  required float weight_x = 1 [default = 1.0];
  required float weight_y = 2 [default = 1.0];
  required float weight_w = 3 [default = 1.0];
  required float weight_h = 4 [default = 1.0];
}

message BoxEncodeOpConf {
  // in
  required string ref_boxes = 1;
  required string boxes = 2;
  // out
  required string boxes_delta = 3;
  // conf
  required BBoxRegressionWeights regression_weights = 4;
}

message BoxDecodeOpConf {
  // in
  required string ref_boxes = 1;
  required string boxes_delta = 2;
  // out
  required string boxes = 3;
  // conf
  required BBoxRegressionWeights regression_weights = 4;
  required float bbox_xform_clip = 5;
}

message LevelMapOpConf {
  // in
  required string in = 1;
  // out
  required string out = 2;
  // conf
  required int32 min_level = 3 [default = 2];
  required int32 max_level = 4 [default = 5];
  required int32 canonical_level = 5 [default = 4];
  required float canonical_scale = 6 [default = 224];
  optional float epsilon = 7 [default = 1e-6];
}

message AnchorGenerateOpConf {
  // in
  required string images = 1;
  // conf
  required int32 feature_map_stride = 2;
  repeated float aspect_ratios = 3;
  repeated float anchor_scales = 4;
  // out
  required string anchors = 5;
}

message IdentifyNonSmallBoxesOpConf {
  required string in = 1;
  required string out = 2;
  optional float min_size = 3 [default = 0.0];
}

message IdentifyOutsideAnchorsOpConf {
  // in
  required string anchors = 1;
  required string image_size = 2;
  // out
  required string out = 3;
  // conf
  optional float tolerance = 4 [default = 0.0];
}

message ClipBoxesToImageOpConf {
  required string boxes = 1;
  required string image_size = 2;
  required string out = 3;
}

message ExtractPieceSliceIdOpConf {
  repeated string in = 1;
  repeated string out = 2;
}

message NonMaximumSuppressionOpConf {
  // in
  required string in = 1;
  // out
  required string out = 2;
  // conf
  optional float nms_iou_threshold = 3 [default = 0.7];
  optional int32 post_nms_top_n = 4 [default = -1];
}

message DynamicReshapeOpConf {
  required string in = 1;
  required string out = 2;
  required ShapeProto shape = 3;
}

message DynamicReshapeLikeOpConf {
  required string x = 1;
  required string y = 2;
  required string like = 3;
}

message SmoothL1OpConf {
  required string prediction = 1;
  required string label = 2;
  optional float beta = 3 [default = 1.0];
  optional float scale = 4 [default = 1.0];
  required string out = 5;
}

message SmoothL1GradOpConf {
  required string x = 1;
  required string label = 2;
  optional float beta = 3 [default = 1.0];
  optional float scale = 4 [default = 1.0];
  required string dy = 5;
  required string dx = 6;
}

message UpsampleNearestOpConf {
  required string in = 1;
  required string out = 2;
  required int32 scale = 3;
  required string data_format = 4;
}

message UpsampleNearestGradOpConf {
  required string dy = 1;
  required string dx = 2;
  required int32 scale = 3;
}

message PieceSliceOpConf {
  required string in = 1;
  repeated string out = 2;
}

message LocalGatherNdOpConf {
  required string in = 1;
  required string indices = 2;
  required string out = 3;
}

message NcclBoxingReduceScatterOpConf {
  required LogicalBlobId lbi = 1;
}

message NcclBoxingAllGatherOpConf {
  required LogicalBlobId lbi = 1;
}

message NcclBoxingAllReduceOpConf {
  required LogicalBlobId lbi = 1;
}

message SyncDynamicResizeOpConf {
  required string in = 1;
  required string size = 2;
  required string out = 3;
  required int64 axis = 4;
}

message LocalGatherGradOpConf {
  required string data = 1;
  required string segment_ids = 2;
  required string out = 3;
  required int64 axis = 4;
  required string like = 5;
}

message StackOpConf {
  repeated string in = 1;
  required string out = 2;
  required int32 axis = 3;
}

message StackGradOpConf {
  repeated string like = 1;
  required string in = 2;
  repeated string out = 3;
  required int32 axis = 4;
}

message SortOpConf {
  required string in = 1;
  required string out = 2;
  optional string dir = 3 [default = "ASCENDING"]; // ASCENDING or DESCENDING
}

message ArgSortOpConf {
  required string in = 1;
  required string out = 2;
  optional string dir = 3 [default = "ASCENDING"]; // ASCENDING or DESCENDING
}

message Dim0DynamicToFixedOpConf {
  repeated string in = 1;
  repeated string out = 2;
  required string mask = 3;
}

message ReduceMaxOpConf {
  required string in = 1;
  required string out = 2;
  repeated int32 axis = 3;
  optional bool keep_dims = 4 [default = false];
}

message ArgmaxOpConf {
  required string in = 1;
  required string out = 2;
}

message MaskrcnnSplitOpConf {
  required string in = 1;
  repeated string segm = 2;
  repeated string out = 3;
}

message MasksCropAndResizeOpConf {
  // input
  required string masks = 1;
  required string rois = 2;
  // output
  required string out = 3;
  // conf
  required int32 mask_height = 4;
  required int32 mask_width = 5;
}

message ParallelCastOpConf {
  required string in = 1;
  required string out = 2;
  optional OptInt64 split_axis = 3;
  optional OptInt64 gradient_split_axis = 4;
}

message RandomLikeOpConf {
  required string like = 1;
  required string out = 2;
  optional int64 random_seed = 3;
}

message NvtxRangePushOpConf {
  required string in = 1;
  required string out = 2;
  required string msg = 3;
}

message NvtxRangePopOpConf {
  required string in = 1;
  required string out = 2;
}

message OperatorConf {
  required string name = 1;
  optional bool trainable = 3 [default = true];
  optional DeviceType device_type = 4 [default = kInvalidDevice];
  optional bool enable_cudnn = 5;
  optional int64 cudnn_buf_limit_mbyte = 6;
  repeated string ctrl_in_op_name = 7;
  oneof op_type {
    // system op
    DecodeOFRecordOpConf decode_ofrecord_conf = 101;
    DecodeRandomOpConf decode_random_conf = 102;
    RecordLoadOpConf record_load_conf = 103;
    DataLoadOpConf data_load_conf = 104;
    CopyHdOpConf copy_hd_conf = 105;
    CopyCommNetOpConf copy_comm_net_conf = 106;
    ConcatOpConf concat_conf = 107;
    BoxingOpConf boxing_conf = 108;
    ReduceScatterOpConf reduce_scatter_conf = 109;
    ReduceAddOpConf reduce_add_conf = 110;
    ReduceGatherOpConf reduce_gather_conf = 111;
    ReduceConcatOpConf reduce_concat_conf = 112;
    ReduceSplitOpConf reduce_split_conf = 113;
    NcclAllReduceOpConf nccl_all_reduce_conf = 114;
    NcclReduceScatterOpConf nccl_reduce_scatter_conf = 115;
    NcclAllGatherOpConf nccl_all_gather_conf = 116;
    AccumulateOpConf accumulate_conf = 117;
    NormalModelUpdateOpConf normal_mdupdt_conf = 118;
    CastOpConf cast_conf = 121;
    VariableOpConf variable_conf = 122;
    ReduceIdentityOpConf reduce_identity_conf = 123;
    TickOpConf tick_conf = 124;
    KeepHeaderOnlyOpConf keep_header_only_conf = 125;
    TotalLossInstanceNumOpConf total_loss_instance_num_conf = 126;
    NaiveModelUpdateOpConf naive_model_update_conf = 127;
    MomentumModelUpdateOpConf momentum_model_update_conf = 128;
    RMSPropModelUpdateOpConf rmsprop_model_update_conf = 129;
    LARSModelUpdateOpConf lars_model_update_conf = 130;
    AdamModelUpdateOpConf adam_model_update_conf = 131;
    ShapeElemCntOpConf shape_elem_cnt_conf = 132;
    AccOpConf acc_conf = 133;
    AllReduceFacadeOpConf all_reduce_facade_conf = 134;
    SourceTickOpConf source_tick_conf = 135;
    SinkTickOpConf sink_tick_conf = 136;
    InputOpConf input_conf = 137;
    OutputOpConf output_conf = 138;
    WaitAndSendIdsOpConf wait_and_send_ids_conf = 139;
    ReentrantLockOpConf reentrant_lock_conf = 140;
    CallbackNotifyOpConf callback_notify_conf = 141;
    ForeignInputOpConf foreign_input_conf = 142;
    ForeignOutputOpConf foreign_output_conf = 143;
    AccTickOpConf acc_tick_conf = 144;
    SwitchOutputOpConf switch_output_conf = 145;
    ReturnOpConf return_conf = 146;
    NcclTupleBroadcastOpConf nccl_tuple_broadcast_conf = 147;
    NcclTupleReduceOpConf nccl_tuple_reduce_conf = 148;
    PartialTickOpConf partial_tick_conf = 149;
    LazyAdamModelUpdateOpConf lazy_adam_model_update_conf = 150;
    ForeignWatchOpConf foreign_watch_conf = 151;
    NcclBoxingReduceScatterOpConf nccl_boxing_reduce_scatter_conf = 152;
    NcclBoxingAllGatherOpConf nccl_boxing_all_gather_conf = 153;
    NcclBoxingAllReduceOpConf nccl_boxing_all_reduce_conf = 154;
    DistributeConcatOpConf distribute_concat_conf = 155;
    DistributeSplitOpConf distribute_split_conf = 156;
    DistributeCloneOpConf distribute_clone_conf = 157;
    DistributeAddOpConf distribute_add_conf = 158;
    
    // domain op
    TupleIdentityOpConf tuple_identity_conf = 200;
    TransposeOpConf transpose_conf = 201;
    ReshapeOpConf reshape_conf = 202;
    Conv1DOpConf conv_1d_conf = 205;
    Conv2DOpConf conv_2d_conf = 206;
    Conv3DOpConf conv_3d_conf = 207;
    AveragePooling1DOpConf average_pooling_1d_conf = 208;
    MaxPooling1DOpConf max_pooling_1d_conf = 209;
    AveragePooling2DOpConf average_pooling_2d_conf = 210;
    MaxPooling2DOpConf max_pooling_2d_conf = 211;
    AveragePooling3DOpConf average_pooling_3d_conf = 212;
    MaxPooling3DOpConf max_pooling_3d_conf = 213;
    RandomMaskLikeOpConf random_mask_like_conf = 214;
    LocalResponseNormalizationOpConf local_response_normalization_conf = 216;
    NormalizationOpConf normalization_conf = 217;
    DropoutOpConf dropout_conf = 218;
    ReduceSumOpConf reduce_sum_conf = 219;
    AddOpConf add_conf = 220;
    MatmulOpConf matmul_conf = 221;
    DotOpConf dot_conf = 222;
    MultiplyOpConf multiply_conf = 223;
    MaximumOpConf maximum_conf = 224;
    SigmoidOpConf sigmoid_conf = 225;
    TanHOpConf tanh_conf = 226;
    ReluOpConf relu_conf = 227;
    SoftmaxOpConf softmax_conf = 228;
    SparseCrossEntropyLossOpConf sparse_cross_entropy_loss_conf = 229;
    HingeLossOpConf hinge_loss_conf = 230;
    SparseSoftmaxCrossEntropyLossOpConf sparse_softmax_cross_entropy_loss_conf = 231;
    AccuracyOpConf accuracy_conf = 232;
    PrintOpConf print_conf = 233;
    PackOpConf pack_conf = 237;
    UnpackOpConf unpack_conf = 238;
    RepeatOpConf repeat_conf = 239;
    GeluOpConf gelu_conf = 241;
    GatherOpConf gather_conf = 242;
    BatchGatherOpConf batch_gather_conf = 243;
    SliceOpConf slice_conf = 252;
    BiasAddOpConf bias_add_conf = 253;
    LayerNormOpConf layer_norm_conf = 254;
    ConstantOpConf constant_conf = 255;
    SigmoidCrossEntropyLossOpConf sigmoid_cross_entropy_loss_conf = 257;
    OneHotOpConf one_hot_conf = 258;
    IdentityLossOpConf identity_loss_conf = 259;
    SparseCrossEntropyOpConf sparse_cross_entropy_conf= 260;
    ReduceMeanOpConf reduce_mean_conf = 261;
    TopKOpConf top_k_conf = 262;
    L2NormalizeOpConf l2_normalize_conf = 264;
    PReluOpConf prelu_conf = 265;
    ReluGradOpConf relu_grad_conf = 266;
    GeluGradOpConf gelu_grad_conf = 267;
    ReshapeLikeOpConf reshape_like_conf = 268;
    SliceGradOpConf slice_grad_conf = 269;
    ReduceSumLikeOpConf reduce_sum_like_conf = 270;
    DropoutGradOpConf dropout_grad_conf = 271;
    LayerNormGradOpConf layer_norm_grad_conf = 272;
    LayerNormParamGradOpConf layer_norm_param_grad_conf = 273;
    SparseCrossEntropyGradOpConf sparse_cross_entropy_grad_conf= 274;
    UnsortedSegmentSumOpConf unsorted_segment_sum_conf = 275;
    BroadcastDivGradOpConf broadcast_div_grad_conf= 276;
    BroadcastLikeOpConf broadcast_like_conf = 277;
    SoftmaxGradOpConf softmax_grad_conf = 278;
    UnsortedBatchSegmentSumOpConf unsorted_batch_segment_sum_conf = 279;
    ReduceMeanGradOpConf reduce_mean_grad_conf = 280;
    NormalizationGradOpConf normalization_grad_conf = 282;
    ConvBiasGradOpConf conv_bias_grad_conf = 283;
    ConvFilterGradOpConf conv_filter_grad_conf = 284;
    ConvDataGradOpConf conv_data_grad_conf = 285;
    EveryNthOpConf every_nth_conf = 286;
    TanHGradOpConf tanh_grad_conf = 288;
    PoolingGradOpConf pooling_grad_conf = 289;
    IdentityOpConf identity_conf = 290;
    CaseOpConf case_conf = 291;
    EsacOpConf esac_conf = 292;
    ModelInitOpConf model_init_conf = 293;
    SplitLikeOpConf split_like_conf = 294;
    SigmoidGradOpConf sigmoid_grad_conf = 295;
    AssignOpConf assign_conf = 296;
    ModelSaveOpConf model_save_conf = 297;
    LearningRateScheduleOpConf learning_rate_schedule_conf = 298;
    PReluDataGradOpConf prelu_data_grad_conf = 299;
    PReluAlphaGradOpConf prelu_alpha_grad_conf = 300;
    ModelLoadOpConf model_load_conf = 301;
    GatherMs0OpConf gather_ms0_conf = 302;
    GatherMs0GradOpConf gather_ms0_grad_conf = 303;
    PieceSliceOpConf piece_slice_conf = 304;
    // LogicalAndOpConf logical_and_conf = 305;
    WhereOpConf where_conf = 306;
    ClipByValueOpConf clip_by_value_conf = 307;
    ConstantLikeOpConf constant_like_conf = 309;
    LocalNonzeroOpConf local_nonzero_conf = 310;
    SqueezeOpConf squeeze_conf = 311;
    ExpandDimsOpConf expand_dims_conf = 312;
    DeconvOpConf deconv_conf = 313;
    LocalGatherOpConf local_gather_conf = 314;
    LocalScatterNdUpdateOpConf local_scatter_nd_update_conf = 315;
    DynamicReshapeOpConf dynamic_reshape_conf = 316;
    SigmoidCrossEntropyLossGradOpConf sigmoid_cross_entropy_loss_grad_conf = 317;
    SmoothL1OpConf smooth_l1_conf = 318;
    UpsampleNearestOpConf upsample_nearest_conf = 319;
    // ElementCountOpConf element_count_conf = 320;
    SyncDynamicResizeOpConf sync_dynamic_resize_conf = 321;
    UpsampleNearestGradOpConf upsample_nearest_grad_conf = 322;
    SmoothL1GradOpConf smooth_l1_grad_conf = 323;
    LocalGatherNdOpConf local_gather_nd_conf = 324;
    DynamicReshapeLikeOpConf dynamic_reshape_like_conf = 325;
    LocalGatherGradOpConf local_gather_grad_conf = 326;
    StackOpConf stack_conf = 327;
    StackGradOpConf stack_grad_conf = 328;
    SortOpConf sort_conf = 329;
    ArgSortOpConf arg_sort_conf = 330;
    SigmoidCrossEntropyOpConf sigmoid_cross_entropy_conf = 331;
    SigmoidCrossEntropyGradOpConf sigmoid_cross_entropy_grad_conf = 332;
    SleepOpConf sleep_conf = 333;
    LoDToDenseOpConf lod_to_dense_conf = 334;
    Dim0DynamicToFixedOpConf dim0_dynamic_to_fixed_conf = 335;
    ParallelCastOpConf parallel_cast_conf = 336;
    SliceV2OpConf slice_v2_conf = 337;

    // math op
    BroadcastAddOpConf broadcast_add_conf = 500;
    BroadcastSubOpConf broadcast_sub_conf = 501;
    BroadcastMulOpConf broadcast_mul_conf = 502;
    BroadcastDivOpConf broadcast_div_conf = 503;
    BroadcastEqualOpConf broadcast_equal_conf = 504;
    BroadcastNotEqualOpConf broadcast_not_equal_conf = 505;
    BroadcastLessThanOpConf broadcast_less_than_conf = 506;
    BroadcastLessEqualOpConf broadcast_less_equal_conf = 507;
    BroadcastGreaterThanOpConf broadcast_greater_than_conf = 508;
    BroadcastGreaterEqualOpConf broadcast_greater_equal_conf = 509;
    BroadcastLogicalAndOpConf broadcast_logical_and_conf = 510;
    BroadcastMinOpConf broadcast_min_conf = 511;
    BroadcastMaxOpConf broadcast_max_conf = 512;
    SquareOpConf square_conf = 513;
    SqrtOpConf sqrt_conf = 514;
    RsqrtOpConf rsqrt_conf = 515;
    ScalarAddOpConf scalar_add_conf = 516;
    ScalarMulOpConf scalar_mul_conf = 517;
    ReduceMaxOpConf reduce_max_conf = 518;
    ArgmaxOpConf argmax_conf = 519;
    RandomLikeOpConf random_like_conf = 520;

    // detection op
    MaskrcnnPositiveNegativeSampleOpConf maskrcnn_positive_negative_sample_conf = 601;
    CalcIoUMatrixOpConf calc_iou_matrix_conf = 602;
    BoxEncodeOpConf box_encode_conf = 603;
    BoxDecodeOpConf box_decode_conf = 604;
    LevelMapOpConf level_map_conf = 605;
    AnchorGenerateOpConf anchor_generate_conf = 606;
    IdentifyNonSmallBoxesOpConf identify_non_small_boxes_conf= 607;
    IdentifyOutsideAnchorsOpConf identify_outside_anchors_conf = 608;
    ClipBoxesToImageOpConf clip_boxes_to_image_conf = 609;
    ExtractPieceSliceIdOpConf extract_piece_slice_id_conf = 610;
    NonMaximumSuppressionOpConf non_maximum_suppression_conf = 611;
    RoiAlignOpConf roi_align_conf = 612;
    RoiAlignGradOpConf roi_align_grad_conf = 613;
    MaskrcnnSplitOpConf maskrcnn_split_conf = 614;
    MasksCropAndResizeOpConf masks_crop_and_resize_conf = 615;

    // mutable input op
    AxpyOpConf axpy_conf = 752;

    // debug op
    NvtxRangePushOpConf nvtx_range_push_conf = 801;
    NvtxRangePopOpConf nvtx_range_pop_conf = 802;
  }
}

message OpNameSet {
  repeated string op_name = 1;
}

message OpNameRelations {
  map<string, string> src_op_name2dst_op_name = 1;
}

message OpNameGroups {
  message OpNameGroup {
    repeated string op_name = 1;
  }
  repeated OpNameGroup op_name_group = 2;
}
