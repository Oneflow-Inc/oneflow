#include "OneFlow/OneFlowOps.td"

Rewrite BuildFusedBiasAddMaskScaleOpWithRate(a: Value, b: Value, mask: Value, axis: Attr, rate: Attr, dropout: Op) -> Op;
Rewrite CopyUserOpAttrs(src: Op, dst: Op) -> Op;

Pattern {
  let rate: Attr;
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let dropout =
    op<oneflow.dropout>(
      op<oneflow.bias_add>(a: Value, b: Value) {axis = axis, device_name = device_name, device_tag = device_tag})
      {rate = rate, device_name = device_name, device_tag = device_tag} -> (out: Type, mask: Type);

  rewrite dropout with {
    let random_mask_like = CopyUserOpAttrs(dropout, op<oneflow.random_mask_like>(a){rate = rate} -> (mask));
    let fused_bias_add_mask_scale = BuildFusedBiasAddMaskScaleOpWithRate(a, b, random_mask_like.0, axis, rate, dropout);
    replace dropout with (fused_bias_add_mask_scale.0, random_mask_like.0);
  };
}

Pattern {
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let gelu =
    op<oneflow.gelu>(
      op<oneflow.bias_add>(a: Value, b: Value) {axis = axis, device_name = device_name, device_tag = device_tag})
      {device_name = device_name, device_tag = device_tag} -> (out: Type);

  rewrite gelu with{
    replace gelu with CopyUserOpAttrs(gelu, op<oneflow.fused_bias_add_gelu>(a, b){axis = axis} -> (out));
  };
}

Pattern {
  let device_name: Attr;
  let device_tag = attr<"\"cuda\"">;
  let shape: Attr;
  let scalar_div_operand: Attr;
  let out_shape: Attr;

  let query: Value;
  let key: Value;
  let value: Value;

  let query_reshape = op<oneflow.reshape>(query) {device_name = device_name, device_tag = device_tag, shape = shape};
  let key_reshape = op<oneflow.reshape>(key) {device_name = device_name, device_tag = device_tag, shape = shape};
  let value_reshape = op<oneflow.reshape>(value) {device_name = device_name, device_tag = device_tag, shape = shape};
  let query_transpose = op<oneflow.transpose>(query_reshape.0) {device_name = device_name, device_tag = device_tag, perm = attr<"[0 : si32, 2 : si32, 1 : si32, 3 : si32]">};
  let key_transpose = op<oneflow.transpose>(key_reshape.0) {device_name = device_name, device_tag = device_tag, perm = attr<"[0 : si32, 2 : si32, 3 : si32, 1 : si32]">};
  let value_transpose = op<oneflow.transpose>(value_reshape.0) {device_name = device_name, device_tag = device_tag, perm = attr<"[0 : si32, 2 : si32, 1 : si32, 3 : si32]">};
  let scores = op<oneflow.batch_matmul>(query_transpose.0, key_transpose.0) {alpha = attr<"1.000000e+00 : f64">, device_name = device_name, device_tag = device_tag, transpose_a = attr<"false : bool">, transpose_b = attr<"false : bool">};
  let scores_scaled = op<oneflow.scalar_div>(scores.0) {device_name = device_name, device_tag = device_tag, float_operand = scalar_div_operand, has_float_operand = attr<"true : bool">};
  let attn = op<oneflow.softmax>(scores_scaled.0) {device_name = device_name, device_tag = device_tag};
  let out = op<oneflow.batch_matmul>(attn.0, value_transpose.0) {alpha = attr<"1.000000e+00 : f64">, device_name = device_name, device_tag = device_tag, transpose_a = attr<"false : bool">, transpose_b = attr<"false : bool">};
  let out_transpose = op<oneflow.transpose>(out.0) {device_name = device_name, device_tag = device_tag, perm = attr<"[0 : si32, 2 : si32, 1 : si32, 3 : si32]">};
  let out_reshape = op<oneflow.reshape>(out_transpose.0) {device_name = device_name, device_tag = device_tag, shape = out_shape} -> (out_t: Type);

  rewrite out_reshape with{
    replace out_reshape with CopyUserOpAttrs(out, op<oneflow.fused_multi_head_attention_inference>(query, key, value) {
      causal = attr<"false : bool">,
      key_hidden_slice_end = attr<"-1 : si64">,
      key_hidden_slice_start = attr<"0 : si64">,
      num_heads = attr<"8 : si64">,
      query_hidden_slice_end = attr<"-1 : si64">,
      query_hidden_slice_start = attr<"0 : si64">,
      value_hidden_slice_end = attr<"-1 : si64">,
      value_hidden_slice_start = attr<"0 : si64">
    } -> (out_t));
  };
}
