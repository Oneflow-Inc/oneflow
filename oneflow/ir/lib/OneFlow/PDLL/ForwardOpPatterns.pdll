#include "OneFlow/OneFlowOps.td"
#include "OneFlowPDLLUtils.pdll"

Pattern {
  let rate: Attr;
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let dropout =
    op<oneflow.dropout>(
      op<oneflow.bias_add>(a: Value, b: Value) {axis = axis, device_name = device_name, device_tag = device_tag})
      {rate = rate, device_name = device_name, device_tag = device_tag} -> (out: Type, mask: Type);

  rewrite dropout with {
    let random_mask_like = CopyUserOpAttrs(dropout, op<oneflow.random_mask_like>(a){rate = rate} -> (mask));
    let fused_bias_add_mask_scale = BuildFusedBiasAddMaskScaleOpWithRate(a, b, random_mask_like.0, axis, rate, dropout);
    replace dropout with (fused_bias_add_mask_scale.0, random_mask_like.0);
  };
}

Pattern {
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let gelu =
    op<oneflow.gelu>(
      op<oneflow.bias_add>(a: Value, b: Value) {axis = axis, device_name = device_name, device_tag = device_tag})
      {device_name = device_name, device_tag = device_tag} -> (out: Type);

  rewrite gelu with{
    replace gelu with CopyUserOpAttrs(gelu, op<oneflow.fused_bias_add_gelu>(a, b){axis = axis} -> (out));
  };
}

Pattern {
  let device_name: Attr;
  let device_tag: Attr;
  let padding_before: Attr;
  let padding_after: Attr;
  let data_format: Attr;

  let conv = 
    op<oneflow.conv2d>(
      op<oneflow.pad>(x: Value){device_name = device_name, device_tag = device_tag, padding_before = padding_before, padding_after = padding_after}, weight: Value) 
      {device_name = device_name, device_tag = device_tag, data_format = data_format};
  IsPaddingCouldBeAssimilatedIntoConv(padding_before, padding_after, data_format);
  
  rewrite conv with{
    let conv2d_and_erase_pad = CreateConv2dAndErasePad(x, weight, padding_before, data_format, conv);
    replace conv with CopyUserOpAttrs(conv, conv2d_and_erase_pad);
  };
}

Pattern {
  let valueType: Type;
  let x: Value<valueType>;
  let cast = op<oneflow.cast>(x) -> (valueType);

  replace cast with x;
}

Pattern {
  let device_name: Attr;
  let has_float_operand: Attr;
  let int_operand: Attr;
  let float_operand: Attr;
  let diagonal: Attr;
  let floating_fill_value: Attr;
  let integer_fill_value: Attr;
  let is_floating_fill_value: Attr;

  let tril = 
    op<oneflow.tril>(
      op<oneflow.scalar_mul>(x: Value)
      {device_name = device_name, device_tag = attr<"\"cuda\"">, has_float_operand = has_float_operand, 
        int_operand = int_operand, float_operand = float_operand}) 
      {device_name = device_name, device_tag = attr<"\"cuda\"">, diagonal = diagonal, floating_fill_value = floating_fill_value, 
        integer_fill_value =integer_fill_value, is_floating_fill_value = is_floating_fill_value} -> (out: Type);
  
  replace tril with CopyUserOpAttrs(tril, CreatScaleTrilOp(x, diagonal, floating_fill_value, integer_fill_value, 
                                      is_floating_fill_value, float_operand ,int_operand, has_float_operand, out));
}

Pattern {
  let device_name: Attr;
  let has_float_operand: Attr;
  let int_operand: Attr;
  let float_operand: Attr;
  let diagonal: Attr;
  let floating_fill_value: Attr;
  let integer_fill_value: Attr;
  let is_floating_fill_value: Attr;
 
  let scalar = 
    op<oneflow.scalar_mul>(
      op<oneflow.tril>(x: Value)
      {device_name = device_name, device_tag = attr<"\"cuda\"">, diagonal = diagonal, floating_fill_value = floating_fill_value, 
        integer_fill_value =integer_fill_value, is_floating_fill_value = is_floating_fill_value }) 
      {device_name = device_name, device_tag = attr<"\"cuda\"">, has_float_operand = has_float_operand, 
        int_operand = int_operand, float_operand = float_operand} -> (out: Type);

  replace scalar with CopyUserOpAttrs(scalar, CreatScaleTrilOp(x, diagonal, floating_fill_value, integer_fill_value, 
                                        is_floating_fill_value, float_operand ,int_operand, has_float_operand, out));
}

Pattern {
  let device_name: Attr;
  let device_tag: Attr;

  let broadcast_mul = op<oneflow.broadcast_mul>(x: Value, y: Value){device_name = device_name, device_tag = device_tag}-> (out: Type);
  
  IsScalarTensor(y);

  rewrite broadcast_mul with{
    let scalar_mul = op<oneflow.scalar_mul_by_tensor>(x, y) {device_name = device_name, device_tag = device_tag} -> (out);
    replace broadcast_mul with CopyUserOpAttrs(broadcast_mul, scalar_mul);
  };
}