#include "OneFlow/OneFlowOps.td"

Pattern {
  let rate: Attr;
  let device_name: Attr;
  let device_tag: Attr;
  let bias_add_op_name: Attr;
  let op_name: Attr;
  let hierarchy: Attr;
  let scope_symbol_id: Attr;
  let nd_sbp: Attr;
  let is_dynamic: Attr;
  let op =
    op<oneflow.dropout>(op<oneflow.bias_add>(a: Value, b: Value) {device_name = device_name, op_name = bias_add_op_name}) {
      rate = rate,
      op_name = op_name,
      device_name = device_name, device_tag = device_tag, hierarchy = hierarchy, scope_symbol_id = scope_symbol_id, nd_sbp = nd_sbp, is_dynamic = is_dynamic
    } -> (out: Type, mask: Type);

  rewrite op with {
    let random_mask_like = op<oneflow.random_mask_like>(a){rate = rate, op_name = op_name,
      device_name = device_name, device_tag = device_tag, hierarchy = hierarchy, scope_symbol_id = scope_symbol_id, nd_sbp = nd_sbp, is_dynamic = is_dynamic
    } -> (mask);
    let fused_bias_add_mask_scale = op<oneflow.fused_bias_add_mask_scale>(a, b, random_mask_like) {op_name = bias_add_op_name,
      device_name = device_name, device_tag = device_tag, hierarchy = hierarchy, scope_symbol_id = scope_symbol_id, nd_sbp = nd_sbp, is_dynamic = is_dynamic
    } -> (out);
    replace op with (fused_bias_add_mask_scale.0, random_mask_like.0);
  };
}
