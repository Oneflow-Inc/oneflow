// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {
class BlobProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobProto> {};
BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobShape> {};
BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class FillerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FillerParameter> {};
FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class NetParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetParameter> {};
NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class DeviceSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceSet> {};
DeviceSetDefaultTypeInternal _DeviceSet_default_instance_;
class MachineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Machine> {};
MachineDefaultTypeInternal _Machine_default_instance_;
class ResourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Resource> {};
ResourceDefaultTypeInternal _Resource_default_instance_;
class LayerSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LayerSet> {};
LayerSetDefaultTypeInternal _LayerSet_default_instance_;
class DeviceGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceGroup> {};
DeviceGroupDefaultTypeInternal _DeviceGroup_default_instance_;
class MachineGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MachineGroup> {};
MachineGroupDefaultTypeInternal _MachineGroup_default_instance_;
class PlacementGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlacementGroup> {};
PlacementGroupDefaultTypeInternal _PlacementGroup_default_instance_;
class StrategyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Strategy> {};
StrategyDefaultTypeInternal _Strategy_default_instance_;
class SolverProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverProto> {};
SolverProtoDefaultTypeInternal _SolverProto_default_instance_;
class SolverStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverState> {};
SolverStateDefaultTypeInternal _SolverState_default_instance_;
class NetStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetState> {};
NetStateDefaultTypeInternal _NetState_default_instance_;
class ParamSpecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParamSpec> {};
ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class LayerProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LayerProto> {};
LayerProtoDefaultTypeInternal _LayerProto_default_instance_;
class BatchNormProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchNormProto> {};
BatchNormProtoDefaultTypeInternal _BatchNormProto_default_instance_;
class MultinomialLogisticLossProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultinomialLogisticLossProto> {};
MultinomialLogisticLossProtoDefaultTypeInternal _MultinomialLogisticLossProto_default_instance_;
class CopyProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CopyProto> {};
CopyProtoDefaultTypeInternal _CopyProto_default_instance_;
class BoxingProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoxingProto> {};
BoxingProtoDefaultTypeInternal _BoxingProto_default_instance_;
class ModelUpdateProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelUpdateProto> {};
ModelUpdateProtoDefaultTypeInternal _ModelUpdateProto_default_instance_;
class NullUpdateProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NullUpdateProto> {};
NullUpdateProtoDefaultTypeInternal _NullUpdateProto_default_instance_;
class NetProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetProto> {};
NetProtoDefaultTypeInternal _NetProto_default_instance_;
class SplitProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SplitProto> {};
SplitProtoDefaultTypeInternal _SplitProto_default_instance_;
class ConcatProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConcatProto> {};
ConcatProtoDefaultTypeInternal _ConcatProto_default_instance_;
class ConvolutionProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionProto> {};
ConvolutionProtoDefaultTypeInternal _ConvolutionProto_default_instance_;
class LoaderProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoaderProto> {};
LoaderProtoDefaultTypeInternal _LoaderProto_default_instance_;
class InnerProductProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InnerProductProto> {};
InnerProductProtoDefaultTypeInternal _InnerProductProto_default_instance_;
class PoolingProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PoolingProto> {};
PoolingProtoDefaultTypeInternal _PoolingProto_default_instance_;
class ReLUProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReLUProto> {};
ReLUProtoDefaultTypeInternal _ReLUProto_default_instance_;
class LRNProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LRNProto> {};
LRNProtoDefaultTypeInternal _LRNProto_default_instance_;
class SigmoidProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SigmoidProto> {};
SigmoidProtoDefaultTypeInternal _SigmoidProto_default_instance_;
class SoftmaxProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxProto> {};
SoftmaxProtoDefaultTypeInternal _SoftmaxProto_default_instance_;
class StoreProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StoreProto> {};
StoreProtoDefaultTypeInternal _StoreProto_default_instance_;
class PlaceholderProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlaceholderProto> {};
PlaceholderProtoDefaultTypeInternal _PlaceholderProto_default_instance_;
class LoadPartialModelProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadPartialModelProto> {};
LoadPartialModelProtoDefaultTypeInternal _LoadPartialModelProto_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[37];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, int32_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, byte_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, string_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, int64_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, name_),
    2,
    3,
    4,
    5,
    0,
    6,
    7,
    8,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, sparse_),
    0,
    1,
    2,
    5,
    3,
    6,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
    0,
    4,
    2,
    1,
    3,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSet, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSet, device_id_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, device_set_),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, machine_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerSet, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerSet, name_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceGroup, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceGroup, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceGroup, end_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineGroup, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineGroup, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineGroup, end_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, layer_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, device_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, machine_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacementGroup, parallel_policy_),
    0,
    1,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, placement_group_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, train_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, train_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_compute_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, average_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, lr_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, regularization_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, stepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, stepvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, clip_gradients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, snapshot_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, snapshot_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, solver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, snapshot_after_train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, num_data_param_copy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, num_model_param_copy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, num_batch_per_sync_),
    0,
    31,
    1,
    2,
    6,
    32,
    33,
    7,
    16,
    24,
    8,
    9,
    23,
    10,
    3,
    11,
    12,
    13,
    14,
    4,
    15,
    34,
    26,
    19,
    5,
    17,
    28,
    20,
    21,
    27,
    18,
    25,
    29,
    30,
    22,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, current_step_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, stage_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, convolution_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, loader_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, innerproduct_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, pooling_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, relu_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, lrn_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, sigmoid_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, softmax_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, multinomiallogisticloss_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, split_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, concat_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, batchnorm_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, modelupdate_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, nullupdate_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, store_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, loadpartialmodel_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, placeholder_proto_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormProto, use_global_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormProto, moving_average_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormProto, eps_),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultinomialLogisticLossProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultinomialLogisticLossProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultinomialLogisticLossProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultinomialLogisticLossProto, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultinomialLogisticLossProto, loss_),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyProto, copy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyProto, out_),
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, in_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, in_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, in_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, backward_in_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, out_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, out_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, out_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxingProto, backward_out_op_),
    0,
    8,
    1,
    2,
    6,
    3,
    9,
    7,
    4,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelUpdateProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelUpdateProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelUpdateProto, gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelUpdateProto, old_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelUpdateProto, weight_),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullUpdateProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullUpdateProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullUpdateProto, weight_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, in_envelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, in_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, out_envelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, out_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, forward_is_sender_),
    0,
    2,
    5,
    1,
    3,
    6,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitProto, out_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitProto, out_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatProto, in_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatProto, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatProto, axis_),
    1,
    3,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, out_),
    4,
    15,
    5,
    6,
    7,
    8,
    9,
    10,
    16,
    14,
    11,
    12,
    2,
    3,
    13,
    17,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, piece_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoaderProto, width_),
    0,
    3,
    1,
    2,
    4,
    5,
    6,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductProto, out_),
    4,
    5,
    2,
    3,
    6,
    7,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, global_pooling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingProto, out_),
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    13,
    9,
    10,
    11,
    12,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUProto, negative_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUProto, out_),
    2,
    3,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, norm_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNProto, out_),
    4,
    5,
    6,
    2,
    7,
    3,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidProto, out_),
    2,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxProto, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxProto, out_),
    2,
    3,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, store_layer_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, store_layer_shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreProto, layer_seek_pos_),
    2,
    0,
    1,
    3,
    4,
    5,
    6,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderProto, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderProto, out_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPartialModelProto, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPartialModelProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPartialModelProto, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPartialModelProto, load_layer_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPartialModelProto, load_layer_shapes_),
    0,
    1,
    2,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(BlobProto)},
  { 22, 27, sizeof(BlobShape)},
  { 28, 39, sizeof(FillerParameter)},
  { 46, 56, sizeof(NetParameter)},
  { 62, 67, sizeof(DeviceSet)},
  { 68, 75, sizeof(Machine)},
  { 78, 83, sizeof(Resource)},
  { 84, 89, sizeof(LayerSet)},
  { 90, 96, sizeof(DeviceGroup)},
  { 98, 104, sizeof(MachineGroup)},
  { 106, 115, sizeof(PlacementGroup)},
  { 120, 125, sizeof(Strategy)},
  { 126, 165, sizeof(SolverProto)},
  { 200, 207, sizeof(SolverState)},
  { 210, 217, sizeof(NetState)},
  { 220, 228, sizeof(ParamSpec)},
  { 232, 255, sizeof(LayerProto)},
  { 274, 281, sizeof(BatchNormProto)},
  { 284, 291, sizeof(MultinomialLogisticLossProto)},
  { 294, 302, sizeof(CopyProto)},
  { 306, 320, sizeof(BoxingProto)},
  { 330, 337, sizeof(ModelUpdateProto)},
  { 340, 345, sizeof(NullUpdateProto)},
  { 346, 357, sizeof(NetProto)},
  { 364, 371, sizeof(SplitProto)},
  { 374, 382, sizeof(ConcatProto)},
  { 386, 408, sizeof(ConvolutionProto)},
  { 426, 437, sizeof(LoaderProto)},
  { 444, 456, sizeof(InnerProductProto)},
  { 464, 482, sizeof(PoolingProto)},
  { 496, 504, sizeof(ReLUProto)},
  { 508, 520, sizeof(LRNProto)},
  { 528, 535, sizeof(SigmoidProto)},
  { 538, 546, sizeof(SoftmaxProto)},
  { 550, 561, sizeof(StoreProto)},
  { 568, 574, sizeof(PlaceholderProto)},
  { 576, 583, sizeof(LoadPartialModelProto)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BlobShape_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_FillerParameter_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NetParameter_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceSet_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Machine_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Resource_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LayerSet_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceGroup_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MachineGroup_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PlacementGroup_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Strategy_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SolverProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SolverState_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NetState_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ParamSpec_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LayerProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BatchNormProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MultinomialLogisticLossProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CopyProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BoxingProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ModelUpdateProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NullUpdateProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NetProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SplitProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ConcatProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LoaderProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_InnerProductProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PoolingProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReLUProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LRNProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SigmoidProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_StoreProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PlaceholderProto_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LoadPartialModelProto_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_caffe_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "caffe.proto", schemas, file_default_instances, protobuf_Offsets_caffe_2eproto(), factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 37);
}

}  // namespace

void protobuf_ShutdownFile_caffe_2eproto() {
  _BlobProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BlobShape_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FillerParameter_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  FillerParameter::_default_type_.Shutdown();
  _NetParameter_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DeviceSet_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Machine_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Resource_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _LayerSet_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DeviceGroup_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _MachineGroup_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PlacementGroup_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Strategy_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SolverProto_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  SolverProto::_default_regularization_type_.Shutdown();
  _SolverState_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _NetState_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ParamSpec_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _LayerProto_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BatchNormProto_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _MultinomialLogisticLossProto_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CopyProto_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _BoxingProto_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ModelUpdateProto_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _NullUpdateProto_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _NetProto_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SplitProto_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _ConcatProto_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _ConvolutionProto_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _LoaderProto_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _InnerProductProto_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _PoolingProto_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ReLUProto_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _LRNProto_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SigmoidProto_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _SoftmaxProto_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _StoreProto_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _PlaceholderProto_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _LoadPartialModelProto_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
}

void protobuf_InitDefaults_caffe_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BlobProto_default_instance_.DefaultConstruct();
  _BlobShape_default_instance_.DefaultConstruct();
  FillerParameter::_default_type_.DefaultConstruct();
  *FillerParameter::_default_type_.get_mutable() = ::std::string("constant", 8);
  _FillerParameter_default_instance_.DefaultConstruct();
  _NetParameter_default_instance_.DefaultConstruct();
  _DeviceSet_default_instance_.DefaultConstruct();
  _Machine_default_instance_.DefaultConstruct();
  _Resource_default_instance_.DefaultConstruct();
  _LayerSet_default_instance_.DefaultConstruct();
  _DeviceGroup_default_instance_.DefaultConstruct();
  _MachineGroup_default_instance_.DefaultConstruct();
  _PlacementGroup_default_instance_.DefaultConstruct();
  _Strategy_default_instance_.DefaultConstruct();
  SolverProto::_default_regularization_type_.DefaultConstruct();
  *SolverProto::_default_regularization_type_.get_mutable() = ::std::string("L2", 2);
  _SolverProto_default_instance_.DefaultConstruct();
  _SolverState_default_instance_.DefaultConstruct();
  _NetState_default_instance_.DefaultConstruct();
  _ParamSpec_default_instance_.DefaultConstruct();
  _LayerProto_default_instance_.DefaultConstruct();
  _BatchNormProto_default_instance_.DefaultConstruct();
  _MultinomialLogisticLossProto_default_instance_.DefaultConstruct();
  _CopyProto_default_instance_.DefaultConstruct();
  _BoxingProto_default_instance_.DefaultConstruct();
  _ModelUpdateProto_default_instance_.DefaultConstruct();
  _NullUpdateProto_default_instance_.DefaultConstruct();
  _NetProto_default_instance_.DefaultConstruct();
  _SplitProto_default_instance_.DefaultConstruct();
  _ConcatProto_default_instance_.DefaultConstruct();
  _ConvolutionProto_default_instance_.DefaultConstruct();
  _LoaderProto_default_instance_.DefaultConstruct();
  _InnerProductProto_default_instance_.DefaultConstruct();
  _PoolingProto_default_instance_.DefaultConstruct();
  _ReLUProto_default_instance_.DefaultConstruct();
  _LRNProto_default_instance_.DefaultConstruct();
  _SigmoidProto_default_instance_.DefaultConstruct();
  _SoftmaxProto_default_instance_.DefaultConstruct();
  _StoreProto_default_instance_.DefaultConstruct();
  _PlaceholderProto_default_instance_.DefaultConstruct();
  _LoadPartialModelProto_default_instance_.DefaultConstruct();
  _NetParameter_default_instance_.get_mutable()->state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _Machine_default_instance_.get_mutable()->device_set_ = const_cast< ::caffe::DeviceSet*>(
      ::caffe::DeviceSet::internal_default_instance());
  _PlacementGroup_default_instance_.get_mutable()->layer_set_ = const_cast< ::caffe::LayerSet*>(
      ::caffe::LayerSet::internal_default_instance());
  _PlacementGroup_default_instance_.get_mutable()->device_group_ = const_cast< ::caffe::DeviceGroup*>(
      ::caffe::DeviceGroup::internal_default_instance());
  _PlacementGroup_default_instance_.get_mutable()->machine_group_ = const_cast< ::caffe::MachineGroup*>(
      ::caffe::MachineGroup::internal_default_instance());
  _SolverProto_default_instance_.get_mutable()->train_state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->convolution_proto_ = const_cast< ::caffe::ConvolutionProto*>(
      ::caffe::ConvolutionProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->loader_proto_ = const_cast< ::caffe::LoaderProto*>(
      ::caffe::LoaderProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->innerproduct_proto_ = const_cast< ::caffe::InnerProductProto*>(
      ::caffe::InnerProductProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->pooling_proto_ = const_cast< ::caffe::PoolingProto*>(
      ::caffe::PoolingProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->relu_proto_ = const_cast< ::caffe::ReLUProto*>(
      ::caffe::ReLUProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->lrn_proto_ = const_cast< ::caffe::LRNProto*>(
      ::caffe::LRNProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->sigmoid_proto_ = const_cast< ::caffe::SigmoidProto*>(
      ::caffe::SigmoidProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->softmax_proto_ = const_cast< ::caffe::SoftmaxProto*>(
      ::caffe::SoftmaxProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->multinomiallogisticloss_proto_ = const_cast< ::caffe::MultinomialLogisticLossProto*>(
      ::caffe::MultinomialLogisticLossProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->split_proto_ = const_cast< ::caffe::SplitProto*>(
      ::caffe::SplitProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->concat_proto_ = const_cast< ::caffe::ConcatProto*>(
      ::caffe::ConcatProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->batchnorm_proto_ = const_cast< ::caffe::BatchNormProto*>(
      ::caffe::BatchNormProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->modelupdate_proto_ = const_cast< ::caffe::ModelUpdateProto*>(
      ::caffe::ModelUpdateProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->nullupdate_proto_ = const_cast< ::caffe::NullUpdateProto*>(
      ::caffe::NullUpdateProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->store_proto_ = const_cast< ::caffe::StoreProto*>(
      ::caffe::StoreProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->loadpartialmodel_proto_ = const_cast< ::caffe::LoadPartialModelProto*>(
      ::caffe::LoadPartialModelProto::internal_default_instance());
  _LayerProto_default_instance_.get_mutable()->placeholder_proto_ = const_cast< ::caffe::PlaceholderProto*>(
      ::caffe::PlaceholderProto::internal_default_instance());
  _ConvolutionProto_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ConvolutionProto_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InnerProductProto_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InnerProductProto_default_instance_.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

void protobuf_InitDefaults_caffe_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_caffe_2eproto_impl);
}
void protobuf_AddDesc_caffe_2eproto_impl() {
  protobuf_InitDefaults_caffe_2eproto();
  static const char descriptor[] = {
      "\n\013caffe.proto\022\005caffe\"\210\003\n\tBlobProto\022\r\n\005sh"
      "ape\030\001 \002(\003\0223\n\tdata_type\030\002 \001(\0162\031.caffe.Blo"
      "bProto.DataType:\005FLOAT\022\026\n\nfloat_data\030\003 \003"
      "(\002B\002\020\001\022\026\n\nint32_data\030\004 \003(\005B\002\020\001\022\021\n\tbyte_d"
      "ata\030\005 \001(\014\022\023\n\013string_data\030\006 \003(\014\022\027\n\013double"
      "_data\030\t \003(\001B\002\020\001\022\026\n\nint64_data\030\n \003(\003B\002\020\001\022"
      "\014\n\004name\030\007 \001(\t\"\237\001\n\010DataType\022\r\n\tUNDEFINED\020"
      "\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022\010\n\004BYTE\020\003\022\n\n\006STR"
      "ING\020\004\022\010\n\004BOOL\020\005\022\t\n\005UINT8\020\006\022\010\n\004INT8\020\007\022\n\n\006"
      "UINT16\020\010\022\t\n\005INT16\020\t\022\t\n\005INT64\020\n\022\013\n\007FLOAT1"
      "6\020\014\022\n\n\006DOUBLE\020\r\"\034\n\tBlobShape\022\017\n\003dim\030\001 \003("
      "\003B\002\020\001\"\220\001\n\017FillerParameter\022\026\n\004type\030\001 \001(\t:"
      "\010constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min\030\003 \001(\002"
      ":\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:\0010\022\016\n\003"
      "std\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1\"\277\001\n\014Net"
      "Parameter\022\014\n\004name\030\001 \001(\t\022%\n\013input_shape\030\010"
      " \003(\0132\020.caffe.BlobShape\022\035\n\016force_backward"
      "\030\005 \001(\010:\005false\022\036\n\005state\030\006 \001(\0132\017.caffe.Net"
      "State\022\031\n\ndebug_info\030\007 \001(\010:\005false\022 \n\005laye"
      "r\030d \003(\0132\021.caffe.LayerProto\"\036\n\tDeviceSet\022"
      "\021\n\tdevice_id\030\001 \003(\005\"K\n\007Machine\022\014\n\004name\030\001 "
      "\002(\t\022\014\n\004port\030\002 \002(\t\022$\n\ndevice_set\030\003 \001(\0132\020."
      "caffe.DeviceSet\"+\n\010Resource\022\037\n\007machine\030\001"
      " \003(\0132\016.caffe.Machine\"\030\n\010LayerSet\022\014\n\004name"
      "\030\001 \003(\t\")\n\013DeviceGroup\022\r\n\005begin\030\001 \002(\005\022\013\n\003"
      "end\030\002 \002(\005\"*\n\014MachineGroup\022\r\n\005begin\030\001 \002(\005"
      "\022\013\n\003end\030\002 \002(\005\"\332\001\n\016PlacementGroup\022\014\n\004name"
      "\030\001 \002(\t\022\"\n\tlayer_set\030\002 \002(\0132\017.caffe.LayerS"
      "et\022(\n\014device_group\030\003 \001(\0132\022.caffe.DeviceG"
      "roup\022*\n\rmachine_group\030\004 \001(\0132\023.caffe.Mach"
      "ineGroup\022@\n\017parallel_policy\030\005 \001(\0162\025.caff"
      "e.ParallelPolicy:\020kUnknownParallel\":\n\010St"
      "rategy\022.\n\017placement_group\030\001 \003(\0132\025.caffe."
      "PlacementGroup\"\327\007\n\013SolverProto\022\021\n\ttrain_"
      "net\030\001 \002(\t\022\020\n\010test_net\030\002 \003(\t\022\020\n\010resource\030"
      "\003 \002(\t\022\020\n\010strategy\030\004 \002(\t\022$\n\013train_state\030\032"
      " \001(\0132\017.caffe.NetState\022#\n\ntest_state\030\033 \003("
      "\0132\017.caffe.NetState\022\021\n\ttest_iter\030\034 \003(\005\022\030\n"
      "\rtest_interval\030\035 \001(\005:\0010\022 \n\021test_compute_"
      "loss\030\036 \001(\010:\005false\022!\n\023test_initialization"
      "\030  \001(\010:\004true\022\017\n\007base_lr\030! \001(\002\022\017\n\007display"
      "\030\" \001(\005\022\027\n\014average_loss\030# \001(\005:\0011\022\020\n\010max_i"
      "ter\030$ \001(\005\022\021\n\tlr_policy\030% \001(\t\022\r\n\005gamma\030\' "
      "\001(\002\022\r\n\005power\030( \001(\002\022\020\n\010momentum\030) \001(\002\022\024\n\014"
      "weight_decay\030* \001(\002\022\037\n\023regularization_typ"
      "e\030+ \001(\t:\002L2\022\020\n\010stepsize\030, \001(\005\022\021\n\tstepval"
      "ue\030- \003(\005\022\032\n\016clip_gradients\030. \001(\002:\002-1\022\023\n\010"
      "snapshot\030/ \001(\005:\0010\022\027\n\017snapshot_prefix\0300 \001"
      "(\t\022\034\n\rsnapshot_diff\0301 \001(\010:\005false\022\027\n\013rand"
      "om_seed\0304 \001(\003:\002-1\022\025\n\nmachine_id\0308 \002(\005:\0010"
      "\0227\n\013solver_type\0309 \001(\0162\035.caffe.SolverProt"
      "o.SolverType:\003SGD\022\024\n\005delta\030; \001(\002:\0051e-08\022"
      "\031\n\ndebug_info\030< \001(\010:\005false\022\"\n\024snapshot_a"
      "fter_train\030> \001(\010:\004true\022\036\n\023num_data_param"
      "_copy\030\? \001(\005:\0011\022\037\n\024num_model_param_copy\030@"
      " \001(\005:\0011\022\035\n\022num_batch_per_sync\030A \001(\005:\0011\"\036"
      "\n\nSolverMode\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\"0\n\nSolver"
      "Type\022\007\n\003SGD\020\000\022\014\n\010NESTEROV\020\001\022\013\n\007ADAGRAD\020\002"
      "\"I\n\013SolverState\022\014\n\004iter\030\001 \001(\005\022\023\n\013learned"
      "_net\030\002 \001(\t\022\027\n\014current_step\030\004 \001(\005:\0010\"N\n\010N"
      "etState\022!\n\005phase\030\001 \001(\0162\014.caffe.Phase:\004TE"
      "ST\022\020\n\005level\030\002 \001(\005:\0010\022\r\n\005stage\030\003 \003(\t\"\243\001\n\t"
      "ParamSpec\022\014\n\004name\030\001 \001(\t\0221\n\nshare_mode\030\002 "
      "\001(\0162\035.caffe.ParamSpec.DimCheckMode\022\022\n\007lr"
      "_mult\030\003 \001(\002:\0011\022\025\n\ndecay_mult\030\004 \001(\002:\0011\"*\n"
      "\014DimCheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020"
      "\001\"\341\006\n\nLayerProto\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002"
      " \001(\t\0222\n\021convolution_proto\030j \001(\0132\027.caffe."
      "ConvolutionProto\022(\n\014loader_proto\030k \001(\0132\022"
      ".caffe.LoaderProto\0224\n\022innerproduct_proto"
      "\030u \001(\0132\030.caffe.InnerProductProto\022*\n\rpool"
      "ing_proto\030y \001(\0132\023.caffe.PoolingProto\022$\n\n"
      "relu_proto\030{ \001(\0132\020.caffe.ReLUProto\022\"\n\tlr"
      "n_proto\030v \001(\0132\017.caffe.LRNProto\022*\n\rsigmoi"
      "d_proto\030| \001(\0132\023.caffe.SigmoidProto\022*\n\rso"
      "ftmax_proto\030} \001(\0132\023.caffe.SoftmaxProto\022K"
      "\n\035multinomiallogisticloss_proto\030\202\001 \001(\0132#"
      ".caffe.MultinomialLogisticLossProto\022\'\n\013s"
      "plit_proto\030\203\001 \001(\0132\021.caffe.SplitProto\022)\n\014"
      "concat_proto\030\204\001 \001(\0132\022.caffe.ConcatProto\022"
      "/\n\017batchnorm_proto\030\207\001 \001(\0132\025.caffe.BatchN"
      "ormProto\0223\n\021modelupdate_proto\030\210\001 \001(\0132\027.c"
      "affe.ModelUpdateProto\0221\n\020nullupdate_prot"
      "o\030\211\001 \001(\0132\026.caffe.NullUpdateProto\022\'\n\013stor"
      "e_proto\030\213\001 \001(\0132\021.caffe.StoreProto\022=\n\026loa"
      "dpartialmodel_proto\030\214\001 \001(\0132\034.caffe.LoadP"
      "artialModelProto\0223\n\021placeholder_proto\030\215\001"
      " \001(\0132\027.caffe.PlaceholderProto\"f\n\016BatchNo"
      "rmProto\022\030\n\020use_global_stats\030\001 \001(\010\022&\n\027mov"
      "ing_average_fraction\030\002 \001(\002:\0050.999\022\022\n\003eps"
      "\030\003 \001(\002:\0051e-05\"I\n\034MultinomialLogisticLoss"
      "Proto\022\014\n\004data\030x \002(\t\022\r\n\005label\030y \002(\t\022\014\n\004lo"
      "ss\030z \002(\t\"U\n\tCopyProto\022\013\n\003num\030\001 \002(\r\022\"\n\tco"
      "py_type\030\002 \002(\0162\017.caffe.CopyType\022\n\n\002in\030\003 \003"
      "(\t\022\013\n\003out\030\004 \003(\t\"\236\002\n\013BoxingProto\022\016\n\006in_nu"
      "m\030\001 \002(\r\022\n\n\002in\030\002 \003(\t\022&\n\005in_op\030\003 \002(\0162\017.caf"
      "fe.BoxingOp:\006CONCAT\022\022\n\007in_axis\030\004 \002(\005:\0010\022"
      ".\n\016backward_in_op\030\005 \002(\0162\017.caffe.BoxingOp"
      ":\005SPLIT\022\017\n\007out_num\030n \002(\r\022\013\n\003out\030\014 \003(\t\022%\n"
      "\006out_op\030\r \002(\0162\017.caffe.BoxingOp:\004COPY\022\023\n\010"
      "out_axis\030\016 \002(\005:\0010\022-\n\017backward_out_op\030\017 \002"
      "(\0162\017.caffe.BoxingOp:\003ADD\"H\n\020ModelUpdateP"
      "roto\022\020\n\010gradient\030\001 \002(\t\022\022\n\nold_weight\030\002 \002"
      "(\t\022\016\n\006weight\030\003 \002(\t\"!\n\017NullUpdateProto\022\016\n"
      "\006weight\030\001 \002(\t\"\220\001\n\010NetProto\022\023\n\013in_envelop"
      "e\030\001 \002(\t\022\016\n\006in_num\030\002 \002(\r\022\n\n\002in\030\003 \003(\t\022\024\n\014o"
      "ut_envelope\030\004 \002(\t\022\017\n\007out_num\030\005 \002(\r\022\013\n\003ou"
      "t\030\006 \003(\t\022\037\n\021forward_is_sender\030\007 \002(\010:\004true"
      "\"6\n\nSplitProto\022\017\n\007out_num\030\001 \002(\r\022\n\n\002in\030\002 "
      "\002(\t\022\013\n\003out\030\003 \003(\t\"G\n\013ConcatProto\022\016\n\006in_nu"
      "m\030\001 \002(\r\022\n\n\002in\030\002 \003(\t\022\013\n\003out\030\003 \002(\t\022\017\n\004axis"
      "\030\004 \002(\005:\0011\"\361\003\n\020ConvolutionProto\022\022\n\nnum_ou"
      "tput\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022\016\n\003p"
      "ad\030\003 \001(\r:\0010\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n"
      " \001(\r:\0010\022\023\n\013kernel_size\030\004 \001(\r\022\020\n\010kernel_h"
      "\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\005group\030\005 \001(\r:"
      "\0011\022\021\n\006stride\030\006 \001(\r:\0011\022\020\n\010stride_h\030\r \001(\r\022"
      "\020\n\010stride_w\030\016 \001(\r\022-\n\rweight_filler\030\007 \001(\013"
      "2\026.caffe.FillerParameter\022+\n\013bias_filler\030"
      "\010 \001(\0132\026.caffe.FillerParameter\0227\n\006engine\030"
      "\017 \001(\0162\036.caffe.ConvolutionProto.Engine:\007D"
      "EFAULT\022\037\n\005param\030d \003(\0132\020.caffe.ParamSpec\022"
      "\n\n\002in\030x \002(\t\022\013\n\003out\030y \002(\t\"+\n\006Engine\022\013\n\007DE"
      "FAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"~\n\013LoaderP"
      "roto\022\016\n\006source\030\001 \001(\t\022\022\n\npiece_size\030\004 \001(\r"
      "\022\014\n\004data\030x \002(\t\022\r\n\005label\030y \002(\t\022\017\n\007channel"
      "\030z \002(\r\022\016\n\006height\030{ \002(\r\022\r\n\005width\030| \002(\r\"\347\001"
      "\n\021InnerProductProto\022\022\n\nnum_output\030\001 \001(\r\022"
      "\027\n\tbias_term\030\002 \001(\010:\004true\022-\n\rweight_fille"
      "r\030\003 \001(\0132\026.caffe.FillerParameter\022+\n\013bias_"
      "filler\030\004 \001(\0132\026.caffe.FillerParameter\022\017\n\004"
      "axis\030\005 \001(\005:\0011\022\037\n\005param\030d \003(\0132\020.caffe.Par"
      "amSpec\022\n\n\002in\030x \002(\t\022\013\n\003out\030y \002(\t\"\257\003\n\014Pool"
      "ingProto\0221\n\004pool\030\001 \001(\0162\036.caffe.PoolingPr"
      "oto.PoolMethod:\003MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020\n\005p"
      "ad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n\013kerne"
      "l_size\030\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010kernel"
      "_w\030\006 \001(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010stride_h\030"
      "\007 \001(\r\022\020\n\010stride_w\030\010 \001(\r\0223\n\006engine\030\013 \001(\0162"
      "\032.caffe.PoolingProto.Engine:\007DEFAULT\022\035\n\016"
      "global_pooling\030\014 \001(\010:\005false\022\n\n\002in\030x \002(\t\022"
      "\013\n\003out\030y \002(\t\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003A"
      "VE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n\007DEFAUL"
      "T\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\236\001\n\tReLUProto\022"
      "\031\n\016negative_slope\030\001 \001(\002:\0010\0220\n\006engine\030\002 \001"
      "(\0162\027.caffe.ReLUProto.Engine:\007DEFAULT\022\n\n\002"
      "in\030x \002(\t\022\013\n\003out\030y \002(\t\"+\n\006Engine\022\013\n\007DEFAU"
      "LT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\305\002\n\010LRNProto\022"
      "\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002:\0011"
      "\022\022\n\004beta\030\003 \001(\002:\0040.75\022@\n\013norm_region\030\004 \001("
      "\0162\032.caffe.LRNProto.NormRegion:\017ACROSS_CH"
      "ANNELS\022\014\n\001k\030\005 \001(\002:\0011\022/\n\006engine\030\006 \001(\0162\026.c"
      "affe.LRNProto.Engine:\007DEFAULT\022\n\n\002in\030x \002("
      "\t\022\013\n\003out\030y \002(\t\"5\n\nNormRegion\022\023\n\017ACROSS_C"
      "HANNELS\020\000\022\022\n\016WITHIN_CHANNEL\020\001\"+\n\006Engine\022"
      "\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\211\001\n\014S"
      "igmoidProto\0223\n\006engine\030\001 \001(\0162\032.caffe.Sigm"
      "oidProto.Engine:\007DEFAULT\022\n\n\002in\030x \002(\t\022\013\n\003"
      "out\030y \002(\t\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFF"
      "E\020\001\022\t\n\005CUDNN\020\002\"\232\001\n\014SoftmaxProto\0223\n\006engin"
      "e\030\001 \001(\0162\032.caffe.SoftmaxProto.Engine:\007DEF"
      "AULT\022\017\n\004axis\030\002 \001(\005:\0011\022\n\n\002in\030x \002(\t\022\013\n\003out"
      "\030y \002(\t\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001"
      "\022\t\n\005CUDNN\020\002\"\351\001\n\nStoreProto\0221\n\006engine\030\001 \001"
      "(\0162\030.caffe.StoreProto.Engine:\007DEFAULT\022\n\n"
      "\002in\030x \002(\t\022\013\n\003out\030y \002(\t\022\023\n\004stop\030z \002(\010:\005fa"
      "lse\022\031\n\021store_layer_names\030| \003(\t\022\032\n\022store_"
      "layer_shapes\030} \003(\003\022\026\n\016layer_seek_pos\030~ \003"
      "(\003\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005"
      "CUDNN\020\002\"+\n\020PlaceholderProto\022\n\n\002in\030d \002(\t\022"
      "\013\n\003out\030e \002(\t\"Y\n\025LoadPartialModelProto\022\013\n"
      "\003out\030\001 \002(\t\022\030\n\020load_layer_names\030| \003(\t\022\031\n\021"
      "load_layer_shapes\030} \003(\003*\377\001\n\016ParallelPoli"
      "cy\022\024\n\020kUnknownParallel\020\000\022 \n\034kNaiveParall"
      "elOnSingleDevice\020\001\022\"\n\036kDataParallelOnMul"
      "tipleDevices\020\002\022#\n\037kModelParallelOnMultip"
      "leDevices\020\003\022!\n\035kNaiveParallelOnSingleMac"
      "hine\020\004\022#\n\037kDataParallelOnMultipleMachine"
      "s\020\005\022$\n kModelParallelOnMultipleMachines\020"
      "\006*\034\n\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001*:\n\010CopyT"
      "ype\022\016\n\nForwardH2D\020\000\022\016\n\nForwardD2H\020\001\022\016\n\nF"
      "orwardD2D\020\002*4\n\010BoxingOp\022\n\n\006CONCAT\020\000\022\007\n\003A"
      "DD\020\001\022\010\n\004COPY\020\002\022\t\n\005SPLIT\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_caffe_2eproto_once_);
void protobuf_AddDesc_caffe_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_caffe_2eproto_once_,
                 &protobuf_AddDesc_caffe_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe_2eproto {
  StaticDescriptorInitializer_caffe_2eproto() {
    protobuf_AddDesc_caffe_2eproto();
  }
} static_descriptor_initializer_caffe_2eproto_;
const ::google::protobuf::EnumDescriptor* BlobProto_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[0];
}
bool BlobProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlobProto_DataType BlobProto::UNDEFINED;
const BlobProto_DataType BlobProto::FLOAT;
const BlobProto_DataType BlobProto::INT32;
const BlobProto_DataType BlobProto::BYTE;
const BlobProto_DataType BlobProto::STRING;
const BlobProto_DataType BlobProto::BOOL;
const BlobProto_DataType BlobProto::UINT8;
const BlobProto_DataType BlobProto::INT8;
const BlobProto_DataType BlobProto::UINT16;
const BlobProto_DataType BlobProto::INT16;
const BlobProto_DataType BlobProto::INT64;
const BlobProto_DataType BlobProto::FLOAT16;
const BlobProto_DataType BlobProto::DOUBLE;
const BlobProto_DataType BlobProto::DataType_MIN;
const BlobProto_DataType BlobProto::DataType_MAX;
const int BlobProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverProto_SolverMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[1];
}
bool SolverProto_SolverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverProto_SolverMode SolverProto::CPU;
const SolverProto_SolverMode SolverProto::GPU;
const SolverProto_SolverMode SolverProto::SolverMode_MIN;
const SolverProto_SolverMode SolverProto::SolverMode_MAX;
const int SolverProto::SolverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverProto_SolverType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[2];
}
bool SolverProto_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverProto_SolverType SolverProto::SGD;
const SolverProto_SolverType SolverProto::NESTEROV;
const SolverProto_SolverType SolverProto::ADAGRAD;
const SolverProto_SolverType SolverProto::SolverType_MIN;
const SolverProto_SolverType SolverProto::SolverType_MAX;
const int SolverProto::SolverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[3];
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConvolutionProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[4];
}
bool ConvolutionProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionProto_Engine ConvolutionProto::DEFAULT;
const ConvolutionProto_Engine ConvolutionProto::CAFFE;
const ConvolutionProto_Engine ConvolutionProto::CUDNN;
const ConvolutionProto_Engine ConvolutionProto::Engine_MIN;
const ConvolutionProto_Engine ConvolutionProto::Engine_MAX;
const int ConvolutionProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingProto_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[5];
}
bool PoolingProto_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingProto_PoolMethod PoolingProto::MAX;
const PoolingProto_PoolMethod PoolingProto::AVE;
const PoolingProto_PoolMethod PoolingProto::STOCHASTIC;
const PoolingProto_PoolMethod PoolingProto::PoolMethod_MIN;
const PoolingProto_PoolMethod PoolingProto::PoolMethod_MAX;
const int PoolingProto::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[6];
}
bool PoolingProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingProto_Engine PoolingProto::DEFAULT;
const PoolingProto_Engine PoolingProto::CAFFE;
const PoolingProto_Engine PoolingProto::CUDNN;
const PoolingProto_Engine PoolingProto::Engine_MIN;
const PoolingProto_Engine PoolingProto::Engine_MAX;
const int PoolingProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReLUProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[7];
}
bool ReLUProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReLUProto_Engine ReLUProto::DEFAULT;
const ReLUProto_Engine ReLUProto::CAFFE;
const ReLUProto_Engine ReLUProto::CUDNN;
const ReLUProto_Engine ReLUProto::Engine_MIN;
const ReLUProto_Engine ReLUProto::Engine_MAX;
const int ReLUProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNProto_NormRegion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[8];
}
bool LRNProto_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNProto_NormRegion LRNProto::ACROSS_CHANNELS;
const LRNProto_NormRegion LRNProto::WITHIN_CHANNEL;
const LRNProto_NormRegion LRNProto::NormRegion_MIN;
const LRNProto_NormRegion LRNProto::NormRegion_MAX;
const int LRNProto::NormRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[9];
}
bool LRNProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNProto_Engine LRNProto::DEFAULT;
const LRNProto_Engine LRNProto::CAFFE;
const LRNProto_Engine LRNProto::CUDNN;
const LRNProto_Engine LRNProto::Engine_MIN;
const LRNProto_Engine LRNProto::Engine_MAX;
const int LRNProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SigmoidProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[10];
}
bool SigmoidProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SigmoidProto_Engine SigmoidProto::DEFAULT;
const SigmoidProto_Engine SigmoidProto::CAFFE;
const SigmoidProto_Engine SigmoidProto::CUDNN;
const SigmoidProto_Engine SigmoidProto::Engine_MIN;
const SigmoidProto_Engine SigmoidProto::Engine_MAX;
const int SigmoidProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SoftmaxProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[11];
}
bool SoftmaxProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftmaxProto_Engine SoftmaxProto::DEFAULT;
const SoftmaxProto_Engine SoftmaxProto::CAFFE;
const SoftmaxProto_Engine SoftmaxProto::CUDNN;
const SoftmaxProto_Engine SoftmaxProto::Engine_MIN;
const SoftmaxProto_Engine SoftmaxProto::Engine_MAX;
const int SoftmaxProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StoreProto_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[12];
}
bool StoreProto_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StoreProto_Engine StoreProto::DEFAULT;
const StoreProto_Engine StoreProto::CAFFE;
const StoreProto_Engine StoreProto::CUDNN;
const StoreProto_Engine StoreProto::Engine_MIN;
const StoreProto_Engine StoreProto::Engine_MAX;
const int StoreProto::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParallelPolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[13];
}
bool ParallelPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[14];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CopyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[15];
}
bool CopyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BoxingOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[16];
}
bool BoxingOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataTypeFieldNumber;
const int BlobProto::kFloatDataFieldNumber;
const int BlobProto::kInt32DataFieldNumber;
const int BlobProto::kByteDataFieldNumber;
const int BlobProto::kStringDataFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kInt64DataFieldNumber;
const int BlobProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_data_(from.float_data_),
      int32_data_(from.int32_data_),
      string_data_(from.string_data_),
      double_data_(from.double_data_),
      int64_data_(from.int64_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byte_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_byte_data()) {
    byte_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_data_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&shape_, &from.shape_,
    reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&shape_) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  byte_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = GOOGLE_LONGLONG(0);
  data_type_ = 1;
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  byte_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const BlobProto& BlobProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  double_data_.Clear();
  int64_data_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_byte_data()) {
      GOOGLE_DCHECK(!byte_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*byte_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    shape_ = GOOGLE_LONGLONG(0);
    data_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shape = 1;
      case 1: {
        if (tag == 8u) {
          set_has_shape();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BlobProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::caffe::BlobProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 3 [packed = true];
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 int32_data = 4 [packed = true];
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_int32_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes byte_data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes string_data = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BlobProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_data = 9 [packed = true];
      case 9: {
        if (tag == 74u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (tag == 73u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74u, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 int64_data = 10 [packed = true];
      case 10: {
        if (tag == 82u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_data())));
        } else if (tag == 80u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 82u, input, this->mutable_int64_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  // required int64 shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shape(), output);
  }

  // optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_data_cached_byte_size_);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->float_data(i), output);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int32_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_data(i), output);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->byte_data(), output);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->string_data(i), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BlobProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // repeated double double_data = 9 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated int64 int64_data = 10 [packed = true];
  if (this->int64_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int64_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int64_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  // required int64 shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->shape(), target);
  }

  // optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _float_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_data(i), target);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int32_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32_data(i), target);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->byte_data(), target);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->string_data(i), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BlobProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // repeated double double_data = 9 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data(i), target);
  }

  // repeated int64 int64_data = 10 [packed = true];
  if (this->int64_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int64_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int64_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->int64_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 shape = 1;
  if (has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shape());
  }
  // repeated float float_data = 3 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->float_data_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32_data = 4 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->int32_data_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_data_size());
  for (int i = 0; i < this->string_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_data(i));
  }

  // repeated double double_data = 9 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->double_data_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 int64_data = 10 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->int64_data_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->int64_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes byte_data = 5;
    if (has_byte_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byte_data());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  string_data_.MergeFrom(from.string_data_);
  double_data_.MergeFrom(from.double_data_);
  int64_data_.MergeFrom(from.int64_data_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_byte_data()) {
      set_has_byte_data();
      byte_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_data_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  float_data_.UnsafeArenaSwap(&other->float_data_);
  int32_data_.UnsafeArenaSwap(&other->int32_data_);
  string_data_.UnsafeArenaSwap(&other->string_data_);
  double_data_.UnsafeArenaSwap(&other->double_data_);
  int64_data_.UnsafeArenaSwap(&other->int64_data_);
  byte_data_.Swap(&other->byte_data_);
  name_.Swap(&other->name_);
  std::swap(shape_, other->shape_);
  std::swap(data_type_, other->data_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// required int64 shape = 1;
bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobProto::clear_shape() {
  shape_ = GOOGLE_LONGLONG(0);
  clear_has_shape();
}
::google::protobuf::int64 BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_;
}
void BlobProto::set_shape(::google::protobuf::int64 value) {
  set_has_shape();
  shape_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.shape)
}

// optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
bool BlobProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobProto::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
::caffe::BlobProto_DataType BlobProto::data_type() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data_type)
  return static_cast< ::caffe::BlobProto_DataType >(data_type_);
}
void BlobProto::set_data_type(::caffe::BlobProto_DataType value) {
  assert(::caffe::BlobProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data_type)
}

// repeated float float_data = 3 [packed = true];
int BlobProto::float_data_size() const {
  return float_data_.size();
}
void BlobProto::clear_float_data() {
  float_data_.Clear();
}
float BlobProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.float_data)
  return float_data_.Get(index);
}
void BlobProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.float_data)
}
void BlobProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.float_data)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 4 [packed = true];
int BlobProto::int32_data_size() const {
  return int32_data_.size();
}
void BlobProto::clear_int32_data() {
  int32_data_.Clear();
}
::google::protobuf::int32 BlobProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.int32_data)
  return int32_data_.Get(index);
}
void BlobProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.int32_data)
}
void BlobProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.int32_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BlobProto::int32_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.int32_data)
  return int32_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BlobProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.int32_data)
  return &int32_data_;
}

// optional bytes byte_data = 5;
bool BlobProto::has_byte_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_byte_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_byte_data() {
  byte_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_byte_data();
}
const ::std::string& BlobProto::byte_data() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.byte_data)
  return byte_data_.GetNoArena();
}
void BlobProto::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.byte_data)
}
#if LANG_CXX11
void BlobProto::set_byte_data(::std::string&& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BlobProto.byte_data)
}
#endif
void BlobProto::set_byte_data(const char* value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.byte_data)
}
void BlobProto::set_byte_data(const void* value, size_t size) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.byte_data)
}
::std::string* BlobProto::mutable_byte_data() {
  set_has_byte_data();
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.byte_data)
  return byte_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobProto::release_byte_data() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.byte_data)
  clear_has_byte_data();
  return byte_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobProto::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data != NULL) {
    set_has_byte_data();
  } else {
    clear_has_byte_data();
  }
  byte_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_data);
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.byte_data)
}

// repeated bytes string_data = 6;
int BlobProto::string_data_size() const {
  return string_data_.size();
}
void BlobProto::clear_string_data() {
  string_data_.Clear();
}
const ::std::string& BlobProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.string_data)
  return string_data_.Get(index);
}
::std::string* BlobProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.string_data)
  return string_data_.Mutable(index);
}
void BlobProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.BlobProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
void BlobProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.string_data)
}
void BlobProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.string_data)
}
::std::string* BlobProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:caffe.BlobProto.string_data)
  return string_data_.Add();
}
void BlobProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.string_data)
}
void BlobProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.BlobProto.string_data)
}
void BlobProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.BlobProto.string_data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlobProto::string_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.string_data)
  return string_data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BlobProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.string_data)
  return &string_data_;
}

// repeated double double_data = 9 [packed = true];
int BlobProto::double_data_size() const {
  return double_data_.size();
}
void BlobProto::clear_double_data() {
  double_data_.Clear();
}
double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated int64 int64_data = 10 [packed = true];
int BlobProto::int64_data_size() const {
  return int64_data_.size();
}
void BlobProto::clear_int64_data() {
  int64_data_.Clear();
}
::google::protobuf::int64 BlobProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.int64_data)
  return int64_data_.Get(index);
}
void BlobProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.int64_data)
}
void BlobProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.int64_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobProto::int64_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.int64_data)
  return int64_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.int64_data)
  return &int64_data_;
}

// optional string name = 7;
bool BlobProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& BlobProto::name() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.name)
  return name_.GetNoArena();
}
void BlobProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.name)
}
#if LANG_CXX11
void BlobProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BlobProto.name)
}
#endif
void BlobProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.name)
}
void BlobProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.name)
}
::std::string* BlobProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const BlobShape& BlobShape::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
  BlobShape* n = new BlobShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
  dim_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1 [packed = true];
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->dim_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dim_.MergeFrom(from.dim_);
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
  dim_.UnsafeArenaSwap(&other->dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
int BlobShape::dim_size() const {
  return dim_.size();
}
void BlobShape::clear_dim() {
  dim_.Clear();
}
::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> FillerParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kSparseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
  }
  ::memcpy(&value_, &from.value_,
    reinterpret_cast<char*>(&std_) -
    reinterpret_cast<char*>(&value_) + sizeof(std_));
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  ::memset(&value_, 0, reinterpret_cast<char*>(&mean_) -
    reinterpret_cast<char*>(&value_) + sizeof(mean_));
  sparse_ = -1;
  max_ = 1;
  std_ = 1;
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(&FillerParameter::_default_type_.get());
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const FillerParameter& FillerParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
  FillerParameter* n = new FillerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&FillerParameter::_default_type_.get()));
    (*type_.UnsafeRawStringPointer())->assign(*&FillerParameter::_default_type_.get());
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&value_, 0, reinterpret_cast<char*>(&mean_) -
      reinterpret_cast<char*>(&value_) + sizeof(mean_));
    sparse_ = -1;
    max_ = 1;
    std_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (tag == 21u) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min = 3 [default = 0];
      case 3: {
        if (tag == 29u) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 4 [default = 1];
      case 4: {
        if (tag == 37u) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean = 5 [default = 0];
      case 5: {
        if (tag == 45u) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float std = 6 [default = 1];
      case 6: {
        if (tag == 53u) {
          set_has_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sparse = 7 [default = -1];
      case 7: {
        if (tag == 56u) {
          set_has_sparse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional int32 sparse = 7 [default = -1];
    if (has_sparse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparse());
    }

    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FillerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
  type_.Swap(&other->type_);
  std::swap(value_, other->value_);
  std::swap(min_, other->min_);
  std::swap(mean_, other->mean_);
  std::swap(sparse_, other->sparse_);
  std::swap(max_, other->max_);
  std::swap(std_, other->std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1 [default = "constant"];
bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&FillerParameter::_default_type_.get());
  clear_has_type();
}
const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &FillerParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&FillerParameter::_default_type_.get());
}
::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&FillerParameter::_default_type_.get());
}
void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000020u;
}
void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000040u;
}
void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000010u;
}
void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      input_shape_(from.input_shape_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_state()) {
    state_ = new ::caffe::NetState(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&force_backward_, &from.force_backward_,
    reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&force_backward_) + sizeof(debug_info_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&state_) + sizeof(debug_info_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete state_;
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const NetParameter& NetParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
  input_shape_.Clear();
  layer_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_state()) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->::caffe::NetState::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&force_backward_, 0, reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&force_backward_) + sizeof(debug_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (tag == 40u) {
          set_has_force_backward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState state = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 7 [default = false];
      case 7: {
        if (tag == 56u) {
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.LayerProto layer = 100;
      case 100: {
        if (tag == 802u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->state_, output);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_shape(i), output);
  }

  // repeated .caffe.LayerProto layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->state_, false, target);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->input_shape(i), false, target);
  }

  // repeated .caffe.LayerProto layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->layer(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.BlobShape input_shape = 8;
  {
    unsigned int count = this->input_shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_shape(i));
    }
  }

  // repeated .caffe.LayerProto layer = 100;
  {
    unsigned int count = this->layer_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.NetState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }

    // optional bool debug_info = 7 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_shape_.MergeFrom(from.input_shape_);
  layer_.MergeFrom(from.layer_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_state()) {
      mutable_state()->::caffe::NetState::MergeFrom(from.state());
    }
    if (from.has_force_backward()) {
      set_force_backward(from.force_backward());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  input_shape_.UnsafeArenaSwap(&other->input_shape_);
  layer_.UnsafeArenaSwap(&other->layer_);
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  std::swap(force_backward_, other->force_backward_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated .caffe.BlobShape input_shape = 8;
int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// optional bool force_backward = 5 [default = false];
bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerProto layer = 100;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerProto& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
::caffe::LayerProto* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
::caffe::LayerProto* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerProto >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerProto >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceSet::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceSet::DeviceSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DeviceSet)
}
DeviceSet::DeviceSet(const DeviceSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      device_id_(from.device_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.DeviceSet)
}

void DeviceSet::SharedCtor() {
  _cached_size_ = 0;
}

DeviceSet::~DeviceSet() {
  // @@protoc_insertion_point(destructor:caffe.DeviceSet)
  SharedDtor();
}

void DeviceSet::SharedDtor() {
}

void DeviceSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const DeviceSet& DeviceSet::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

DeviceSet* DeviceSet::New(::google::protobuf::Arena* arena) const {
  DeviceSet* n = new DeviceSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DeviceSet)
  device_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DeviceSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 device_id = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_device_id())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DeviceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DeviceSet)
  return false;
#undef DO_
}

void DeviceSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DeviceSet)
  // repeated int32 device_id = 1;
  for (int i = 0; i < this->device_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->device_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DeviceSet)
}

::google::protobuf::uint8* DeviceSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DeviceSet)
  // repeated int32 device_id = 1;
  for (int i = 0; i < this->device_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->device_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DeviceSet)
  return target;
}

size_t DeviceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DeviceSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 device_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->device_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->device_id(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->device_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DeviceSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DeviceSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DeviceSet)
    MergeFrom(*source);
  }
}

void DeviceSet::MergeFrom(const DeviceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DeviceSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.MergeFrom(from.device_id_);
}

void DeviceSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DeviceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSet::CopyFrom(const DeviceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DeviceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSet::IsInitialized() const {
  return true;
}

void DeviceSet::Swap(DeviceSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceSet::InternalSwap(DeviceSet* other) {
  device_id_.UnsafeArenaSwap(&other->device_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceSet

// repeated int32 device_id = 1;
int DeviceSet::device_id_size() const {
  return device_id_.size();
}
void DeviceSet::clear_device_id() {
  device_id_.Clear();
}
::google::protobuf::int32 DeviceSet::device_id(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeviceSet.device_id)
  return device_id_.Get(index);
}
void DeviceSet::set_device_id(int index, ::google::protobuf::int32 value) {
  device_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeviceSet.device_id)
}
void DeviceSet::add_device_id(::google::protobuf::int32 value) {
  device_id_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeviceSet.device_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeviceSet::device_id() const {
  // @@protoc_insertion_point(field_list:caffe.DeviceSet.device_id)
  return device_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeviceSet::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeviceSet.device_id)
  return &device_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine::kNameFieldNumber;
const int Machine::kPortFieldNumber;
const int Machine::kDeviceSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine::Machine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Machine)
}
Machine::Machine(const Machine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_port()) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.has_device_set()) {
    device_set_ = new ::caffe::DeviceSet(*from.device_set_);
  } else {
    device_set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe.Machine)
}

void Machine::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_set_ = NULL;
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:caffe.Machine)
  SharedDtor();
}

void Machine::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete device_set_;
  }
}

void Machine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5].descriptor;
}

const Machine& Machine::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

Machine* Machine::New(::google::protobuf::Arena* arena) const {
  Machine* n = new Machine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Machine)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_port()) {
      GOOGLE_DCHECK(!port_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*port_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_set()) {
      GOOGLE_DCHECK(device_set_ != NULL);
      device_set_->::caffe::DeviceSet::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Machine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Machine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.Machine.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string port = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.Machine.port");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DeviceSet device_set = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Machine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Machine)
  return false;
#undef DO_
}

void Machine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Machine)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.Machine.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.Machine.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  // optional .caffe.DeviceSet device_set = 3;
  if (has_device_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->device_set_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Machine)
}

::google::protobuf::uint8* Machine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Machine)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.Machine.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.Machine.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  // optional .caffe.DeviceSet device_set = 3;
  if (has_device_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->device_set_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Machine)
  return target;
}

size_t Machine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Machine)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_port()) {
    // required string port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  return total_size;
}
size_t Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Machine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .caffe.DeviceSet device_set = 3;
  if (has_device_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Machine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Machine)
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_port()) {
      set_has_port();
      port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
    }
    if (from.has_device_set()) {
      mutable_device_set()->::caffe::DeviceSet::MergeFrom(from.device_set());
    }
  }
}

void Machine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Machine::Swap(Machine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine::InternalSwap(Machine* other) {
  name_.Swap(&other->name_);
  port_.Swap(&other->port_);
  std::swap(device_set_, other->device_set_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Machine

// required string name = 1;
bool Machine::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Machine::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Machine::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Machine::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Machine::name() const {
  // @@protoc_insertion_point(field_get:caffe.Machine.name)
  return name_.GetNoArena();
}
void Machine::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Machine.name)
}
#if LANG_CXX11
void Machine::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Machine.name)
}
#endif
void Machine::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Machine.name)
}
void Machine::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Machine.name)
}
::std::string* Machine::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.Machine.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Machine::release_name() {
  // @@protoc_insertion_point(field_release:caffe.Machine.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Machine::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.Machine.name)
}

// required string port = 2;
bool Machine::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Machine::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Machine::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Machine::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_port();
}
const ::std::string& Machine::port() const {
  // @@protoc_insertion_point(field_get:caffe.Machine.port)
  return port_.GetNoArena();
}
void Machine::set_port(const ::std::string& value) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Machine.port)
}
#if LANG_CXX11
void Machine::set_port(::std::string&& value) {
  set_has_port();
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Machine.port)
}
#endif
void Machine::set_port(const char* value) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Machine.port)
}
void Machine::set_port(const char* value, size_t size) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Machine.port)
}
::std::string* Machine::mutable_port() {
  set_has_port();
  // @@protoc_insertion_point(field_mutable:caffe.Machine.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Machine::release_port() {
  // @@protoc_insertion_point(field_release:caffe.Machine.port)
  clear_has_port();
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Machine::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    set_has_port();
  } else {
    clear_has_port();
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:caffe.Machine.port)
}

// optional .caffe.DeviceSet device_set = 3;
bool Machine::has_device_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Machine::set_has_device_set() {
  _has_bits_[0] |= 0x00000004u;
}
void Machine::clear_has_device_set() {
  _has_bits_[0] &= ~0x00000004u;
}
void Machine::clear_device_set() {
  if (device_set_ != NULL) device_set_->::caffe::DeviceSet::Clear();
  clear_has_device_set();
}
const ::caffe::DeviceSet& Machine::device_set() const {
  // @@protoc_insertion_point(field_get:caffe.Machine.device_set)
  return device_set_ != NULL ? *device_set_
                         : *::caffe::DeviceSet::internal_default_instance();
}
::caffe::DeviceSet* Machine::mutable_device_set() {
  set_has_device_set();
  if (device_set_ == NULL) {
    device_set_ = new ::caffe::DeviceSet;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Machine.device_set)
  return device_set_;
}
::caffe::DeviceSet* Machine::release_device_set() {
  // @@protoc_insertion_point(field_release:caffe.Machine.device_set)
  clear_has_device_set();
  ::caffe::DeviceSet* temp = device_set_;
  device_set_ = NULL;
  return temp;
}
void Machine::set_allocated_device_set(::caffe::DeviceSet* device_set) {
  delete device_set_;
  device_set_ = device_set;
  if (device_set) {
    set_has_device_set();
  } else {
    clear_has_device_set();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Machine.device_set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource::kMachineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource::Resource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Resource)
}
Resource::Resource(const Resource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      machine_(from.machine_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.Resource)
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:caffe.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6].descriptor;
}

const Resource& Resource::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

Resource* Resource::New(::google::protobuf::Arena* arena) const {
  Resource* n = new Resource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Resource)
  machine_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.Machine machine = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_machine()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Resource)
  // repeated .caffe.Machine machine = 1;
  for (unsigned int i = 0, n = this->machine_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Resource)
}

::google::protobuf::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Resource)
  // repeated .caffe.Machine machine = 1;
  for (unsigned int i = 0, n = this->machine_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->machine(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Resource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.Machine machine = 1;
  {
    unsigned int count = this->machine_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Resource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_.MergeFrom(from.machine_);
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->machine())) return false;
  return true;
}

void Resource::Swap(Resource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource::InternalSwap(Resource* other) {
  machine_.UnsafeArenaSwap(&other->machine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resource

// repeated .caffe.Machine machine = 1;
int Resource::machine_size() const {
  return machine_.size();
}
void Resource::clear_machine() {
  machine_.Clear();
}
const ::caffe::Machine& Resource::machine(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Resource.machine)
  return machine_.Get(index);
}
::caffe::Machine* Resource::mutable_machine(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.Resource.machine)
  return machine_.Mutable(index);
}
::caffe::Machine* Resource::add_machine() {
  // @@protoc_insertion_point(field_add:caffe.Resource.machine)
  return machine_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::Machine >*
Resource::mutable_machine() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Resource.machine)
  return &machine_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::Machine >&
Resource::machine() const {
  // @@protoc_insertion_point(field_list:caffe.Resource.machine)
  return machine_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerSet::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerSet::LayerSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerSet)
}
LayerSet::LayerSet(const LayerSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      name_(from.name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.LayerSet)
}

void LayerSet::SharedCtor() {
  _cached_size_ = 0;
}

LayerSet::~LayerSet() {
  // @@protoc_insertion_point(destructor:caffe.LayerSet)
  SharedDtor();
}

void LayerSet::SharedDtor() {
}

void LayerSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7].descriptor;
}

const LayerSet& LayerSet::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

LayerSet* LayerSet::New(::google::protobuf::Arena* arena) const {
  LayerSet* n = new LayerSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerSet)
  name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerSet.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerSet)
  return false;
#undef DO_
}

void LayerSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerSet)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerSet)
}

::google::protobuf::uint8* LayerSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerSet)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerSet.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerSet)
  return target;
}

size_t LayerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->name_size());
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerSet)
    MergeFrom(*source);
  }
}

void LayerSet::MergeFrom(const LayerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.MergeFrom(from.name_);
}

void LayerSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerSet::CopyFrom(const LayerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerSet::IsInitialized() const {
  return true;
}

void LayerSet::Swap(LayerSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerSet::InternalSwap(LayerSet* other) {
  name_.UnsafeArenaSwap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerSet

// repeated string name = 1;
int LayerSet::name_size() const {
  return name_.size();
}
void LayerSet::clear_name() {
  name_.Clear();
}
const ::std::string& LayerSet::name(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerSet.name)
  return name_.Get(index);
}
::std::string* LayerSet::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerSet.name)
  return name_.Mutable(index);
}
void LayerSet::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerSet.name)
  name_.Mutable(index)->assign(value);
}
void LayerSet::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerSet.name)
}
void LayerSet::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerSet.name)
}
::std::string* LayerSet::add_name() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerSet.name)
  return name_.Add();
}
void LayerSet::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerSet.name)
}
void LayerSet::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerSet.name)
}
void LayerSet::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerSet.name)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerSet::name() const {
  // @@protoc_insertion_point(field_list:caffe.LayerSet.name)
  return name_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerSet.name)
  return &name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceGroup::kBeginFieldNumber;
const int DeviceGroup::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceGroup::DeviceGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DeviceGroup)
}
DeviceGroup::DeviceGroup(const DeviceGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:caffe.DeviceGroup)
}

void DeviceGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begin_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_) + sizeof(end_));
}

DeviceGroup::~DeviceGroup() {
  // @@protoc_insertion_point(destructor:caffe.DeviceGroup)
  SharedDtor();
}

void DeviceGroup::SharedDtor() {
}

void DeviceGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8].descriptor;
}

const DeviceGroup& DeviceGroup::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

DeviceGroup* DeviceGroup::New(::google::protobuf::Arena* arena) const {
  DeviceGroup* n = new DeviceGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DeviceGroup)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&begin_, 0, reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DeviceGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (tag == 8u) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (tag == 16u) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DeviceGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DeviceGroup)
  return false;
#undef DO_
}

void DeviceGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DeviceGroup)
  // required int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DeviceGroup)
}

::google::protobuf::uint8* DeviceGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DeviceGroup)
  // required int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DeviceGroup)
  return target;
}

size_t DeviceGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.DeviceGroup)
  size_t total_size = 0;

  if (has_begin()) {
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());
  }

  if (has_end()) {
    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  return total_size;
}
size_t DeviceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DeviceGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());

    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DeviceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DeviceGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DeviceGroup)
    MergeFrom(*source);
  }
}

void DeviceGroup::MergeFrom(const DeviceGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DeviceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
}

void DeviceGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DeviceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceGroup::CopyFrom(const DeviceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DeviceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DeviceGroup::Swap(DeviceGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceGroup::InternalSwap(DeviceGroup* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceGroup

// required int32 begin = 1;
bool DeviceGroup::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceGroup::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceGroup::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceGroup::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
::google::protobuf::int32 DeviceGroup::begin() const {
  // @@protoc_insertion_point(field_get:caffe.DeviceGroup.begin)
  return begin_;
}
void DeviceGroup::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeviceGroup.begin)
}

// required int32 end = 2;
bool DeviceGroup::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceGroup::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceGroup::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceGroup::clear_end() {
  end_ = 0;
  clear_has_end();
}
::google::protobuf::int32 DeviceGroup::end() const {
  // @@protoc_insertion_point(field_get:caffe.DeviceGroup.end)
  return end_;
}
void DeviceGroup::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeviceGroup.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineGroup::kBeginFieldNumber;
const int MachineGroup::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineGroup::MachineGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MachineGroup)
}
MachineGroup::MachineGroup(const MachineGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:caffe.MachineGroup)
}

void MachineGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begin_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_) + sizeof(end_));
}

MachineGroup::~MachineGroup() {
  // @@protoc_insertion_point(destructor:caffe.MachineGroup)
  SharedDtor();
}

void MachineGroup::SharedDtor() {
}

void MachineGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9].descriptor;
}

const MachineGroup& MachineGroup::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

MachineGroup* MachineGroup::New(::google::protobuf::Arena* arena) const {
  MachineGroup* n = new MachineGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MachineGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MachineGroup)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&begin_, 0, reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MachineGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MachineGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (tag == 8u) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (tag == 16u) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MachineGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MachineGroup)
  return false;
#undef DO_
}

void MachineGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MachineGroup)
  // required int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MachineGroup)
}

::google::protobuf::uint8* MachineGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MachineGroup)
  // required int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MachineGroup)
  return target;
}

size_t MachineGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.MachineGroup)
  size_t total_size = 0;

  if (has_begin()) {
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());
  }

  if (has_end()) {
    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  return total_size;
}
size_t MachineGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MachineGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());

    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MachineGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MachineGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MachineGroup)
    MergeFrom(*source);
  }
}

void MachineGroup::MergeFrom(const MachineGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MachineGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
}

void MachineGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MachineGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineGroup::CopyFrom(const MachineGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MachineGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MachineGroup::Swap(MachineGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineGroup::InternalSwap(MachineGroup* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MachineGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MachineGroup

// required int32 begin = 1;
bool MachineGroup::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MachineGroup::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void MachineGroup::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void MachineGroup::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
::google::protobuf::int32 MachineGroup::begin() const {
  // @@protoc_insertion_point(field_get:caffe.MachineGroup.begin)
  return begin_;
}
void MachineGroup::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:caffe.MachineGroup.begin)
}

// required int32 end = 2;
bool MachineGroup::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MachineGroup::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void MachineGroup::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void MachineGroup::clear_end() {
  end_ = 0;
  clear_has_end();
}
::google::protobuf::int32 MachineGroup::end() const {
  // @@protoc_insertion_point(field_get:caffe.MachineGroup.end)
  return end_;
}
void MachineGroup::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:caffe.MachineGroup.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlacementGroup::kNameFieldNumber;
const int PlacementGroup::kLayerSetFieldNumber;
const int PlacementGroup::kDeviceGroupFieldNumber;
const int PlacementGroup::kMachineGroupFieldNumber;
const int PlacementGroup::kParallelPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlacementGroup::PlacementGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PlacementGroup)
}
PlacementGroup::PlacementGroup(const PlacementGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_layer_set()) {
    layer_set_ = new ::caffe::LayerSet(*from.layer_set_);
  } else {
    layer_set_ = NULL;
  }
  if (from.has_device_group()) {
    device_group_ = new ::caffe::DeviceGroup(*from.device_group_);
  } else {
    device_group_ = NULL;
  }
  if (from.has_machine_group()) {
    machine_group_ = new ::caffe::MachineGroup(*from.machine_group_);
  } else {
    machine_group_ = NULL;
  }
  parallel_policy_ = from.parallel_policy_;
  // @@protoc_insertion_point(copy_constructor:caffe.PlacementGroup)
}

void PlacementGroup::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&layer_set_, 0, reinterpret_cast<char*>(&parallel_policy_) -
    reinterpret_cast<char*>(&layer_set_) + sizeof(parallel_policy_));
}

PlacementGroup::~PlacementGroup() {
  // @@protoc_insertion_point(destructor:caffe.PlacementGroup)
  SharedDtor();
}

void PlacementGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete layer_set_;
  }
  if (this != internal_default_instance()) {
    delete device_group_;
  }
  if (this != internal_default_instance()) {
    delete machine_group_;
  }
}

void PlacementGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlacementGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10].descriptor;
}

const PlacementGroup& PlacementGroup::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

PlacementGroup* PlacementGroup::New(::google::protobuf::Arena* arena) const {
  PlacementGroup* n = new PlacementGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlacementGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PlacementGroup)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_layer_set()) {
      GOOGLE_DCHECK(layer_set_ != NULL);
      layer_set_->::caffe::LayerSet::Clear();
    }
    if (has_device_group()) {
      GOOGLE_DCHECK(device_group_ != NULL);
      device_group_->::caffe::DeviceGroup::Clear();
    }
    if (has_machine_group()) {
      GOOGLE_DCHECK(machine_group_ != NULL);
      machine_group_->::caffe::MachineGroup::Clear();
    }
  }
  parallel_policy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlacementGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PlacementGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PlacementGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .caffe.LayerSet layer_set = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DeviceGroup device_group = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MachineGroup machine_group = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParallelPolicy_IsValid(value)) {
            set_parallel_policy(static_cast< ::caffe::ParallelPolicy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PlacementGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PlacementGroup)
  return false;
#undef DO_
}

void PlacementGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PlacementGroup)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PlacementGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .caffe.LayerSet layer_set = 2;
  if (has_layer_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->layer_set_, output);
  }

  // optional .caffe.DeviceGroup device_group = 3;
  if (has_device_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->device_group_, output);
  }

  // optional .caffe.MachineGroup machine_group = 4;
  if (has_machine_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->machine_group_, output);
  }

  // optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
  if (has_parallel_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->parallel_policy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PlacementGroup)
}

::google::protobuf::uint8* PlacementGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PlacementGroup)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PlacementGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .caffe.LayerSet layer_set = 2;
  if (has_layer_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->layer_set_, false, target);
  }

  // optional .caffe.DeviceGroup device_group = 3;
  if (has_device_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->device_group_, false, target);
  }

  // optional .caffe.MachineGroup machine_group = 4;
  if (has_machine_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->machine_group_, false, target);
  }

  // optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
  if (has_parallel_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->parallel_policy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PlacementGroup)
  return target;
}

size_t PlacementGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.PlacementGroup)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_layer_set()) {
    // required .caffe.LayerSet layer_set = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_set_);
  }

  return total_size;
}
size_t PlacementGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PlacementGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .caffe.LayerSet layer_set = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->layer_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional .caffe.DeviceGroup device_group = 3;
    if (has_device_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_group_);
    }

    // optional .caffe.MachineGroup machine_group = 4;
    if (has_machine_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->machine_group_);
    }

    // optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
    if (has_parallel_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parallel_policy());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlacementGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PlacementGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PlacementGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlacementGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PlacementGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PlacementGroup)
    MergeFrom(*source);
  }
}

void PlacementGroup::MergeFrom(const PlacementGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PlacementGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_layer_set()) {
      mutable_layer_set()->::caffe::LayerSet::MergeFrom(from.layer_set());
    }
    if (from.has_device_group()) {
      mutable_device_group()->::caffe::DeviceGroup::MergeFrom(from.device_group());
    }
    if (from.has_machine_group()) {
      mutable_machine_group()->::caffe::MachineGroup::MergeFrom(from.machine_group());
    }
    if (from.has_parallel_policy()) {
      set_parallel_policy(from.parallel_policy());
    }
  }
}

void PlacementGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PlacementGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacementGroup::CopyFrom(const PlacementGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PlacementGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacementGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_device_group()) {
    if (!this->device_group_->IsInitialized()) return false;
  }
  if (has_machine_group()) {
    if (!this->machine_group_->IsInitialized()) return false;
  }
  return true;
}

void PlacementGroup::Swap(PlacementGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlacementGroup::InternalSwap(PlacementGroup* other) {
  name_.Swap(&other->name_);
  std::swap(layer_set_, other->layer_set_);
  std::swap(device_group_, other->device_group_);
  std::swap(machine_group_, other->machine_group_);
  std::swap(parallel_policy_, other->parallel_policy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlacementGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlacementGroup

// required string name = 1;
bool PlacementGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlacementGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlacementGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlacementGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlacementGroup::name() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.name)
  return name_.GetNoArena();
}
void PlacementGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PlacementGroup.name)
}
#if LANG_CXX11
void PlacementGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PlacementGroup.name)
}
#endif
void PlacementGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PlacementGroup.name)
}
void PlacementGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PlacementGroup.name)
}
::std::string* PlacementGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlacementGroup::release_name() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlacementGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.name)
}

// required .caffe.LayerSet layer_set = 2;
bool PlacementGroup::has_layer_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlacementGroup::set_has_layer_set() {
  _has_bits_[0] |= 0x00000002u;
}
void PlacementGroup::clear_has_layer_set() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlacementGroup::clear_layer_set() {
  if (layer_set_ != NULL) layer_set_->::caffe::LayerSet::Clear();
  clear_has_layer_set();
}
const ::caffe::LayerSet& PlacementGroup::layer_set() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.layer_set)
  return layer_set_ != NULL ? *layer_set_
                         : *::caffe::LayerSet::internal_default_instance();
}
::caffe::LayerSet* PlacementGroup::mutable_layer_set() {
  set_has_layer_set();
  if (layer_set_ == NULL) {
    layer_set_ = new ::caffe::LayerSet;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.layer_set)
  return layer_set_;
}
::caffe::LayerSet* PlacementGroup::release_layer_set() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.layer_set)
  clear_has_layer_set();
  ::caffe::LayerSet* temp = layer_set_;
  layer_set_ = NULL;
  return temp;
}
void PlacementGroup::set_allocated_layer_set(::caffe::LayerSet* layer_set) {
  delete layer_set_;
  layer_set_ = layer_set;
  if (layer_set) {
    set_has_layer_set();
  } else {
    clear_has_layer_set();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.layer_set)
}

// optional .caffe.DeviceGroup device_group = 3;
bool PlacementGroup::has_device_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlacementGroup::set_has_device_group() {
  _has_bits_[0] |= 0x00000004u;
}
void PlacementGroup::clear_has_device_group() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlacementGroup::clear_device_group() {
  if (device_group_ != NULL) device_group_->::caffe::DeviceGroup::Clear();
  clear_has_device_group();
}
const ::caffe::DeviceGroup& PlacementGroup::device_group() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.device_group)
  return device_group_ != NULL ? *device_group_
                         : *::caffe::DeviceGroup::internal_default_instance();
}
::caffe::DeviceGroup* PlacementGroup::mutable_device_group() {
  set_has_device_group();
  if (device_group_ == NULL) {
    device_group_ = new ::caffe::DeviceGroup;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.device_group)
  return device_group_;
}
::caffe::DeviceGroup* PlacementGroup::release_device_group() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.device_group)
  clear_has_device_group();
  ::caffe::DeviceGroup* temp = device_group_;
  device_group_ = NULL;
  return temp;
}
void PlacementGroup::set_allocated_device_group(::caffe::DeviceGroup* device_group) {
  delete device_group_;
  device_group_ = device_group;
  if (device_group) {
    set_has_device_group();
  } else {
    clear_has_device_group();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.device_group)
}

// optional .caffe.MachineGroup machine_group = 4;
bool PlacementGroup::has_machine_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlacementGroup::set_has_machine_group() {
  _has_bits_[0] |= 0x00000008u;
}
void PlacementGroup::clear_has_machine_group() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlacementGroup::clear_machine_group() {
  if (machine_group_ != NULL) machine_group_->::caffe::MachineGroup::Clear();
  clear_has_machine_group();
}
const ::caffe::MachineGroup& PlacementGroup::machine_group() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.machine_group)
  return machine_group_ != NULL ? *machine_group_
                         : *::caffe::MachineGroup::internal_default_instance();
}
::caffe::MachineGroup* PlacementGroup::mutable_machine_group() {
  set_has_machine_group();
  if (machine_group_ == NULL) {
    machine_group_ = new ::caffe::MachineGroup;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.machine_group)
  return machine_group_;
}
::caffe::MachineGroup* PlacementGroup::release_machine_group() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.machine_group)
  clear_has_machine_group();
  ::caffe::MachineGroup* temp = machine_group_;
  machine_group_ = NULL;
  return temp;
}
void PlacementGroup::set_allocated_machine_group(::caffe::MachineGroup* machine_group) {
  delete machine_group_;
  machine_group_ = machine_group;
  if (machine_group) {
    set_has_machine_group();
  } else {
    clear_has_machine_group();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.machine_group)
}

// optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
bool PlacementGroup::has_parallel_policy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlacementGroup::set_has_parallel_policy() {
  _has_bits_[0] |= 0x00000010u;
}
void PlacementGroup::clear_has_parallel_policy() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlacementGroup::clear_parallel_policy() {
  parallel_policy_ = 0;
  clear_has_parallel_policy();
}
::caffe::ParallelPolicy PlacementGroup::parallel_policy() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.parallel_policy)
  return static_cast< ::caffe::ParallelPolicy >(parallel_policy_);
}
void PlacementGroup::set_parallel_policy(::caffe::ParallelPolicy value) {
  assert(::caffe::ParallelPolicy_IsValid(value));
  set_has_parallel_policy();
  parallel_policy_ = value;
  // @@protoc_insertion_point(field_set:caffe.PlacementGroup.parallel_policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Strategy::kPlacementGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Strategy::Strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Strategy)
}
Strategy::Strategy(const Strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      placement_group_(from.placement_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.Strategy)
}

void Strategy::SharedCtor() {
  _cached_size_ = 0;
}

Strategy::~Strategy() {
  // @@protoc_insertion_point(destructor:caffe.Strategy)
  SharedDtor();
}

void Strategy::SharedDtor() {
}

void Strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Strategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11].descriptor;
}

const Strategy& Strategy::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

Strategy* Strategy::New(::google::protobuf::Arena* arena) const {
  Strategy* n = new Strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Strategy)
  placement_group_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.PlacementGroup placement_group = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_placement_group()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Strategy)
  return false;
#undef DO_
}

void Strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Strategy)
  // repeated .caffe.PlacementGroup placement_group = 1;
  for (unsigned int i = 0, n = this->placement_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->placement_group(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Strategy)
}

::google::protobuf::uint8* Strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Strategy)
  // repeated .caffe.PlacementGroup placement_group = 1;
  for (unsigned int i = 0, n = this->placement_group_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->placement_group(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Strategy)
  return target;
}

size_t Strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Strategy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.PlacementGroup placement_group = 1;
  {
    unsigned int count = this->placement_group_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placement_group(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const Strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Strategy)
    MergeFrom(*source);
  }
}

void Strategy::MergeFrom(const Strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  placement_group_.MergeFrom(from.placement_group_);
}

void Strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Strategy::CopyFrom(const Strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strategy::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->placement_group())) return false;
  return true;
}

void Strategy::Swap(Strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Strategy::InternalSwap(Strategy* other) {
  placement_group_.UnsafeArenaSwap(&other->placement_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Strategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Strategy

// repeated .caffe.PlacementGroup placement_group = 1;
int Strategy::placement_group_size() const {
  return placement_group_.size();
}
void Strategy::clear_placement_group() {
  placement_group_.Clear();
}
const ::caffe::PlacementGroup& Strategy::placement_group(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Strategy.placement_group)
  return placement_group_.Get(index);
}
::caffe::PlacementGroup* Strategy::mutable_placement_group(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.Strategy.placement_group)
  return placement_group_.Mutable(index);
}
::caffe::PlacementGroup* Strategy::add_placement_group() {
  // @@protoc_insertion_point(field_add:caffe.Strategy.placement_group)
  return placement_group_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup >*
Strategy::mutable_placement_group() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Strategy.placement_group)
  return &placement_group_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup >&
Strategy::placement_group() const {
  // @@protoc_insertion_point(field_list:caffe.Strategy.placement_group)
  return placement_group_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverProto::_default_regularization_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverProto::kTrainNetFieldNumber;
const int SolverProto::kTestNetFieldNumber;
const int SolverProto::kResourceFieldNumber;
const int SolverProto::kStrategyFieldNumber;
const int SolverProto::kTrainStateFieldNumber;
const int SolverProto::kTestStateFieldNumber;
const int SolverProto::kTestIterFieldNumber;
const int SolverProto::kTestIntervalFieldNumber;
const int SolverProto::kTestComputeLossFieldNumber;
const int SolverProto::kTestInitializationFieldNumber;
const int SolverProto::kBaseLrFieldNumber;
const int SolverProto::kDisplayFieldNumber;
const int SolverProto::kAverageLossFieldNumber;
const int SolverProto::kMaxIterFieldNumber;
const int SolverProto::kLrPolicyFieldNumber;
const int SolverProto::kGammaFieldNumber;
const int SolverProto::kPowerFieldNumber;
const int SolverProto::kMomentumFieldNumber;
const int SolverProto::kWeightDecayFieldNumber;
const int SolverProto::kRegularizationTypeFieldNumber;
const int SolverProto::kStepsizeFieldNumber;
const int SolverProto::kStepvalueFieldNumber;
const int SolverProto::kClipGradientsFieldNumber;
const int SolverProto::kSnapshotFieldNumber;
const int SolverProto::kSnapshotPrefixFieldNumber;
const int SolverProto::kSnapshotDiffFieldNumber;
const int SolverProto::kRandomSeedFieldNumber;
const int SolverProto::kMachineIdFieldNumber;
const int SolverProto::kSolverTypeFieldNumber;
const int SolverProto::kDeltaFieldNumber;
const int SolverProto::kDebugInfoFieldNumber;
const int SolverProto::kSnapshotAfterTrainFieldNumber;
const int SolverProto::kNumDataParamCopyFieldNumber;
const int SolverProto::kNumModelParamCopyFieldNumber;
const int SolverProto::kNumBatchPerSyncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverProto::SolverProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverProto)
}
SolverProto::SolverProto(const SolverProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      test_net_(from.test_net_),
      test_state_(from.test_state_),
      test_iter_(from.test_iter_),
      stepvalue_(from.stepvalue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_train_net()) {
    train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
  }
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resource()) {
    resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strategy()) {
    strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lr_policy()) {
    lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
  }
  regularization_type_.UnsafeSetDefault(&SolverProto::_default_regularization_type_.get());
  if (from.has_regularization_type()) {
    regularization_type_.AssignWithDefault(&SolverProto::_default_regularization_type_.get(), from.regularization_type_);
  }
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snapshot_prefix()) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  if (from.has_train_state()) {
    train_state_ = new ::caffe::NetState(*from.train_state_);
  } else {
    train_state_ = NULL;
  }
  ::memcpy(&test_interval_, &from.test_interval_,
    reinterpret_cast<char*>(&num_model_param_copy_) -
    reinterpret_cast<char*>(&test_interval_) + sizeof(num_model_param_copy_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverProto)
}

void SolverProto::SharedCtor() {
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.UnsafeSetDefault(&SolverProto::_default_regularization_type_.get());
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&train_state_, 0, reinterpret_cast<char*>(&solver_type_) -
    reinterpret_cast<char*>(&train_state_) + sizeof(solver_type_));
  num_batch_per_sync_ = 1;
  average_loss_ = 1;
  test_initialization_ = true;
  snapshot_after_train_ = true;
  clip_gradients_ = -1;
  delta_ = 1e-08f;
  random_seed_ = GOOGLE_LONGLONG(-1);
  num_data_param_copy_ = 1;
  num_model_param_copy_ = 1;
  _cached_size_ = 0;
}

SolverProto::~SolverProto() {
  // @@protoc_insertion_point(destructor:caffe.SolverProto)
  SharedDtor();
}

void SolverProto::SharedDtor() {
  train_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strategy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(&SolverProto::_default_regularization_type_.get());
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete train_state_;
  }
}

void SolverProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12].descriptor;
}

const SolverProto& SolverProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

SolverProto* SolverProto::New(::google::protobuf::Arena* arena) const {
  SolverProto* n = new SolverProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverProto)
  test_net_.Clear();
  test_state_.Clear();
  test_iter_.Clear();
  stepvalue_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_train_net()) {
      GOOGLE_DCHECK(!train_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*train_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_resource()) {
      GOOGLE_DCHECK(!resource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resource_.UnsafeRawStringPointer())->clear();
    }
    if (has_strategy()) {
      GOOGLE_DCHECK(!strategy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strategy_.UnsafeRawStringPointer())->clear();
    }
    if (has_lr_policy()) {
      GOOGLE_DCHECK(!lr_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lr_policy_.UnsafeRawStringPointer())->clear();
    }
    if (has_regularization_type()) {
      GOOGLE_DCHECK(!regularization_type_.IsDefault(&SolverProto::_default_regularization_type_.get()));
      (*regularization_type_.UnsafeRawStringPointer())->assign(*&SolverProto::_default_regularization_type_.get());
    }
    if (has_snapshot_prefix()) {
      GOOGLE_DCHECK(!snapshot_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snapshot_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_train_state()) {
      GOOGLE_DCHECK(train_state_ != NULL);
      train_state_->::caffe::NetState::Clear();
    }
  }
  test_interval_ = 0;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&base_lr_, 0, reinterpret_cast<char*>(&stepsize_) -
      reinterpret_cast<char*>(&base_lr_) + sizeof(stepsize_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&test_compute_loss_, 0, reinterpret_cast<char*>(&solver_type_) -
      reinterpret_cast<char*>(&test_compute_loss_) + sizeof(solver_type_));
    num_batch_per_sync_ = 1;
    average_loss_ = 1;
  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    test_initialization_ = true;
    snapshot_after_train_ = true;
    clip_gradients_ = -1;
    delta_ = 1e-08f;
    random_seed_ = GOOGLE_LONGLONG(-1);
    num_data_param_copy_ = 1;
    num_model_param_copy_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string train_net = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_net().data(), this->train_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.train_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string test_net = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net(this->test_net_size() - 1).data(),
            this->test_net(this->test_net_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.test_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string resource = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.resource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string strategy = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strategy().data(), this->strategy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.strategy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState train_state = 26;
      case 26: {
        if (tag == 210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetState test_state = 27;
      case 27: {
        if (tag == 218u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_test_state()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated int32 test_iter = 28;
      case 28: {
        if (tag == 224u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224u, input, this->mutable_test_iter())));
        } else if (tag == 226u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_test_iter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 test_interval = 29 [default = 0];
      case 29: {
        if (tag == 232u) {
          set_has_test_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_compute_loss = 30 [default = false];
      case 30: {
        if (tag == 240u) {
          set_has_test_compute_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_compute_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_initialization = 32 [default = true];
      case 32: {
        if (tag == 256u) {
          set_has_test_initialization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float base_lr = 33;
      case 33: {
        if (tag == 269u) {
          set_has_base_lr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display = 34;
      case 34: {
        if (tag == 272u) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 average_loss = 35 [default = 1];
      case 35: {
        if (tag == 280u) {
          set_has_average_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 36;
      case 36: {
        if (tag == 288u) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lr_policy = 37;
      case 37: {
        if (tag == 298u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.lr_policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma = 39;
      case 39: {
        if (tag == 317u) {
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float power = 40;
      case 40: {
        if (tag == 325u) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum = 41;
      case 41: {
        if (tag == 333u) {
          set_has_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_decay = 42;
      case 42: {
        if (tag == 341u) {
          set_has_weight_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string regularization_type = 43 [default = "L2"];
      case 43: {
        if (tag == 346u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularization_type().data(), this->regularization_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.regularization_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stepsize = 44;
      case 44: {
        if (tag == 352u) {
          set_has_stepsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stepvalue = 45;
      case 45: {
        if (tag == 360u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 360u, input, this->mutable_stepvalue())));
        } else if (tag == 362u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float clip_gradients = 46 [default = -1];
      case 46: {
        if (tag == 373u) {
          set_has_clip_gradients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_gradients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 snapshot = 47 [default = 0];
      case 47: {
        if (tag == 376u) {
          set_has_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snapshot_prefix = 48;
      case 48: {
        if (tag == 386u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverProto.snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snapshot_diff = 49 [default = false];
      case 49: {
        if (tag == 392u) {
          set_has_snapshot_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 random_seed = 52 [default = -1];
      case 52: {
        if (tag == 416u) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 machine_id = 56 [default = 0];
      case 56: {
        if (tag == 448u) {
          set_has_machine_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
      case 57: {
        if (tag == 456u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverProto_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::caffe::SolverProto_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(57, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta = 59 [default = 1e-08];
      case 59: {
        if (tag == 477u) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 60 [default = false];
      case 60: {
        if (tag == 480u) {
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snapshot_after_train = 62 [default = true];
      case 62: {
        if (tag == 496u) {
          set_has_snapshot_after_train();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_after_train_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_data_param_copy = 63 [default = 1];
      case 63: {
        if (tag == 504u) {
          set_has_num_data_param_copy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_data_param_copy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_model_param_copy = 64 [default = 1];
      case 64: {
        if (tag == 512u) {
          set_has_num_model_param_copy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_model_param_copy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_batch_per_sync = 65 [default = 1];
      case 65: {
        if (tag == 520u) {
          set_has_num_batch_per_sync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_batch_per_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverProto)
  return false;
#undef DO_
}

void SolverProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverProto)
  // required string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.train_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_net(), output);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.test_net");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(i), output);
  }

  // required string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource(), output);
  }

  // required string strategy = 4;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.strategy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->strategy(), output);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->train_state_, output);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->test_state(i), output);
  }

  // repeated int32 test_iter = 28;
  for (int i = 0; i < this->test_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->test_iter(i), output);
  }

  // optional int32 test_interval = 29 [default = 0];
  if (has_test_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->test_interval(), output);
  }

  // optional bool test_compute_loss = 30 [default = false];
  if (has_test_compute_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->test_compute_loss(), output);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
  }

  // optional float base_lr = 33;
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->base_lr(), output);
  }

  // optional int32 display = 34;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->display(), output);
  }

  // optional int32 average_loss = 35 [default = 1];
  if (has_average_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->average_loss(), output);
  }

  // optional int32 max_iter = 36;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->max_iter(), output);
  }

  // optional string lr_policy = 37;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->lr_policy(), output);
  }

  // optional float gamma = 39;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->gamma(), output);
  }

  // optional float power = 40;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->power(), output);
  }

  // optional float momentum = 41;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->momentum(), output);
  }

  // optional float weight_decay = 42;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->weight_decay(), output);
  }

  // optional string regularization_type = 43 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->regularization_type(), output);
  }

  // optional int32 stepsize = 44;
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->stepsize(), output);
  }

  // repeated int32 stepvalue = 45;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      45, this->stepvalue(i), output);
  }

  // optional float clip_gradients = 46 [default = -1];
  if (has_clip_gradients()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->clip_gradients(), output);
  }

  // optional int32 snapshot = 47 [default = 0];
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 48;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->snapshot_prefix(), output);
  }

  // optional bool snapshot_diff = 49 [default = false];
  if (has_snapshot_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->snapshot_diff(), output);
  }

  // optional int64 random_seed = 52 [default = -1];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->random_seed(), output);
  }

  // required int32 machine_id = 56 [default = 0];
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->machine_id(), output);
  }

  // optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      57, this->solver_type(), output);
  }

  // optional float delta = 59 [default = 1e-08];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->delta(), output);
  }

  // optional bool debug_info = 60 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->debug_info(), output);
  }

  // optional bool snapshot_after_train = 62 [default = true];
  if (has_snapshot_after_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->snapshot_after_train(), output);
  }

  // optional int32 num_data_param_copy = 63 [default = 1];
  if (has_num_data_param_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->num_data_param_copy(), output);
  }

  // optional int32 num_model_param_copy = 64 [default = 1];
  if (has_num_model_param_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->num_model_param_copy(), output);
  }

  // optional int32 num_batch_per_sync = 65 [default = 1];
  if (has_num_batch_per_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->num_batch_per_sync(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverProto)
}

::google::protobuf::uint8* SolverProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverProto)
  // required string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.train_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.test_net");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_net(i), target);
  }

  // required string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  // required string strategy = 4;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.strategy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strategy(), target);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->train_state_, false, target);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->test_state(i), false, target);
  }

  // repeated int32 test_iter = 28;
  for (int i = 0; i < this->test_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->test_iter(i), target);
  }

  // optional int32 test_interval = 29 [default = 0];
  if (has_test_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->test_interval(), target);
  }

  // optional bool test_compute_loss = 30 [default = false];
  if (has_test_compute_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->test_compute_loss(), target);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
  }

  // optional float base_lr = 33;
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->base_lr(), target);
  }

  // optional int32 display = 34;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->display(), target);
  }

  // optional int32 average_loss = 35 [default = 1];
  if (has_average_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->average_loss(), target);
  }

  // optional int32 max_iter = 36;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->max_iter(), target);
  }

  // optional string lr_policy = 37;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->lr_policy(), target);
  }

  // optional float gamma = 39;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->gamma(), target);
  }

  // optional float power = 40;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->power(), target);
  }

  // optional float momentum = 41;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->momentum(), target);
  }

  // optional float weight_decay = 42;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->weight_decay(), target);
  }

  // optional string regularization_type = 43 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->regularization_type(), target);
  }

  // optional int32 stepsize = 44;
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->stepsize(), target);
  }

  // repeated int32 stepvalue = 45;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(45, this->stepvalue(i), target);
  }

  // optional float clip_gradients = 46 [default = -1];
  if (has_clip_gradients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->clip_gradients(), target);
  }

  // optional int32 snapshot = 47 [default = 0];
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 48;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverProto.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 49 [default = false];
  if (has_snapshot_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->snapshot_diff(), target);
  }

  // optional int64 random_seed = 52 [default = -1];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->random_seed(), target);
  }

  // required int32 machine_id = 56 [default = 0];
  if (has_machine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->machine_id(), target);
  }

  // optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
  if (has_solver_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      57, this->solver_type(), target);
  }

  // optional float delta = 59 [default = 1e-08];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(59, this->delta(), target);
  }

  // optional bool debug_info = 60 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->debug_info(), target);
  }

  // optional bool snapshot_after_train = 62 [default = true];
  if (has_snapshot_after_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->snapshot_after_train(), target);
  }

  // optional int32 num_data_param_copy = 63 [default = 1];
  if (has_num_data_param_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->num_data_param_copy(), target);
  }

  // optional int32 num_model_param_copy = 64 [default = 1];
  if (has_num_model_param_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->num_model_param_copy(), target);
  }

  // optional int32 num_batch_per_sync = 65 [default = 1];
  if (has_num_batch_per_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->num_batch_per_sync(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverProto)
  return target;
}

size_t SolverProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.SolverProto)
  size_t total_size = 0;

  if (has_train_net()) {
    // required string train_net = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->train_net());
  }

  if (has_resource()) {
    // required string resource = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource());
  }

  if (has_strategy()) {
    // required string strategy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strategy());
  }

  if (has_machine_id()) {
    // required int32 machine_id = 56 [default = 0];
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_id());
  }

  return total_size;
}
size_t SolverProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00100007) ^ 0x00100007) == 0) {  // All required fields are present.
    // required string train_net = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->train_net());

    // required string resource = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource());

    // required string strategy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strategy());

    // required int32 machine_id = 56 [default = 0];
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string test_net = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->test_net_size());
  for (int i = 0; i < this->test_net_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_net(i));
  }

  // repeated .caffe.NetState test_state = 27;
  {
    unsigned int count = this->test_state_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_state(i));
    }
  }

  // repeated int32 test_iter = 28;
  {
    size_t data_size = 0;
    unsigned int count = this->test_iter_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test_iter(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->test_iter_size());
    total_size += data_size;
  }

  // repeated int32 stepvalue = 45;
  {
    size_t data_size = 0;
    unsigned int count = this->stepvalue_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stepvalue(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->stepvalue_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string lr_policy = 37;
    if (has_lr_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional string regularization_type = 43 [default = "L2"];
    if (has_regularization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularization_type());
    }

    // optional string snapshot_prefix = 48;
    if (has_snapshot_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional .caffe.NetState train_state = 26;
    if (has_train_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_state_);
    }

    // optional int32 test_interval = 29 [default = 0];
    if (has_test_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float base_lr = 33;
    if (has_base_lr()) {
      total_size += 2 + 4;
    }

    // optional int32 display = 34;
    if (has_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 max_iter = 36;
    if (has_max_iter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float gamma = 39;
    if (has_gamma()) {
      total_size += 2 + 4;
    }

    // optional float power = 40;
    if (has_power()) {
      total_size += 2 + 4;
    }

    // optional float momentum = 41;
    if (has_momentum()) {
      total_size += 2 + 4;
    }

    // optional float weight_decay = 42;
    if (has_weight_decay()) {
      total_size += 2 + 4;
    }

    // optional int32 stepsize = 44;
    if (has_stepsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional bool test_compute_loss = 30 [default = false];
    if (has_test_compute_loss()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_diff = 49 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }

    // optional bool debug_info = 60 [default = false];
    if (has_debug_info()) {
      total_size += 2 + 1;
    }

    // optional int32 snapshot = 47 [default = 0];
    if (has_snapshot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

  }
  if (_has_bits_[16 / 32] & 14680064u) {
    // optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
    if (has_solver_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

    // optional int32 num_batch_per_sync = 65 [default = 1];
    if (has_num_batch_per_sync()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_batch_per_sync());
    }

    // optional int32 average_loss = 35 [default = 1];
    if (has_average_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional bool test_initialization = 32 [default = true];
    if (has_test_initialization()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 62 [default = true];
    if (has_snapshot_after_train()) {
      total_size += 2 + 1;
    }

    // optional float clip_gradients = 46 [default = -1];
    if (has_clip_gradients()) {
      total_size += 2 + 4;
    }

    // optional float delta = 59 [default = 1e-08];
    if (has_delta()) {
      total_size += 2 + 4;
    }

    // optional int64 random_seed = 52 [default = -1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->random_seed());
    }

    // optional int32 num_data_param_copy = 63 [default = 1];
    if (has_num_data_param_copy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_data_param_copy());
    }

    // optional int32 num_model_param_copy = 64 [default = 1];
    if (has_num_model_param_copy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_model_param_copy());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverProto)
    MergeFrom(*source);
  }
}

void SolverProto::MergeFrom(const SolverProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test_net_.MergeFrom(from.test_net_);
  test_state_.MergeFrom(from.test_state_);
  test_iter_.MergeFrom(from.test_iter_);
  stepvalue_.MergeFrom(from.stepvalue_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_train_net()) {
      set_has_train_net();
      train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
    }
    if (from.has_resource()) {
      set_has_resource();
      resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
    }
    if (from.has_strategy()) {
      set_has_strategy();
      strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
    }
    if (from.has_lr_policy()) {
      set_has_lr_policy();
      lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (from.has_regularization_type()) {
      set_has_regularization_type();
      regularization_type_.AssignWithDefault(&SolverProto::_default_regularization_type_.get(), from.regularization_type_);
    }
    if (from.has_snapshot_prefix()) {
      set_has_snapshot_prefix();
      snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (from.has_train_state()) {
      mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
    }
    if (from.has_test_interval()) {
      set_test_interval(from.test_interval());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
  }
  if (from._has_bits_[16 / 32] & 16711680u) {
    if (from.has_test_compute_loss()) {
      set_test_compute_loss(from.test_compute_loss());
    }
    if (from.has_snapshot_diff()) {
      set_snapshot_diff(from.snapshot_diff());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_solver_type()) {
      set_solver_type(from.solver_type());
    }
    if (from.has_num_batch_per_sync()) {
      set_num_batch_per_sync(from.num_batch_per_sync());
    }
    if (from.has_average_loss()) {
      set_average_loss(from.average_loss());
    }
  }
  if (from._has_bits_[24 / 32] & 2130706432u) {
    if (from.has_test_initialization()) {
      set_test_initialization(from.test_initialization());
    }
    if (from.has_snapshot_after_train()) {
      set_snapshot_after_train(from.snapshot_after_train());
    }
    if (from.has_clip_gradients()) {
      set_clip_gradients(from.clip_gradients());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_num_data_param_copy()) {
      set_num_data_param_copy(from.num_data_param_copy());
    }
    if (from.has_num_model_param_copy()) {
      set_num_model_param_copy(from.num_model_param_copy());
    }
  }
}

void SolverProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverProto::CopyFrom(const SolverProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00100007) != 0x00100007) return false;
  return true;
}

void SolverProto::Swap(SolverProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverProto::InternalSwap(SolverProto* other) {
  test_net_.UnsafeArenaSwap(&other->test_net_);
  test_state_.UnsafeArenaSwap(&other->test_state_);
  test_iter_.UnsafeArenaSwap(&other->test_iter_);
  stepvalue_.UnsafeArenaSwap(&other->stepvalue_);
  train_net_.Swap(&other->train_net_);
  resource_.Swap(&other->resource_);
  strategy_.Swap(&other->strategy_);
  lr_policy_.Swap(&other->lr_policy_);
  regularization_type_.Swap(&other->regularization_type_);
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  std::swap(train_state_, other->train_state_);
  std::swap(test_interval_, other->test_interval_);
  std::swap(base_lr_, other->base_lr_);
  std::swap(display_, other->display_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(momentum_, other->momentum_);
  std::swap(weight_decay_, other->weight_decay_);
  std::swap(stepsize_, other->stepsize_);
  std::swap(test_compute_loss_, other->test_compute_loss_);
  std::swap(snapshot_diff_, other->snapshot_diff_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(snapshot_, other->snapshot_);
  std::swap(machine_id_, other->machine_id_);
  std::swap(solver_type_, other->solver_type_);
  std::swap(num_batch_per_sync_, other->num_batch_per_sync_);
  std::swap(average_loss_, other->average_loss_);
  std::swap(test_initialization_, other->test_initialization_);
  std::swap(snapshot_after_train_, other->snapshot_after_train_);
  std::swap(clip_gradients_, other->clip_gradients_);
  std::swap(delta_, other->delta_);
  std::swap(random_seed_, other->random_seed_);
  std::swap(num_data_param_copy_, other->num_data_param_copy_);
  std::swap(num_model_param_copy_, other->num_model_param_copy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverProto

// required string train_net = 1;
bool SolverProto::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverProto::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverProto::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverProto::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
const ::std::string& SolverProto::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.train_net)
  return train_net_.GetNoArena();
}
void SolverProto::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.train_net)
}
#if LANG_CXX11
void SolverProto::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.train_net)
}
#endif
void SolverProto::set_train_net(const char* value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.train_net)
}
void SolverProto::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.train_net)
}
::std::string* SolverProto::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverProto::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverProto::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.train_net)
}

// repeated string test_net = 2;
int SolverProto::test_net_size() const {
  return test_net_.size();
}
void SolverProto::clear_test_net() {
  test_net_.Clear();
}
const ::std::string& SolverProto::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_net)
  return test_net_.Get(index);
}
::std::string* SolverProto::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.test_net)
  return test_net_.Mutable(index);
}
void SolverProto::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_net)
  test_net_.Mutable(index)->assign(value);
}
void SolverProto::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.test_net)
}
void SolverProto::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.test_net)
}
::std::string* SolverProto::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverProto.test_net)
  return test_net_.Add();
}
void SolverProto::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverProto.test_net)
}
void SolverProto::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverProto.test_net)
}
void SolverProto::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverProto.test_net)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverProto::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.test_net)
  return test_net_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SolverProto::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.test_net)
  return &test_net_;
}

// required string resource = 3;
bool SolverProto::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverProto::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverProto::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverProto::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource();
}
const ::std::string& SolverProto::resource() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.resource)
  return resource_.GetNoArena();
}
void SolverProto::set_resource(const ::std::string& value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.resource)
}
#if LANG_CXX11
void SolverProto::set_resource(::std::string&& value) {
  set_has_resource();
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.resource)
}
#endif
void SolverProto::set_resource(const char* value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.resource)
}
void SolverProto::set_resource(const char* value, size_t size) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.resource)
}
::std::string* SolverProto::mutable_resource() {
  set_has_resource();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverProto::release_resource() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.resource)
  clear_has_resource();
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverProto::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.resource)
}

// required string strategy = 4;
bool SolverProto::has_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverProto::set_has_strategy() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverProto::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverProto::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strategy();
}
const ::std::string& SolverProto::strategy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.strategy)
  return strategy_.GetNoArena();
}
void SolverProto::set_strategy(const ::std::string& value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.strategy)
}
#if LANG_CXX11
void SolverProto::set_strategy(::std::string&& value) {
  set_has_strategy();
  strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.strategy)
}
#endif
void SolverProto::set_strategy(const char* value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.strategy)
}
void SolverProto::set_strategy(const char* value, size_t size) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.strategy)
}
::std::string* SolverProto::mutable_strategy() {
  set_has_strategy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverProto::release_strategy() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.strategy)
  clear_has_strategy();
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverProto::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    set_has_strategy();
  } else {
    clear_has_strategy();
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.strategy)
}

// optional .caffe.NetState train_state = 26;
bool SolverProto::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SolverProto::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
void SolverProto::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void SolverProto::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
const ::caffe::NetState& SolverProto::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.train_state)
  return train_state_ != NULL ? *train_state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* SolverProto::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.train_state)
  return train_state_;
}
::caffe::NetState* SolverProto::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
void SolverProto::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.train_state)
}

// repeated .caffe.NetState test_state = 27;
int SolverProto::test_state_size() const {
  return test_state_.size();
}
void SolverProto::clear_test_state() {
  test_state_.Clear();
}
const ::caffe::NetState& SolverProto::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_state)
  return test_state_.Get(index);
}
::caffe::NetState* SolverProto::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.test_state)
  return test_state_.Mutable(index);
}
::caffe::NetState* SolverProto::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverProto.test_state)
  return test_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverProto::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.test_state)
  return &test_state_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverProto::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.test_state)
  return test_state_;
}

// repeated int32 test_iter = 28;
int SolverProto::test_iter_size() const {
  return test_iter_.size();
}
void SolverProto::clear_test_iter() {
  test_iter_.Clear();
}
::google::protobuf::int32 SolverProto::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_iter)
  return test_iter_.Get(index);
}
void SolverProto::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_iter)
}
void SolverProto::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverProto.test_iter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverProto::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.test_iter)
  return test_iter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverProto::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 29 [default = 0];
bool SolverProto::has_test_interval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SolverProto::set_has_test_interval() {
  _has_bits_[0] |= 0x00000080u;
}
void SolverProto::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000080u;
}
void SolverProto::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
::google::protobuf::int32 SolverProto::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_interval)
  return test_interval_;
}
void SolverProto::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_interval)
}

// optional bool test_compute_loss = 30 [default = false];
bool SolverProto::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SolverProto::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00010000u;
}
void SolverProto::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00010000u;
}
void SolverProto::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
bool SolverProto::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_compute_loss)
  return test_compute_loss_;
}
void SolverProto::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
bool SolverProto::has_test_initialization() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SolverProto::set_has_test_initialization() {
  _has_bits_[0] |= 0x01000000u;
}
void SolverProto::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x01000000u;
}
void SolverProto::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
bool SolverProto::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_initialization)
  return test_initialization_;
}
void SolverProto::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_initialization)
}

// optional float base_lr = 33;
bool SolverProto::has_base_lr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SolverProto::set_has_base_lr() {
  _has_bits_[0] |= 0x00000100u;
}
void SolverProto::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000100u;
}
void SolverProto::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
float SolverProto::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.base_lr)
  return base_lr_;
}
void SolverProto::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.base_lr)
}

// optional int32 display = 34;
bool SolverProto::has_display() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SolverProto::set_has_display() {
  _has_bits_[0] |= 0x00000200u;
}
void SolverProto::clear_has_display() {
  _has_bits_[0] &= ~0x00000200u;
}
void SolverProto::clear_display() {
  display_ = 0;
  clear_has_display();
}
::google::protobuf::int32 SolverProto::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.display)
  return display_;
}
void SolverProto::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.display)
}

// optional int32 average_loss = 35 [default = 1];
bool SolverProto::has_average_loss() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SolverProto::set_has_average_loss() {
  _has_bits_[0] |= 0x00800000u;
}
void SolverProto::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00800000u;
}
void SolverProto::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
::google::protobuf::int32 SolverProto::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.average_loss)
  return average_loss_;
}
void SolverProto::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.average_loss)
}

// optional int32 max_iter = 36;
bool SolverProto::has_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SolverProto::set_has_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
void SolverProto::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
void SolverProto::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
::google::protobuf::int32 SolverProto::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.max_iter)
  return max_iter_;
}
void SolverProto::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.max_iter)
}

// optional string lr_policy = 37;
bool SolverProto::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverProto::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverProto::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverProto::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
const ::std::string& SolverProto::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.lr_policy)
  return lr_policy_.GetNoArena();
}
void SolverProto::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.lr_policy)
}
#if LANG_CXX11
void SolverProto::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.lr_policy)
}
#endif
void SolverProto::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.lr_policy)
}
void SolverProto::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.lr_policy)
}
::std::string* SolverProto::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverProto::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverProto::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.lr_policy)
}

// optional float gamma = 39;
bool SolverProto::has_gamma() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SolverProto::set_has_gamma() {
  _has_bits_[0] |= 0x00000800u;
}
void SolverProto::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000800u;
}
void SolverProto::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
float SolverProto::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.gamma)
  return gamma_;
}
void SolverProto::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.gamma)
}

// optional float power = 40;
bool SolverProto::has_power() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SolverProto::set_has_power() {
  _has_bits_[0] |= 0x00001000u;
}
void SolverProto::clear_has_power() {
  _has_bits_[0] &= ~0x00001000u;
}
void SolverProto::clear_power() {
  power_ = 0;
  clear_has_power();
}
float SolverProto::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.power)
  return power_;
}
void SolverProto::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.power)
}

// optional float momentum = 41;
bool SolverProto::has_momentum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SolverProto::set_has_momentum() {
  _has_bits_[0] |= 0x00002000u;
}
void SolverProto::clear_has_momentum() {
  _has_bits_[0] &= ~0x00002000u;
}
void SolverProto::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
float SolverProto::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.momentum)
  return momentum_;
}
void SolverProto::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.momentum)
}

// optional float weight_decay = 42;
bool SolverProto::has_weight_decay() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SolverProto::set_has_weight_decay() {
  _has_bits_[0] |= 0x00004000u;
}
void SolverProto::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00004000u;
}
void SolverProto::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
float SolverProto::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.weight_decay)
  return weight_decay_;
}
void SolverProto::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.weight_decay)
}

// optional string regularization_type = 43 [default = "L2"];
bool SolverProto::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverProto::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverProto::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverProto::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&SolverProto::_default_regularization_type_.get());
  clear_has_regularization_type();
}
const ::std::string& SolverProto::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.regularization_type)
  return regularization_type_.GetNoArena();
}
void SolverProto::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverProto::_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.regularization_type)
}
#if LANG_CXX11
void SolverProto::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &SolverProto::_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.regularization_type)
}
#endif
void SolverProto::set_regularization_type(const char* value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverProto::_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.regularization_type)
}
void SolverProto::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverProto::_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.regularization_type)
}
::std::string* SolverProto::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.regularization_type)
  return regularization_type_.MutableNoArena(&SolverProto::_default_regularization_type_.get());
}
::std::string* SolverProto::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(&SolverProto::_default_regularization_type_.get());
}
void SolverProto::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&SolverProto::_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.regularization_type)
}

// optional int32 stepsize = 44;
bool SolverProto::has_stepsize() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SolverProto::set_has_stepsize() {
  _has_bits_[0] |= 0x00008000u;
}
void SolverProto::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00008000u;
}
void SolverProto::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
::google::protobuf::int32 SolverProto::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.stepsize)
  return stepsize_;
}
void SolverProto::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.stepsize)
}

// repeated int32 stepvalue = 45;
int SolverProto::stepvalue_size() const {
  return stepvalue_.size();
}
void SolverProto::clear_stepvalue() {
  stepvalue_.Clear();
}
::google::protobuf::int32 SolverProto::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.stepvalue)
  return stepvalue_.Get(index);
}
void SolverProto::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.stepvalue)
}
void SolverProto::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverProto.stepvalue)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverProto::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.stepvalue)
  return stepvalue_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverProto::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 46 [default = -1];
bool SolverProto::has_clip_gradients() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SolverProto::set_has_clip_gradients() {
  _has_bits_[0] |= 0x04000000u;
}
void SolverProto::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x04000000u;
}
void SolverProto::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
float SolverProto::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.clip_gradients)
  return clip_gradients_;
}
void SolverProto::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.clip_gradients)
}

// optional int32 snapshot = 47 [default = 0];
bool SolverProto::has_snapshot() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SolverProto::set_has_snapshot() {
  _has_bits_[0] |= 0x00080000u;
}
void SolverProto::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00080000u;
}
void SolverProto::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
::google::protobuf::int32 SolverProto::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot)
  return snapshot_;
}
void SolverProto::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot)
}

// optional string snapshot_prefix = 48;
bool SolverProto::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SolverProto::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000020u;
}
void SolverProto::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000020u;
}
void SolverProto::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
const ::std::string& SolverProto::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SolverProto::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot_prefix)
}
#if LANG_CXX11
void SolverProto::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.snapshot_prefix)
}
#endif
void SolverProto::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.snapshot_prefix)
}
void SolverProto::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.snapshot_prefix)
}
::std::string* SolverProto::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverProto::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverProto::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.snapshot_prefix)
}

// optional bool snapshot_diff = 49 [default = false];
bool SolverProto::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SolverProto::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00020000u;
}
void SolverProto::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00020000u;
}
void SolverProto::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
bool SolverProto::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot_diff)
  return snapshot_diff_;
}
void SolverProto::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot_diff)
}

// optional int64 random_seed = 52 [default = -1];
bool SolverProto::has_random_seed() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SolverProto::set_has_random_seed() {
  _has_bits_[0] |= 0x10000000u;
}
void SolverProto::clear_has_random_seed() {
  _has_bits_[0] &= ~0x10000000u;
}
void SolverProto::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
::google::protobuf::int64 SolverProto::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.random_seed)
  return random_seed_;
}
void SolverProto::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.random_seed)
}

// required int32 machine_id = 56 [default = 0];
bool SolverProto::has_machine_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SolverProto::set_has_machine_id() {
  _has_bits_[0] |= 0x00100000u;
}
void SolverProto::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void SolverProto::clear_machine_id() {
  machine_id_ = 0;
  clear_has_machine_id();
}
::google::protobuf::int32 SolverProto::machine_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.machine_id)
  return machine_id_;
}
void SolverProto::set_machine_id(::google::protobuf::int32 value) {
  set_has_machine_id();
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.machine_id)
}

// optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
bool SolverProto::has_solver_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SolverProto::set_has_solver_type() {
  _has_bits_[0] |= 0x00200000u;
}
void SolverProto::clear_has_solver_type() {
  _has_bits_[0] &= ~0x00200000u;
}
void SolverProto::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
::caffe::SolverProto_SolverType SolverProto::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.solver_type)
  return static_cast< ::caffe::SolverProto_SolverType >(solver_type_);
}
void SolverProto::set_solver_type(::caffe::SolverProto_SolverType value) {
  assert(::caffe::SolverProto_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.solver_type)
}

// optional float delta = 59 [default = 1e-08];
bool SolverProto::has_delta() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SolverProto::set_has_delta() {
  _has_bits_[0] |= 0x08000000u;
}
void SolverProto::clear_has_delta() {
  _has_bits_[0] &= ~0x08000000u;
}
void SolverProto::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
float SolverProto::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.delta)
  return delta_;
}
void SolverProto::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.delta)
}

// optional bool debug_info = 60 [default = false];
bool SolverProto::has_debug_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SolverProto::set_has_debug_info() {
  _has_bits_[0] |= 0x00040000u;
}
void SolverProto::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00040000u;
}
void SolverProto::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool SolverProto::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.debug_info)
  return debug_info_;
}
void SolverProto::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.debug_info)
}

// optional bool snapshot_after_train = 62 [default = true];
bool SolverProto::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SolverProto::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x02000000u;
}
void SolverProto::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x02000000u;
}
void SolverProto::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
bool SolverProto::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot_after_train)
  return snapshot_after_train_;
}
void SolverProto::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot_after_train)
}

// optional int32 num_data_param_copy = 63 [default = 1];
bool SolverProto::has_num_data_param_copy() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SolverProto::set_has_num_data_param_copy() {
  _has_bits_[0] |= 0x20000000u;
}
void SolverProto::clear_has_num_data_param_copy() {
  _has_bits_[0] &= ~0x20000000u;
}
void SolverProto::clear_num_data_param_copy() {
  num_data_param_copy_ = 1;
  clear_has_num_data_param_copy();
}
::google::protobuf::int32 SolverProto::num_data_param_copy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.num_data_param_copy)
  return num_data_param_copy_;
}
void SolverProto::set_num_data_param_copy(::google::protobuf::int32 value) {
  set_has_num_data_param_copy();
  num_data_param_copy_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.num_data_param_copy)
}

// optional int32 num_model_param_copy = 64 [default = 1];
bool SolverProto::has_num_model_param_copy() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SolverProto::set_has_num_model_param_copy() {
  _has_bits_[0] |= 0x40000000u;
}
void SolverProto::clear_has_num_model_param_copy() {
  _has_bits_[0] &= ~0x40000000u;
}
void SolverProto::clear_num_model_param_copy() {
  num_model_param_copy_ = 1;
  clear_has_num_model_param_copy();
}
::google::protobuf::int32 SolverProto::num_model_param_copy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.num_model_param_copy)
  return num_model_param_copy_;
}
void SolverProto::set_num_model_param_copy(::google::protobuf::int32 value) {
  set_has_num_model_param_copy();
  num_model_param_copy_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.num_model_param_copy)
}

// optional int32 num_batch_per_sync = 65 [default = 1];
bool SolverProto::has_num_batch_per_sync() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SolverProto::set_has_num_batch_per_sync() {
  _has_bits_[0] |= 0x00400000u;
}
void SolverProto::clear_has_num_batch_per_sync() {
  _has_bits_[0] &= ~0x00400000u;
}
void SolverProto::clear_num_batch_per_sync() {
  num_batch_per_sync_ = 1;
  clear_has_num_batch_per_sync();
}
::google::protobuf::int32 SolverProto::num_batch_per_sync() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.num_batch_per_sync)
  return num_batch_per_sync_;
}
void SolverProto::set_num_batch_per_sync(::google::protobuf::int32 value) {
  set_has_num_batch_per_sync();
  num_batch_per_sync_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.num_batch_per_sync)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}
SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_learned_net()) {
    learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
  }
  ::memcpy(&iter_, &from.iter_,
    reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iter_, 0, reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13].descriptor;
}

const SolverState& SolverState::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
  SolverState* n = new SolverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
  if (has_learned_net()) {
    GOOGLE_DCHECK(!learned_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*learned_net_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&iter_, 0, reinterpret_cast<char*>(&current_step_) -
      reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (tag == 8u) {
          set_has_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.learned_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_step = 4 [default = 0];
      case 4: {
        if (tag == 32u) {
          set_has_current_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

    // optional int32 current_step = 4 [default = 0];
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_learned_net()) {
      set_has_learned_net();
      learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (from.has_iter()) {
      set_iter(from.iter());
    }
    if (from.has_current_step()) {
      set_current_step(from.current_step());
    }
  }
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
  learned_net_.Swap(&other->learned_net_);
  std::swap(iter_, other->iter_);
  std::swap(current_step_, other->current_step_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverState

// optional int32 iter = 1;
bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// optional int32 current_step = 4 [default = 0];
bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}
NetState::NetState(const NetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stage_(from.stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&level_) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  phase_ = 1;
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14].descriptor;
}

const NetState& NetState::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

NetState* NetState::New(::google::protobuf::Arena* arena) const {
  NetState* n = new NetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
  stage_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    level_ = 0;
    phase_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1 [default = TEST];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (tag == 16u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stage = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetState.stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string stage = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .caffe.Phase phase = 1 [default = TEST];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  const NetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_.MergeFrom(from.stage_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
  }
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {
  return true;
}

void NetState::Swap(NetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
  stage_.UnsafeArenaSwap(&other->stage_);
  std::swap(level_, other->level_);
  std::swap(phase_, other->phase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
int NetState::stage_size() const {
  return stage_.size();
}
void NetState::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&share_mode_, &from.share_mode_,
    reinterpret_cast<char*>(&decay_mult_) -
    reinterpret_cast<char*>(&share_mode_) + sizeof(decay_mult_));
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15].descriptor;
}

const ParamSpec& ParamSpec::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ParamSpec.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
            set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lr_mult = 3 [default = 1];
      case 3: {
        if (tag == 29u) {
          set_has_lr_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decay_mult = 4 [default = 1];
      case 4: {
        if (tag == 37u) {
          set_has_decay_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_mode(), output);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (has_share_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_share_mode()) {
      set_share_mode(from.share_mode());
    }
    if (from.has_lr_mult()) {
      set_lr_mult(from.lr_mult());
    }
    if (from.has_decay_mult()) {
      set_decay_mult(from.decay_mult());
    }
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  name_.Swap(&other->name_);
  std::swap(share_mode_, other->share_mode_);
  std::swap(lr_mult_, other->lr_mult_);
  std::swap(decay_mult_, other->decay_mult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional string name = 1;
bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena();
}
void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
#if LANG_CXX11
void ParamSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ParamSpec.name)
}
#endif
void ParamSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerProto::kNameFieldNumber;
const int LayerProto::kTypeFieldNumber;
const int LayerProto::kConvolutionProtoFieldNumber;
const int LayerProto::kLoaderProtoFieldNumber;
const int LayerProto::kInnerproductProtoFieldNumber;
const int LayerProto::kPoolingProtoFieldNumber;
const int LayerProto::kReluProtoFieldNumber;
const int LayerProto::kLrnProtoFieldNumber;
const int LayerProto::kSigmoidProtoFieldNumber;
const int LayerProto::kSoftmaxProtoFieldNumber;
const int LayerProto::kMultinomiallogisticlossProtoFieldNumber;
const int LayerProto::kSplitProtoFieldNumber;
const int LayerProto::kConcatProtoFieldNumber;
const int LayerProto::kBatchnormProtoFieldNumber;
const int LayerProto::kModelupdateProtoFieldNumber;
const int LayerProto::kNullupdateProtoFieldNumber;
const int LayerProto::kStoreProtoFieldNumber;
const int LayerProto::kLoadpartialmodelProtoFieldNumber;
const int LayerProto::kPlaceholderProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerProto::LayerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerProto)
}
LayerProto::LayerProto(const LayerProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_convolution_proto()) {
    convolution_proto_ = new ::caffe::ConvolutionProto(*from.convolution_proto_);
  } else {
    convolution_proto_ = NULL;
  }
  if (from.has_loader_proto()) {
    loader_proto_ = new ::caffe::LoaderProto(*from.loader_proto_);
  } else {
    loader_proto_ = NULL;
  }
  if (from.has_innerproduct_proto()) {
    innerproduct_proto_ = new ::caffe::InnerProductProto(*from.innerproduct_proto_);
  } else {
    innerproduct_proto_ = NULL;
  }
  if (from.has_pooling_proto()) {
    pooling_proto_ = new ::caffe::PoolingProto(*from.pooling_proto_);
  } else {
    pooling_proto_ = NULL;
  }
  if (from.has_relu_proto()) {
    relu_proto_ = new ::caffe::ReLUProto(*from.relu_proto_);
  } else {
    relu_proto_ = NULL;
  }
  if (from.has_lrn_proto()) {
    lrn_proto_ = new ::caffe::LRNProto(*from.lrn_proto_);
  } else {
    lrn_proto_ = NULL;
  }
  if (from.has_sigmoid_proto()) {
    sigmoid_proto_ = new ::caffe::SigmoidProto(*from.sigmoid_proto_);
  } else {
    sigmoid_proto_ = NULL;
  }
  if (from.has_softmax_proto()) {
    softmax_proto_ = new ::caffe::SoftmaxProto(*from.softmax_proto_);
  } else {
    softmax_proto_ = NULL;
  }
  if (from.has_multinomiallogisticloss_proto()) {
    multinomiallogisticloss_proto_ = new ::caffe::MultinomialLogisticLossProto(*from.multinomiallogisticloss_proto_);
  } else {
    multinomiallogisticloss_proto_ = NULL;
  }
  if (from.has_split_proto()) {
    split_proto_ = new ::caffe::SplitProto(*from.split_proto_);
  } else {
    split_proto_ = NULL;
  }
  if (from.has_concat_proto()) {
    concat_proto_ = new ::caffe::ConcatProto(*from.concat_proto_);
  } else {
    concat_proto_ = NULL;
  }
  if (from.has_batchnorm_proto()) {
    batchnorm_proto_ = new ::caffe::BatchNormProto(*from.batchnorm_proto_);
  } else {
    batchnorm_proto_ = NULL;
  }
  if (from.has_modelupdate_proto()) {
    modelupdate_proto_ = new ::caffe::ModelUpdateProto(*from.modelupdate_proto_);
  } else {
    modelupdate_proto_ = NULL;
  }
  if (from.has_nullupdate_proto()) {
    nullupdate_proto_ = new ::caffe::NullUpdateProto(*from.nullupdate_proto_);
  } else {
    nullupdate_proto_ = NULL;
  }
  if (from.has_store_proto()) {
    store_proto_ = new ::caffe::StoreProto(*from.store_proto_);
  } else {
    store_proto_ = NULL;
  }
  if (from.has_loadpartialmodel_proto()) {
    loadpartialmodel_proto_ = new ::caffe::LoadPartialModelProto(*from.loadpartialmodel_proto_);
  } else {
    loadpartialmodel_proto_ = NULL;
  }
  if (from.has_placeholder_proto()) {
    placeholder_proto_ = new ::caffe::PlaceholderProto(*from.placeholder_proto_);
  } else {
    placeholder_proto_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe.LayerProto)
}

void LayerProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&convolution_proto_, 0, reinterpret_cast<char*>(&placeholder_proto_) -
    reinterpret_cast<char*>(&convolution_proto_) + sizeof(placeholder_proto_));
}

LayerProto::~LayerProto() {
  // @@protoc_insertion_point(destructor:caffe.LayerProto)
  SharedDtor();
}

void LayerProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete convolution_proto_;
  }
  if (this != internal_default_instance()) {
    delete loader_proto_;
  }
  if (this != internal_default_instance()) {
    delete innerproduct_proto_;
  }
  if (this != internal_default_instance()) {
    delete pooling_proto_;
  }
  if (this != internal_default_instance()) {
    delete relu_proto_;
  }
  if (this != internal_default_instance()) {
    delete lrn_proto_;
  }
  if (this != internal_default_instance()) {
    delete sigmoid_proto_;
  }
  if (this != internal_default_instance()) {
    delete softmax_proto_;
  }
  if (this != internal_default_instance()) {
    delete multinomiallogisticloss_proto_;
  }
  if (this != internal_default_instance()) {
    delete split_proto_;
  }
  if (this != internal_default_instance()) {
    delete concat_proto_;
  }
  if (this != internal_default_instance()) {
    delete batchnorm_proto_;
  }
  if (this != internal_default_instance()) {
    delete modelupdate_proto_;
  }
  if (this != internal_default_instance()) {
    delete nullupdate_proto_;
  }
  if (this != internal_default_instance()) {
    delete store_proto_;
  }
  if (this != internal_default_instance()) {
    delete loadpartialmodel_proto_;
  }
  if (this != internal_default_instance()) {
    delete placeholder_proto_;
  }
}

void LayerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16].descriptor;
}

const LayerProto& LayerProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

LayerProto* LayerProto::New(::google::protobuf::Arena* arena) const {
  LayerProto* n = new LayerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerProto)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_convolution_proto()) {
      GOOGLE_DCHECK(convolution_proto_ != NULL);
      convolution_proto_->::caffe::ConvolutionProto::Clear();
    }
    if (has_loader_proto()) {
      GOOGLE_DCHECK(loader_proto_ != NULL);
      loader_proto_->::caffe::LoaderProto::Clear();
    }
    if (has_innerproduct_proto()) {
      GOOGLE_DCHECK(innerproduct_proto_ != NULL);
      innerproduct_proto_->::caffe::InnerProductProto::Clear();
    }
    if (has_pooling_proto()) {
      GOOGLE_DCHECK(pooling_proto_ != NULL);
      pooling_proto_->::caffe::PoolingProto::Clear();
    }
    if (has_relu_proto()) {
      GOOGLE_DCHECK(relu_proto_ != NULL);
      relu_proto_->::caffe::ReLUProto::Clear();
    }
    if (has_lrn_proto()) {
      GOOGLE_DCHECK(lrn_proto_ != NULL);
      lrn_proto_->::caffe::LRNProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_sigmoid_proto()) {
      GOOGLE_DCHECK(sigmoid_proto_ != NULL);
      sigmoid_proto_->::caffe::SigmoidProto::Clear();
    }
    if (has_softmax_proto()) {
      GOOGLE_DCHECK(softmax_proto_ != NULL);
      softmax_proto_->::caffe::SoftmaxProto::Clear();
    }
    if (has_multinomiallogisticloss_proto()) {
      GOOGLE_DCHECK(multinomiallogisticloss_proto_ != NULL);
      multinomiallogisticloss_proto_->::caffe::MultinomialLogisticLossProto::Clear();
    }
    if (has_split_proto()) {
      GOOGLE_DCHECK(split_proto_ != NULL);
      split_proto_->::caffe::SplitProto::Clear();
    }
    if (has_concat_proto()) {
      GOOGLE_DCHECK(concat_proto_ != NULL);
      concat_proto_->::caffe::ConcatProto::Clear();
    }
    if (has_batchnorm_proto()) {
      GOOGLE_DCHECK(batchnorm_proto_ != NULL);
      batchnorm_proto_->::caffe::BatchNormProto::Clear();
    }
    if (has_modelupdate_proto()) {
      GOOGLE_DCHECK(modelupdate_proto_ != NULL);
      modelupdate_proto_->::caffe::ModelUpdateProto::Clear();
    }
    if (has_nullupdate_proto()) {
      GOOGLE_DCHECK(nullupdate_proto_ != NULL);
      nullupdate_proto_->::caffe::NullUpdateProto::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    if (has_store_proto()) {
      GOOGLE_DCHECK(store_proto_ != NULL);
      store_proto_->::caffe::StoreProto::Clear();
    }
    if (has_loadpartialmodel_proto()) {
      GOOGLE_DCHECK(loadpartialmodel_proto_ != NULL);
      loadpartialmodel_proto_->::caffe::LoadPartialModelProto::Clear();
    }
    if (has_placeholder_proto()) {
      GOOGLE_DCHECK(placeholder_proto_ != NULL);
      placeholder_proto_->::caffe::PlaceholderProto::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerProto.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionProto convolution_proto = 106;
      case 106: {
        if (tag == 850u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LoaderProto loader_proto = 107;
      case 107: {
        if (tag == 858u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loader_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InnerProductProto innerproduct_proto = 117;
      case 117: {
        if (tag == 938u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_innerproduct_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNProto lrn_proto = 118;
      case 118: {
        if (tag == 946u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingProto pooling_proto = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUProto relu_proto = 123;
      case 123: {
        if (tag == 986u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SigmoidProto sigmoid_proto = 124;
      case 124: {
        if (tag == 994u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SoftmaxProto softmax_proto = 125;
      case 125: {
        if (tag == 1002u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
      case 130: {
        if (tag == 1042u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multinomiallogisticloss_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SplitProto split_proto = 131;
      case 131: {
        if (tag == 1050u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConcatProto concat_proto = 132;
      case 132: {
        if (tag == 1058u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BatchNormProto batchnorm_proto = 135;
      case 135: {
        if (tag == 1082u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batchnorm_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ModelUpdateProto modelupdate_proto = 136;
      case 136: {
        if (tag == 1090u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelupdate_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NullUpdateProto nullupdate_proto = 137;
      case 137: {
        if (tag == 1098u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nullupdate_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.StoreProto store_proto = 139;
      case 139: {
        if (tag == 1114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
      case 140: {
        if (tag == 1122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadpartialmodel_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PlaceholderProto placeholder_proto = 141;
      case 141: {
        if (tag == 1130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placeholder_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerProto)
  return false;
#undef DO_
}

void LayerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerProto.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional .caffe.ConvolutionProto convolution_proto = 106;
  if (has_convolution_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->convolution_proto_, output);
  }

  // optional .caffe.LoaderProto loader_proto = 107;
  if (has_loader_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->loader_proto_, output);
  }

  // optional .caffe.InnerProductProto innerproduct_proto = 117;
  if (has_innerproduct_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->innerproduct_proto_, output);
  }

  // optional .caffe.LRNProto lrn_proto = 118;
  if (has_lrn_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->lrn_proto_, output);
  }

  // optional .caffe.PoolingProto pooling_proto = 121;
  if (has_pooling_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, *this->pooling_proto_, output);
  }

  // optional .caffe.ReLUProto relu_proto = 123;
  if (has_relu_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, *this->relu_proto_, output);
  }

  // optional .caffe.SigmoidProto sigmoid_proto = 124;
  if (has_sigmoid_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, *this->sigmoid_proto_, output);
  }

  // optional .caffe.SoftmaxProto softmax_proto = 125;
  if (has_softmax_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, *this->softmax_proto_, output);
  }

  // optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
  if (has_multinomiallogisticloss_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->multinomiallogisticloss_proto_, output);
  }

  // optional .caffe.SplitProto split_proto = 131;
  if (has_split_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->split_proto_, output);
  }

  // optional .caffe.ConcatProto concat_proto = 132;
  if (has_concat_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->concat_proto_, output);
  }

  // optional .caffe.BatchNormProto batchnorm_proto = 135;
  if (has_batchnorm_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->batchnorm_proto_, output);
  }

  // optional .caffe.ModelUpdateProto modelupdate_proto = 136;
  if (has_modelupdate_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->modelupdate_proto_, output);
  }

  // optional .caffe.NullUpdateProto nullupdate_proto = 137;
  if (has_nullupdate_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->nullupdate_proto_, output);
  }

  // optional .caffe.StoreProto store_proto = 139;
  if (has_store_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, *this->store_proto_, output);
  }

  // optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
  if (has_loadpartialmodel_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, *this->loadpartialmodel_proto_, output);
  }

  // optional .caffe.PlaceholderProto placeholder_proto = 141;
  if (has_placeholder_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, *this->placeholder_proto_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerProto)
}

::google::protobuf::uint8* LayerProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerProto.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .caffe.ConvolutionProto convolution_proto = 106;
  if (has_convolution_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->convolution_proto_, false, target);
  }

  // optional .caffe.LoaderProto loader_proto = 107;
  if (has_loader_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->loader_proto_, false, target);
  }

  // optional .caffe.InnerProductProto innerproduct_proto = 117;
  if (has_innerproduct_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        117, *this->innerproduct_proto_, false, target);
  }

  // optional .caffe.LRNProto lrn_proto = 118;
  if (has_lrn_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        118, *this->lrn_proto_, false, target);
  }

  // optional .caffe.PoolingProto pooling_proto = 121;
  if (has_pooling_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        121, *this->pooling_proto_, false, target);
  }

  // optional .caffe.ReLUProto relu_proto = 123;
  if (has_relu_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        123, *this->relu_proto_, false, target);
  }

  // optional .caffe.SigmoidProto sigmoid_proto = 124;
  if (has_sigmoid_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        124, *this->sigmoid_proto_, false, target);
  }

  // optional .caffe.SoftmaxProto softmax_proto = 125;
  if (has_softmax_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        125, *this->softmax_proto_, false, target);
  }

  // optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
  if (has_multinomiallogisticloss_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        130, *this->multinomiallogisticloss_proto_, false, target);
  }

  // optional .caffe.SplitProto split_proto = 131;
  if (has_split_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        131, *this->split_proto_, false, target);
  }

  // optional .caffe.ConcatProto concat_proto = 132;
  if (has_concat_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        132, *this->concat_proto_, false, target);
  }

  // optional .caffe.BatchNormProto batchnorm_proto = 135;
  if (has_batchnorm_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        135, *this->batchnorm_proto_, false, target);
  }

  // optional .caffe.ModelUpdateProto modelupdate_proto = 136;
  if (has_modelupdate_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        136, *this->modelupdate_proto_, false, target);
  }

  // optional .caffe.NullUpdateProto nullupdate_proto = 137;
  if (has_nullupdate_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        137, *this->nullupdate_proto_, false, target);
  }

  // optional .caffe.StoreProto store_proto = 139;
  if (has_store_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        139, *this->store_proto_, false, target);
  }

  // optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
  if (has_loadpartialmodel_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        140, *this->loadpartialmodel_proto_, false, target);
  }

  // optional .caffe.PlaceholderProto placeholder_proto = 141;
  if (has_placeholder_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        141, *this->placeholder_proto_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerProto)
  return target;
}

size_t LayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.ConvolutionProto convolution_proto = 106;
    if (has_convolution_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_proto_);
    }

    // optional .caffe.LoaderProto loader_proto = 107;
    if (has_loader_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loader_proto_);
    }

    // optional .caffe.InnerProductProto innerproduct_proto = 117;
    if (has_innerproduct_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->innerproduct_proto_);
    }

    // optional .caffe.PoolingProto pooling_proto = 121;
    if (has_pooling_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_proto_);
    }

    // optional .caffe.ReLUProto relu_proto = 123;
    if (has_relu_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_proto_);
    }

    // optional .caffe.LRNProto lrn_proto = 118;
    if (has_lrn_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_proto_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.SigmoidProto sigmoid_proto = 124;
    if (has_sigmoid_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_proto_);
    }

    // optional .caffe.SoftmaxProto softmax_proto = 125;
    if (has_softmax_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_proto_);
    }

    // optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
    if (has_multinomiallogisticloss_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->multinomiallogisticloss_proto_);
    }

    // optional .caffe.SplitProto split_proto = 131;
    if (has_split_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_proto_);
    }

    // optional .caffe.ConcatProto concat_proto = 132;
    if (has_concat_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_proto_);
    }

    // optional .caffe.BatchNormProto batchnorm_proto = 135;
    if (has_batchnorm_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batchnorm_proto_);
    }

    // optional .caffe.ModelUpdateProto modelupdate_proto = 136;
    if (has_modelupdate_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modelupdate_proto_);
    }

    // optional .caffe.NullUpdateProto nullupdate_proto = 137;
    if (has_nullupdate_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nullupdate_proto_);
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional .caffe.StoreProto store_proto = 139;
    if (has_store_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->store_proto_);
    }

    // optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
    if (has_loadpartialmodel_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loadpartialmodel_proto_);
    }

    // optional .caffe.PlaceholderProto placeholder_proto = 141;
    if (has_placeholder_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->placeholder_proto_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerProto)
    MergeFrom(*source);
  }
}

void LayerProto::MergeFrom(const LayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_convolution_proto()) {
      mutable_convolution_proto()->::caffe::ConvolutionProto::MergeFrom(from.convolution_proto());
    }
    if (from.has_loader_proto()) {
      mutable_loader_proto()->::caffe::LoaderProto::MergeFrom(from.loader_proto());
    }
    if (from.has_innerproduct_proto()) {
      mutable_innerproduct_proto()->::caffe::InnerProductProto::MergeFrom(from.innerproduct_proto());
    }
    if (from.has_pooling_proto()) {
      mutable_pooling_proto()->::caffe::PoolingProto::MergeFrom(from.pooling_proto());
    }
    if (from.has_relu_proto()) {
      mutable_relu_proto()->::caffe::ReLUProto::MergeFrom(from.relu_proto());
    }
    if (from.has_lrn_proto()) {
      mutable_lrn_proto()->::caffe::LRNProto::MergeFrom(from.lrn_proto());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_sigmoid_proto()) {
      mutable_sigmoid_proto()->::caffe::SigmoidProto::MergeFrom(from.sigmoid_proto());
    }
    if (from.has_softmax_proto()) {
      mutable_softmax_proto()->::caffe::SoftmaxProto::MergeFrom(from.softmax_proto());
    }
    if (from.has_multinomiallogisticloss_proto()) {
      mutable_multinomiallogisticloss_proto()->::caffe::MultinomialLogisticLossProto::MergeFrom(from.multinomiallogisticloss_proto());
    }
    if (from.has_split_proto()) {
      mutable_split_proto()->::caffe::SplitProto::MergeFrom(from.split_proto());
    }
    if (from.has_concat_proto()) {
      mutable_concat_proto()->::caffe::ConcatProto::MergeFrom(from.concat_proto());
    }
    if (from.has_batchnorm_proto()) {
      mutable_batchnorm_proto()->::caffe::BatchNormProto::MergeFrom(from.batchnorm_proto());
    }
    if (from.has_modelupdate_proto()) {
      mutable_modelupdate_proto()->::caffe::ModelUpdateProto::MergeFrom(from.modelupdate_proto());
    }
    if (from.has_nullupdate_proto()) {
      mutable_nullupdate_proto()->::caffe::NullUpdateProto::MergeFrom(from.nullupdate_proto());
    }
  }
  if (from._has_bits_[16 / 32] & 458752u) {
    if (from.has_store_proto()) {
      mutable_store_proto()->::caffe::StoreProto::MergeFrom(from.store_proto());
    }
    if (from.has_loadpartialmodel_proto()) {
      mutable_loadpartialmodel_proto()->::caffe::LoadPartialModelProto::MergeFrom(from.loadpartialmodel_proto());
    }
    if (from.has_placeholder_proto()) {
      mutable_placeholder_proto()->::caffe::PlaceholderProto::MergeFrom(from.placeholder_proto());
    }
  }
}

void LayerProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerProto::CopyFrom(const LayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProto::IsInitialized() const {
  if (has_convolution_proto()) {
    if (!this->convolution_proto_->IsInitialized()) return false;
  }
  if (has_loader_proto()) {
    if (!this->loader_proto_->IsInitialized()) return false;
  }
  if (has_innerproduct_proto()) {
    if (!this->innerproduct_proto_->IsInitialized()) return false;
  }
  if (has_pooling_proto()) {
    if (!this->pooling_proto_->IsInitialized()) return false;
  }
  if (has_relu_proto()) {
    if (!this->relu_proto_->IsInitialized()) return false;
  }
  if (has_lrn_proto()) {
    if (!this->lrn_proto_->IsInitialized()) return false;
  }
  if (has_sigmoid_proto()) {
    if (!this->sigmoid_proto_->IsInitialized()) return false;
  }
  if (has_softmax_proto()) {
    if (!this->softmax_proto_->IsInitialized()) return false;
  }
  if (has_multinomiallogisticloss_proto()) {
    if (!this->multinomiallogisticloss_proto_->IsInitialized()) return false;
  }
  if (has_split_proto()) {
    if (!this->split_proto_->IsInitialized()) return false;
  }
  if (has_concat_proto()) {
    if (!this->concat_proto_->IsInitialized()) return false;
  }
  if (has_modelupdate_proto()) {
    if (!this->modelupdate_proto_->IsInitialized()) return false;
  }
  if (has_nullupdate_proto()) {
    if (!this->nullupdate_proto_->IsInitialized()) return false;
  }
  if (has_store_proto()) {
    if (!this->store_proto_->IsInitialized()) return false;
  }
  if (has_loadpartialmodel_proto()) {
    if (!this->loadpartialmodel_proto_->IsInitialized()) return false;
  }
  if (has_placeholder_proto()) {
    if (!this->placeholder_proto_->IsInitialized()) return false;
  }
  return true;
}

void LayerProto::Swap(LayerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerProto::InternalSwap(LayerProto* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(convolution_proto_, other->convolution_proto_);
  std::swap(loader_proto_, other->loader_proto_);
  std::swap(innerproduct_proto_, other->innerproduct_proto_);
  std::swap(pooling_proto_, other->pooling_proto_);
  std::swap(relu_proto_, other->relu_proto_);
  std::swap(lrn_proto_, other->lrn_proto_);
  std::swap(sigmoid_proto_, other->sigmoid_proto_);
  std::swap(softmax_proto_, other->softmax_proto_);
  std::swap(multinomiallogisticloss_proto_, other->multinomiallogisticloss_proto_);
  std::swap(split_proto_, other->split_proto_);
  std::swap(concat_proto_, other->concat_proto_);
  std::swap(batchnorm_proto_, other->batchnorm_proto_);
  std::swap(modelupdate_proto_, other->modelupdate_proto_);
  std::swap(nullupdate_proto_, other->nullupdate_proto_);
  std::swap(store_proto_, other->store_proto_);
  std::swap(loadpartialmodel_proto_, other->loadpartialmodel_proto_);
  std::swap(placeholder_proto_, other->placeholder_proto_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerProto

// optional string name = 1;
bool LayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LayerProto::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.name)
  return name_.GetNoArena();
}
void LayerProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerProto.name)
}
#if LANG_CXX11
void LayerProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerProto.name)
}
#endif
void LayerProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerProto.name)
}
void LayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerProto.name)
}
::std::string* LayerProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.name)
}

// optional string type = 2;
bool LayerProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerProto::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& LayerProto::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.type)
  return type_.GetNoArena();
}
void LayerProto::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerProto.type)
}
#if LANG_CXX11
void LayerProto::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerProto.type)
}
#endif
void LayerProto::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerProto.type)
}
void LayerProto::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerProto.type)
}
::std::string* LayerProto::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerProto::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerProto::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.type)
}

// optional .caffe.ConvolutionProto convolution_proto = 106;
bool LayerProto::has_convolution_proto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerProto::set_has_convolution_proto() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerProto::clear_has_convolution_proto() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerProto::clear_convolution_proto() {
  if (convolution_proto_ != NULL) convolution_proto_->::caffe::ConvolutionProto::Clear();
  clear_has_convolution_proto();
}
const ::caffe::ConvolutionProto& LayerProto::convolution_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.convolution_proto)
  return convolution_proto_ != NULL ? *convolution_proto_
                         : *::caffe::ConvolutionProto::internal_default_instance();
}
::caffe::ConvolutionProto* LayerProto::mutable_convolution_proto() {
  set_has_convolution_proto();
  if (convolution_proto_ == NULL) {
    convolution_proto_ = new ::caffe::ConvolutionProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.convolution_proto)
  return convolution_proto_;
}
::caffe::ConvolutionProto* LayerProto::release_convolution_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.convolution_proto)
  clear_has_convolution_proto();
  ::caffe::ConvolutionProto* temp = convolution_proto_;
  convolution_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_convolution_proto(::caffe::ConvolutionProto* convolution_proto) {
  delete convolution_proto_;
  convolution_proto_ = convolution_proto;
  if (convolution_proto) {
    set_has_convolution_proto();
  } else {
    clear_has_convolution_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.convolution_proto)
}

// optional .caffe.LoaderProto loader_proto = 107;
bool LayerProto::has_loader_proto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerProto::set_has_loader_proto() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerProto::clear_has_loader_proto() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerProto::clear_loader_proto() {
  if (loader_proto_ != NULL) loader_proto_->::caffe::LoaderProto::Clear();
  clear_has_loader_proto();
}
const ::caffe::LoaderProto& LayerProto::loader_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.loader_proto)
  return loader_proto_ != NULL ? *loader_proto_
                         : *::caffe::LoaderProto::internal_default_instance();
}
::caffe::LoaderProto* LayerProto::mutable_loader_proto() {
  set_has_loader_proto();
  if (loader_proto_ == NULL) {
    loader_proto_ = new ::caffe::LoaderProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.loader_proto)
  return loader_proto_;
}
::caffe::LoaderProto* LayerProto::release_loader_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.loader_proto)
  clear_has_loader_proto();
  ::caffe::LoaderProto* temp = loader_proto_;
  loader_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_loader_proto(::caffe::LoaderProto* loader_proto) {
  delete loader_proto_;
  loader_proto_ = loader_proto;
  if (loader_proto) {
    set_has_loader_proto();
  } else {
    clear_has_loader_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.loader_proto)
}

// optional .caffe.InnerProductProto innerproduct_proto = 117;
bool LayerProto::has_innerproduct_proto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerProto::set_has_innerproduct_proto() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerProto::clear_has_innerproduct_proto() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerProto::clear_innerproduct_proto() {
  if (innerproduct_proto_ != NULL) innerproduct_proto_->::caffe::InnerProductProto::Clear();
  clear_has_innerproduct_proto();
}
const ::caffe::InnerProductProto& LayerProto::innerproduct_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.innerproduct_proto)
  return innerproduct_proto_ != NULL ? *innerproduct_proto_
                         : *::caffe::InnerProductProto::internal_default_instance();
}
::caffe::InnerProductProto* LayerProto::mutable_innerproduct_proto() {
  set_has_innerproduct_proto();
  if (innerproduct_proto_ == NULL) {
    innerproduct_proto_ = new ::caffe::InnerProductProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.innerproduct_proto)
  return innerproduct_proto_;
}
::caffe::InnerProductProto* LayerProto::release_innerproduct_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.innerproduct_proto)
  clear_has_innerproduct_proto();
  ::caffe::InnerProductProto* temp = innerproduct_proto_;
  innerproduct_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_innerproduct_proto(::caffe::InnerProductProto* innerproduct_proto) {
  delete innerproduct_proto_;
  innerproduct_proto_ = innerproduct_proto;
  if (innerproduct_proto) {
    set_has_innerproduct_proto();
  } else {
    clear_has_innerproduct_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.innerproduct_proto)
}

// optional .caffe.PoolingProto pooling_proto = 121;
bool LayerProto::has_pooling_proto() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayerProto::set_has_pooling_proto() {
  _has_bits_[0] |= 0x00000020u;
}
void LayerProto::clear_has_pooling_proto() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayerProto::clear_pooling_proto() {
  if (pooling_proto_ != NULL) pooling_proto_->::caffe::PoolingProto::Clear();
  clear_has_pooling_proto();
}
const ::caffe::PoolingProto& LayerProto::pooling_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.pooling_proto)
  return pooling_proto_ != NULL ? *pooling_proto_
                         : *::caffe::PoolingProto::internal_default_instance();
}
::caffe::PoolingProto* LayerProto::mutable_pooling_proto() {
  set_has_pooling_proto();
  if (pooling_proto_ == NULL) {
    pooling_proto_ = new ::caffe::PoolingProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.pooling_proto)
  return pooling_proto_;
}
::caffe::PoolingProto* LayerProto::release_pooling_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.pooling_proto)
  clear_has_pooling_proto();
  ::caffe::PoolingProto* temp = pooling_proto_;
  pooling_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_pooling_proto(::caffe::PoolingProto* pooling_proto) {
  delete pooling_proto_;
  pooling_proto_ = pooling_proto;
  if (pooling_proto) {
    set_has_pooling_proto();
  } else {
    clear_has_pooling_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.pooling_proto)
}

// optional .caffe.ReLUProto relu_proto = 123;
bool LayerProto::has_relu_proto() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LayerProto::set_has_relu_proto() {
  _has_bits_[0] |= 0x00000040u;
}
void LayerProto::clear_has_relu_proto() {
  _has_bits_[0] &= ~0x00000040u;
}
void LayerProto::clear_relu_proto() {
  if (relu_proto_ != NULL) relu_proto_->::caffe::ReLUProto::Clear();
  clear_has_relu_proto();
}
const ::caffe::ReLUProto& LayerProto::relu_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.relu_proto)
  return relu_proto_ != NULL ? *relu_proto_
                         : *::caffe::ReLUProto::internal_default_instance();
}
::caffe::ReLUProto* LayerProto::mutable_relu_proto() {
  set_has_relu_proto();
  if (relu_proto_ == NULL) {
    relu_proto_ = new ::caffe::ReLUProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.relu_proto)
  return relu_proto_;
}
::caffe::ReLUProto* LayerProto::release_relu_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.relu_proto)
  clear_has_relu_proto();
  ::caffe::ReLUProto* temp = relu_proto_;
  relu_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_relu_proto(::caffe::ReLUProto* relu_proto) {
  delete relu_proto_;
  relu_proto_ = relu_proto;
  if (relu_proto) {
    set_has_relu_proto();
  } else {
    clear_has_relu_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.relu_proto)
}

// optional .caffe.LRNProto lrn_proto = 118;
bool LayerProto::has_lrn_proto() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LayerProto::set_has_lrn_proto() {
  _has_bits_[0] |= 0x00000080u;
}
void LayerProto::clear_has_lrn_proto() {
  _has_bits_[0] &= ~0x00000080u;
}
void LayerProto::clear_lrn_proto() {
  if (lrn_proto_ != NULL) lrn_proto_->::caffe::LRNProto::Clear();
  clear_has_lrn_proto();
}
const ::caffe::LRNProto& LayerProto::lrn_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.lrn_proto)
  return lrn_proto_ != NULL ? *lrn_proto_
                         : *::caffe::LRNProto::internal_default_instance();
}
::caffe::LRNProto* LayerProto::mutable_lrn_proto() {
  set_has_lrn_proto();
  if (lrn_proto_ == NULL) {
    lrn_proto_ = new ::caffe::LRNProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.lrn_proto)
  return lrn_proto_;
}
::caffe::LRNProto* LayerProto::release_lrn_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.lrn_proto)
  clear_has_lrn_proto();
  ::caffe::LRNProto* temp = lrn_proto_;
  lrn_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_lrn_proto(::caffe::LRNProto* lrn_proto) {
  delete lrn_proto_;
  lrn_proto_ = lrn_proto;
  if (lrn_proto) {
    set_has_lrn_proto();
  } else {
    clear_has_lrn_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.lrn_proto)
}

// optional .caffe.SigmoidProto sigmoid_proto = 124;
bool LayerProto::has_sigmoid_proto() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LayerProto::set_has_sigmoid_proto() {
  _has_bits_[0] |= 0x00000100u;
}
void LayerProto::clear_has_sigmoid_proto() {
  _has_bits_[0] &= ~0x00000100u;
}
void LayerProto::clear_sigmoid_proto() {
  if (sigmoid_proto_ != NULL) sigmoid_proto_->::caffe::SigmoidProto::Clear();
  clear_has_sigmoid_proto();
}
const ::caffe::SigmoidProto& LayerProto::sigmoid_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.sigmoid_proto)
  return sigmoid_proto_ != NULL ? *sigmoid_proto_
                         : *::caffe::SigmoidProto::internal_default_instance();
}
::caffe::SigmoidProto* LayerProto::mutable_sigmoid_proto() {
  set_has_sigmoid_proto();
  if (sigmoid_proto_ == NULL) {
    sigmoid_proto_ = new ::caffe::SigmoidProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.sigmoid_proto)
  return sigmoid_proto_;
}
::caffe::SigmoidProto* LayerProto::release_sigmoid_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.sigmoid_proto)
  clear_has_sigmoid_proto();
  ::caffe::SigmoidProto* temp = sigmoid_proto_;
  sigmoid_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_sigmoid_proto(::caffe::SigmoidProto* sigmoid_proto) {
  delete sigmoid_proto_;
  sigmoid_proto_ = sigmoid_proto;
  if (sigmoid_proto) {
    set_has_sigmoid_proto();
  } else {
    clear_has_sigmoid_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.sigmoid_proto)
}

// optional .caffe.SoftmaxProto softmax_proto = 125;
bool LayerProto::has_softmax_proto() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LayerProto::set_has_softmax_proto() {
  _has_bits_[0] |= 0x00000200u;
}
void LayerProto::clear_has_softmax_proto() {
  _has_bits_[0] &= ~0x00000200u;
}
void LayerProto::clear_softmax_proto() {
  if (softmax_proto_ != NULL) softmax_proto_->::caffe::SoftmaxProto::Clear();
  clear_has_softmax_proto();
}
const ::caffe::SoftmaxProto& LayerProto::softmax_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.softmax_proto)
  return softmax_proto_ != NULL ? *softmax_proto_
                         : *::caffe::SoftmaxProto::internal_default_instance();
}
::caffe::SoftmaxProto* LayerProto::mutable_softmax_proto() {
  set_has_softmax_proto();
  if (softmax_proto_ == NULL) {
    softmax_proto_ = new ::caffe::SoftmaxProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.softmax_proto)
  return softmax_proto_;
}
::caffe::SoftmaxProto* LayerProto::release_softmax_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.softmax_proto)
  clear_has_softmax_proto();
  ::caffe::SoftmaxProto* temp = softmax_proto_;
  softmax_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_softmax_proto(::caffe::SoftmaxProto* softmax_proto) {
  delete softmax_proto_;
  softmax_proto_ = softmax_proto;
  if (softmax_proto) {
    set_has_softmax_proto();
  } else {
    clear_has_softmax_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.softmax_proto)
}

// optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
bool LayerProto::has_multinomiallogisticloss_proto() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LayerProto::set_has_multinomiallogisticloss_proto() {
  _has_bits_[0] |= 0x00000400u;
}
void LayerProto::clear_has_multinomiallogisticloss_proto() {
  _has_bits_[0] &= ~0x00000400u;
}
void LayerProto::clear_multinomiallogisticloss_proto() {
  if (multinomiallogisticloss_proto_ != NULL) multinomiallogisticloss_proto_->::caffe::MultinomialLogisticLossProto::Clear();
  clear_has_multinomiallogisticloss_proto();
}
const ::caffe::MultinomialLogisticLossProto& LayerProto::multinomiallogisticloss_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.multinomiallogisticloss_proto)
  return multinomiallogisticloss_proto_ != NULL ? *multinomiallogisticloss_proto_
                         : *::caffe::MultinomialLogisticLossProto::internal_default_instance();
}
::caffe::MultinomialLogisticLossProto* LayerProto::mutable_multinomiallogisticloss_proto() {
  set_has_multinomiallogisticloss_proto();
  if (multinomiallogisticloss_proto_ == NULL) {
    multinomiallogisticloss_proto_ = new ::caffe::MultinomialLogisticLossProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.multinomiallogisticloss_proto)
  return multinomiallogisticloss_proto_;
}
::caffe::MultinomialLogisticLossProto* LayerProto::release_multinomiallogisticloss_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.multinomiallogisticloss_proto)
  clear_has_multinomiallogisticloss_proto();
  ::caffe::MultinomialLogisticLossProto* temp = multinomiallogisticloss_proto_;
  multinomiallogisticloss_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_multinomiallogisticloss_proto(::caffe::MultinomialLogisticLossProto* multinomiallogisticloss_proto) {
  delete multinomiallogisticloss_proto_;
  multinomiallogisticloss_proto_ = multinomiallogisticloss_proto;
  if (multinomiallogisticloss_proto) {
    set_has_multinomiallogisticloss_proto();
  } else {
    clear_has_multinomiallogisticloss_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.multinomiallogisticloss_proto)
}

// optional .caffe.SplitProto split_proto = 131;
bool LayerProto::has_split_proto() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerProto::set_has_split_proto() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerProto::clear_has_split_proto() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerProto::clear_split_proto() {
  if (split_proto_ != NULL) split_proto_->::caffe::SplitProto::Clear();
  clear_has_split_proto();
}
const ::caffe::SplitProto& LayerProto::split_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.split_proto)
  return split_proto_ != NULL ? *split_proto_
                         : *::caffe::SplitProto::internal_default_instance();
}
::caffe::SplitProto* LayerProto::mutable_split_proto() {
  set_has_split_proto();
  if (split_proto_ == NULL) {
    split_proto_ = new ::caffe::SplitProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.split_proto)
  return split_proto_;
}
::caffe::SplitProto* LayerProto::release_split_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.split_proto)
  clear_has_split_proto();
  ::caffe::SplitProto* temp = split_proto_;
  split_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_split_proto(::caffe::SplitProto* split_proto) {
  delete split_proto_;
  split_proto_ = split_proto;
  if (split_proto) {
    set_has_split_proto();
  } else {
    clear_has_split_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.split_proto)
}

// optional .caffe.ConcatProto concat_proto = 132;
bool LayerProto::has_concat_proto() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerProto::set_has_concat_proto() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerProto::clear_has_concat_proto() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerProto::clear_concat_proto() {
  if (concat_proto_ != NULL) concat_proto_->::caffe::ConcatProto::Clear();
  clear_has_concat_proto();
}
const ::caffe::ConcatProto& LayerProto::concat_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.concat_proto)
  return concat_proto_ != NULL ? *concat_proto_
                         : *::caffe::ConcatProto::internal_default_instance();
}
::caffe::ConcatProto* LayerProto::mutable_concat_proto() {
  set_has_concat_proto();
  if (concat_proto_ == NULL) {
    concat_proto_ = new ::caffe::ConcatProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.concat_proto)
  return concat_proto_;
}
::caffe::ConcatProto* LayerProto::release_concat_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.concat_proto)
  clear_has_concat_proto();
  ::caffe::ConcatProto* temp = concat_proto_;
  concat_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_concat_proto(::caffe::ConcatProto* concat_proto) {
  delete concat_proto_;
  concat_proto_ = concat_proto;
  if (concat_proto) {
    set_has_concat_proto();
  } else {
    clear_has_concat_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.concat_proto)
}

// optional .caffe.BatchNormProto batchnorm_proto = 135;
bool LayerProto::has_batchnorm_proto() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerProto::set_has_batchnorm_proto() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerProto::clear_has_batchnorm_proto() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerProto::clear_batchnorm_proto() {
  if (batchnorm_proto_ != NULL) batchnorm_proto_->::caffe::BatchNormProto::Clear();
  clear_has_batchnorm_proto();
}
const ::caffe::BatchNormProto& LayerProto::batchnorm_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.batchnorm_proto)
  return batchnorm_proto_ != NULL ? *batchnorm_proto_
                         : *::caffe::BatchNormProto::internal_default_instance();
}
::caffe::BatchNormProto* LayerProto::mutable_batchnorm_proto() {
  set_has_batchnorm_proto();
  if (batchnorm_proto_ == NULL) {
    batchnorm_proto_ = new ::caffe::BatchNormProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.batchnorm_proto)
  return batchnorm_proto_;
}
::caffe::BatchNormProto* LayerProto::release_batchnorm_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.batchnorm_proto)
  clear_has_batchnorm_proto();
  ::caffe::BatchNormProto* temp = batchnorm_proto_;
  batchnorm_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_batchnorm_proto(::caffe::BatchNormProto* batchnorm_proto) {
  delete batchnorm_proto_;
  batchnorm_proto_ = batchnorm_proto;
  if (batchnorm_proto) {
    set_has_batchnorm_proto();
  } else {
    clear_has_batchnorm_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.batchnorm_proto)
}

// optional .caffe.ModelUpdateProto modelupdate_proto = 136;
bool LayerProto::has_modelupdate_proto() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerProto::set_has_modelupdate_proto() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerProto::clear_has_modelupdate_proto() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerProto::clear_modelupdate_proto() {
  if (modelupdate_proto_ != NULL) modelupdate_proto_->::caffe::ModelUpdateProto::Clear();
  clear_has_modelupdate_proto();
}
const ::caffe::ModelUpdateProto& LayerProto::modelupdate_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.modelupdate_proto)
  return modelupdate_proto_ != NULL ? *modelupdate_proto_
                         : *::caffe::ModelUpdateProto::internal_default_instance();
}
::caffe::ModelUpdateProto* LayerProto::mutable_modelupdate_proto() {
  set_has_modelupdate_proto();
  if (modelupdate_proto_ == NULL) {
    modelupdate_proto_ = new ::caffe::ModelUpdateProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.modelupdate_proto)
  return modelupdate_proto_;
}
::caffe::ModelUpdateProto* LayerProto::release_modelupdate_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.modelupdate_proto)
  clear_has_modelupdate_proto();
  ::caffe::ModelUpdateProto* temp = modelupdate_proto_;
  modelupdate_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_modelupdate_proto(::caffe::ModelUpdateProto* modelupdate_proto) {
  delete modelupdate_proto_;
  modelupdate_proto_ = modelupdate_proto;
  if (modelupdate_proto) {
    set_has_modelupdate_proto();
  } else {
    clear_has_modelupdate_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.modelupdate_proto)
}

// optional .caffe.NullUpdateProto nullupdate_proto = 137;
bool LayerProto::has_nullupdate_proto() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerProto::set_has_nullupdate_proto() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerProto::clear_has_nullupdate_proto() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerProto::clear_nullupdate_proto() {
  if (nullupdate_proto_ != NULL) nullupdate_proto_->::caffe::NullUpdateProto::Clear();
  clear_has_nullupdate_proto();
}
const ::caffe::NullUpdateProto& LayerProto::nullupdate_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.nullupdate_proto)
  return nullupdate_proto_ != NULL ? *nullupdate_proto_
                         : *::caffe::NullUpdateProto::internal_default_instance();
}
::caffe::NullUpdateProto* LayerProto::mutable_nullupdate_proto() {
  set_has_nullupdate_proto();
  if (nullupdate_proto_ == NULL) {
    nullupdate_proto_ = new ::caffe::NullUpdateProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.nullupdate_proto)
  return nullupdate_proto_;
}
::caffe::NullUpdateProto* LayerProto::release_nullupdate_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.nullupdate_proto)
  clear_has_nullupdate_proto();
  ::caffe::NullUpdateProto* temp = nullupdate_proto_;
  nullupdate_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_nullupdate_proto(::caffe::NullUpdateProto* nullupdate_proto) {
  delete nullupdate_proto_;
  nullupdate_proto_ = nullupdate_proto;
  if (nullupdate_proto) {
    set_has_nullupdate_proto();
  } else {
    clear_has_nullupdate_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.nullupdate_proto)
}

// optional .caffe.StoreProto store_proto = 139;
bool LayerProto::has_store_proto() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerProto::set_has_store_proto() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerProto::clear_has_store_proto() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerProto::clear_store_proto() {
  if (store_proto_ != NULL) store_proto_->::caffe::StoreProto::Clear();
  clear_has_store_proto();
}
const ::caffe::StoreProto& LayerProto::store_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.store_proto)
  return store_proto_ != NULL ? *store_proto_
                         : *::caffe::StoreProto::internal_default_instance();
}
::caffe::StoreProto* LayerProto::mutable_store_proto() {
  set_has_store_proto();
  if (store_proto_ == NULL) {
    store_proto_ = new ::caffe::StoreProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.store_proto)
  return store_proto_;
}
::caffe::StoreProto* LayerProto::release_store_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.store_proto)
  clear_has_store_proto();
  ::caffe::StoreProto* temp = store_proto_;
  store_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_store_proto(::caffe::StoreProto* store_proto) {
  delete store_proto_;
  store_proto_ = store_proto;
  if (store_proto) {
    set_has_store_proto();
  } else {
    clear_has_store_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.store_proto)
}

// optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
bool LayerProto::has_loadpartialmodel_proto() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerProto::set_has_loadpartialmodel_proto() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerProto::clear_has_loadpartialmodel_proto() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerProto::clear_loadpartialmodel_proto() {
  if (loadpartialmodel_proto_ != NULL) loadpartialmodel_proto_->::caffe::LoadPartialModelProto::Clear();
  clear_has_loadpartialmodel_proto();
}
const ::caffe::LoadPartialModelProto& LayerProto::loadpartialmodel_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.loadpartialmodel_proto)
  return loadpartialmodel_proto_ != NULL ? *loadpartialmodel_proto_
                         : *::caffe::LoadPartialModelProto::internal_default_instance();
}
::caffe::LoadPartialModelProto* LayerProto::mutable_loadpartialmodel_proto() {
  set_has_loadpartialmodel_proto();
  if (loadpartialmodel_proto_ == NULL) {
    loadpartialmodel_proto_ = new ::caffe::LoadPartialModelProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.loadpartialmodel_proto)
  return loadpartialmodel_proto_;
}
::caffe::LoadPartialModelProto* LayerProto::release_loadpartialmodel_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.loadpartialmodel_proto)
  clear_has_loadpartialmodel_proto();
  ::caffe::LoadPartialModelProto* temp = loadpartialmodel_proto_;
  loadpartialmodel_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_loadpartialmodel_proto(::caffe::LoadPartialModelProto* loadpartialmodel_proto) {
  delete loadpartialmodel_proto_;
  loadpartialmodel_proto_ = loadpartialmodel_proto;
  if (loadpartialmodel_proto) {
    set_has_loadpartialmodel_proto();
  } else {
    clear_has_loadpartialmodel_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.loadpartialmodel_proto)
}

// optional .caffe.PlaceholderProto placeholder_proto = 141;
bool LayerProto::has_placeholder_proto() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerProto::set_has_placeholder_proto() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerProto::clear_has_placeholder_proto() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerProto::clear_placeholder_proto() {
  if (placeholder_proto_ != NULL) placeholder_proto_->::caffe::PlaceholderProto::Clear();
  clear_has_placeholder_proto();
}
const ::caffe::PlaceholderProto& LayerProto::placeholder_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.placeholder_proto)
  return placeholder_proto_ != NULL ? *placeholder_proto_
                         : *::caffe::PlaceholderProto::internal_default_instance();
}
::caffe::PlaceholderProto* LayerProto::mutable_placeholder_proto() {
  set_has_placeholder_proto();
  if (placeholder_proto_ == NULL) {
    placeholder_proto_ = new ::caffe::PlaceholderProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.placeholder_proto)
  return placeholder_proto_;
}
::caffe::PlaceholderProto* LayerProto::release_placeholder_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.placeholder_proto)
  clear_has_placeholder_proto();
  ::caffe::PlaceholderProto* temp = placeholder_proto_;
  placeholder_proto_ = NULL;
  return temp;
}
void LayerProto::set_allocated_placeholder_proto(::caffe::PlaceholderProto* placeholder_proto) {
  delete placeholder_proto_;
  placeholder_proto_ = placeholder_proto;
  if (placeholder_proto) {
    set_has_placeholder_proto();
  } else {
    clear_has_placeholder_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.placeholder_proto)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormProto::kUseGlobalStatsFieldNumber;
const int BatchNormProto::kMovingAverageFractionFieldNumber;
const int BatchNormProto::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormProto::BatchNormProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormProto)
}
BatchNormProto::BatchNormProto(const BatchNormProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_global_stats_, &from.use_global_stats_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&use_global_stats_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormProto)
}

void BatchNormProto::SharedCtor() {
  _cached_size_ = 0;
  use_global_stats_ = false;
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-05f;
}

BatchNormProto::~BatchNormProto() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormProto)
  SharedDtor();
}

void BatchNormProto::SharedDtor() {
}

void BatchNormProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[17].descriptor;
}

const BatchNormProto& BatchNormProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

BatchNormProto* BatchNormProto::New(::google::protobuf::Arena* arena) const {
  BatchNormProto* n = new BatchNormProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormProto)
  if (_has_bits_[0 / 32] & 7u) {
    use_global_stats_ = false;
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchNormProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_global_stats = 1;
      case 1: {
        if (tag == 8u) {
          set_has_use_global_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2: {
        if (tag == 21u) {
          set_has_moving_average_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 3 [default = 1e-05];
      case 3: {
        if (tag == 29u) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormProto)
  return false;
#undef DO_
}

void BatchNormProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormProto)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (has_moving_average_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-05];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormProto)
}

::google::protobuf::uint8* BatchNormProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormProto)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (has_moving_average_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormProto)
  return target;
}

size_t BatchNormProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool use_global_stats = 1;
    if (has_use_global_stats()) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormProto)
    MergeFrom(*source);
  }
}

void BatchNormProto::MergeFrom(const BatchNormProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_use_global_stats()) {
      set_use_global_stats(from.use_global_stats());
    }
    if (from.has_moving_average_fraction()) {
      set_moving_average_fraction(from.moving_average_fraction());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
}

void BatchNormProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormProto::CopyFrom(const BatchNormProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormProto::IsInitialized() const {
  return true;
}

void BatchNormProto::Swap(BatchNormProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormProto::InternalSwap(BatchNormProto* other) {
  std::swap(use_global_stats_, other->use_global_stats_);
  std::swap(moving_average_fraction_, other->moving_average_fraction_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormProto

// optional bool use_global_stats = 1;
bool BatchNormProto::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNormProto::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNormProto::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNormProto::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
bool BatchNormProto::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormProto.use_global_stats)
  return use_global_stats_;
}
void BatchNormProto::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormProto.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
bool BatchNormProto::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchNormProto::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchNormProto::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchNormProto::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
float BatchNormProto::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormProto.moving_average_fraction)
  return moving_average_fraction_;
}
void BatchNormProto::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormProto.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
bool BatchNormProto::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchNormProto::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchNormProto::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchNormProto::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
float BatchNormProto::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormProto.eps)
  return eps_;
}
void BatchNormProto::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormProto.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultinomialLogisticLossProto::kDataFieldNumber;
const int MultinomialLogisticLossProto::kLabelFieldNumber;
const int MultinomialLogisticLossProto::kLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultinomialLogisticLossProto::MultinomialLogisticLossProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MultinomialLogisticLossProto)
}
MultinomialLogisticLossProto::MultinomialLogisticLossProto(const MultinomialLogisticLossProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  loss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loss()) {
    loss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loss_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.MultinomialLogisticLossProto)
}

void MultinomialLogisticLossProto::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MultinomialLogisticLossProto::~MultinomialLogisticLossProto() {
  // @@protoc_insertion_point(destructor:caffe.MultinomialLogisticLossProto)
  SharedDtor();
}

void MultinomialLogisticLossProto::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loss_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultinomialLogisticLossProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultinomialLogisticLossProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[18].descriptor;
}

const MultinomialLogisticLossProto& MultinomialLogisticLossProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

MultinomialLogisticLossProto* MultinomialLogisticLossProto::New(::google::protobuf::Arena* arena) const {
  MultinomialLogisticLossProto* n = new MultinomialLogisticLossProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultinomialLogisticLossProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MultinomialLogisticLossProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_label()) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
    if (has_loss()) {
      GOOGLE_DCHECK(!loss_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*loss_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultinomialLogisticLossProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MultinomialLogisticLossProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MultinomialLogisticLossProto.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string label = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MultinomialLogisticLossProto.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string loss = 122;
      case 122: {
        if (tag == 978u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loss()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loss().data(), this->loss().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MultinomialLogisticLossProto.loss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MultinomialLogisticLossProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MultinomialLogisticLossProto)
  return false;
#undef DO_
}

void MultinomialLogisticLossProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MultinomialLogisticLossProto)
  // required string data = 120;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MultinomialLogisticLossProto.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->data(), output);
  }

  // required string label = 121;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MultinomialLogisticLossProto.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->label(), output);
  }

  // required string loss = 122;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loss().data(), this->loss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MultinomialLogisticLossProto.loss");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      122, this->loss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MultinomialLogisticLossProto)
}

::google::protobuf::uint8* MultinomialLogisticLossProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MultinomialLogisticLossProto)
  // required string data = 120;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MultinomialLogisticLossProto.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->data(), target);
  }

  // required string label = 121;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MultinomialLogisticLossProto.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->label(), target);
  }

  // required string loss = 122;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loss().data(), this->loss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MultinomialLogisticLossProto.loss");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        122, this->loss(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MultinomialLogisticLossProto)
  return target;
}

size_t MultinomialLogisticLossProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.MultinomialLogisticLossProto)
  size_t total_size = 0;

  if (has_data()) {
    // required string data = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_label()) {
    // required string label = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  if (has_loss()) {
    // required string loss = 122;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->loss());
  }

  return total_size;
}
size_t MultinomialLogisticLossProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MultinomialLogisticLossProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string data = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required string label = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());

    // required string loss = 122;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->loss());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultinomialLogisticLossProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MultinomialLogisticLossProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MultinomialLogisticLossProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultinomialLogisticLossProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MultinomialLogisticLossProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MultinomialLogisticLossProto)
    MergeFrom(*source);
  }
}

void MultinomialLogisticLossProto::MergeFrom(const MultinomialLogisticLossProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MultinomialLogisticLossProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_loss()) {
      set_has_loss();
      loss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loss_);
    }
  }
}

void MultinomialLogisticLossProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MultinomialLogisticLossProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultinomialLogisticLossProto::CopyFrom(const MultinomialLogisticLossProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MultinomialLogisticLossProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultinomialLogisticLossProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MultinomialLogisticLossProto::Swap(MultinomialLogisticLossProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultinomialLogisticLossProto::InternalSwap(MultinomialLogisticLossProto* other) {
  data_.Swap(&other->data_);
  label_.Swap(&other->label_);
  loss_.Swap(&other->loss_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultinomialLogisticLossProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultinomialLogisticLossProto

// required string data = 120;
bool MultinomialLogisticLossProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultinomialLogisticLossProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void MultinomialLogisticLossProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultinomialLogisticLossProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& MultinomialLogisticLossProto::data() const {
  // @@protoc_insertion_point(field_get:caffe.MultinomialLogisticLossProto.data)
  return data_.GetNoArena();
}
void MultinomialLogisticLossProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultinomialLogisticLossProto.data)
}
#if LANG_CXX11
void MultinomialLogisticLossProto::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MultinomialLogisticLossProto.data)
}
#endif
void MultinomialLogisticLossProto::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultinomialLogisticLossProto.data)
}
void MultinomialLogisticLossProto::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultinomialLogisticLossProto.data)
}
::std::string* MultinomialLogisticLossProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.MultinomialLogisticLossProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MultinomialLogisticLossProto::release_data() {
  // @@protoc_insertion_point(field_release:caffe.MultinomialLogisticLossProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MultinomialLogisticLossProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultinomialLogisticLossProto.data)
}

// required string label = 121;
bool MultinomialLogisticLossProto::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MultinomialLogisticLossProto::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
void MultinomialLogisticLossProto::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
void MultinomialLogisticLossProto::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& MultinomialLogisticLossProto::label() const {
  // @@protoc_insertion_point(field_get:caffe.MultinomialLogisticLossProto.label)
  return label_.GetNoArena();
}
void MultinomialLogisticLossProto::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultinomialLogisticLossProto.label)
}
#if LANG_CXX11
void MultinomialLogisticLossProto::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MultinomialLogisticLossProto.label)
}
#endif
void MultinomialLogisticLossProto::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultinomialLogisticLossProto.label)
}
void MultinomialLogisticLossProto::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultinomialLogisticLossProto.label)
}
::std::string* MultinomialLogisticLossProto::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:caffe.MultinomialLogisticLossProto.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MultinomialLogisticLossProto::release_label() {
  // @@protoc_insertion_point(field_release:caffe.MultinomialLogisticLossProto.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MultinomialLogisticLossProto::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultinomialLogisticLossProto.label)
}

// required string loss = 122;
bool MultinomialLogisticLossProto::has_loss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MultinomialLogisticLossProto::set_has_loss() {
  _has_bits_[0] |= 0x00000004u;
}
void MultinomialLogisticLossProto::clear_has_loss() {
  _has_bits_[0] &= ~0x00000004u;
}
void MultinomialLogisticLossProto::clear_loss() {
  loss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loss();
}
const ::std::string& MultinomialLogisticLossProto::loss() const {
  // @@protoc_insertion_point(field_get:caffe.MultinomialLogisticLossProto.loss)
  return loss_.GetNoArena();
}
void MultinomialLogisticLossProto::set_loss(const ::std::string& value) {
  set_has_loss();
  loss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultinomialLogisticLossProto.loss)
}
#if LANG_CXX11
void MultinomialLogisticLossProto::set_loss(::std::string&& value) {
  set_has_loss();
  loss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MultinomialLogisticLossProto.loss)
}
#endif
void MultinomialLogisticLossProto::set_loss(const char* value) {
  set_has_loss();
  loss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultinomialLogisticLossProto.loss)
}
void MultinomialLogisticLossProto::set_loss(const char* value, size_t size) {
  set_has_loss();
  loss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultinomialLogisticLossProto.loss)
}
::std::string* MultinomialLogisticLossProto::mutable_loss() {
  set_has_loss();
  // @@protoc_insertion_point(field_mutable:caffe.MultinomialLogisticLossProto.loss)
  return loss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MultinomialLogisticLossProto::release_loss() {
  // @@protoc_insertion_point(field_release:caffe.MultinomialLogisticLossProto.loss)
  clear_has_loss();
  return loss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MultinomialLogisticLossProto::set_allocated_loss(::std::string* loss) {
  if (loss != NULL) {
    set_has_loss();
  } else {
    clear_has_loss();
  }
  loss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loss);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultinomialLogisticLossProto.loss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CopyProto::kNumFieldNumber;
const int CopyProto::kCopyTypeFieldNumber;
const int CopyProto::kInFieldNumber;
const int CopyProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopyProto::CopyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CopyProto)
}
CopyProto::CopyProto(const CopyProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      out_(from.out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&copy_type_) -
    reinterpret_cast<char*>(&num_) + sizeof(copy_type_));
  // @@protoc_insertion_point(copy_constructor:caffe.CopyProto)
}

void CopyProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_, 0, reinterpret_cast<char*>(&copy_type_) -
    reinterpret_cast<char*>(&num_) + sizeof(copy_type_));
}

CopyProto::~CopyProto() {
  // @@protoc_insertion_point(destructor:caffe.CopyProto)
  SharedDtor();
}

void CopyProto::SharedDtor() {
}

void CopyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[19].descriptor;
}

const CopyProto& CopyProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

CopyProto* CopyProto::New(::google::protobuf::Arena* arena) const {
  CopyProto* n = new CopyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CopyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CopyProto)
  in_.Clear();
  out_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&num_, 0, reinterpret_cast<char*>(&copy_type_) -
      reinterpret_cast<char*>(&num_) + sizeof(copy_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CopyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CopyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .caffe.CopyType copy_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::CopyType_IsValid(value)) {
            set_copy_type(static_cast< ::caffe::CopyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string in = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in(this->in_size() - 1).data(),
            this->in(this->in_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.CopyProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string out = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out(this->out_size() - 1).data(),
            this->out(this->out_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.CopyProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CopyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CopyProto)
  return false;
#undef DO_
}

void CopyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CopyProto)
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // required .caffe.CopyType copy_type = 2;
  if (has_copy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->copy_type(), output);
  }

  // repeated string in = 3;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CopyProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->in(i), output);
  }

  // repeated string out = 4;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CopyProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->out(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CopyProto)
}

::google::protobuf::uint8* CopyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CopyProto)
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // required .caffe.CopyType copy_type = 2;
  if (has_copy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->copy_type(), target);
  }

  // repeated string in = 3;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CopyProto.in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->in(i), target);
  }

  // repeated string out = 4;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CopyProto.out");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->out(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CopyProto)
  return target;
}

size_t CopyProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.CopyProto)
  size_t total_size = 0;

  if (has_num()) {
    // required uint32 num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  if (has_copy_type()) {
    // required .caffe.CopyType copy_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->copy_type());
  }

  return total_size;
}
size_t CopyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CopyProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());

    // required .caffe.CopyType copy_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->copy_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string in = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0; i < this->in_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in(i));
  }

  // repeated string out = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->out_size());
  for (int i = 0; i < this->out_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->out(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CopyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CopyProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CopyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CopyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CopyProto)
    MergeFrom(*source);
  }
}

void CopyProto::MergeFrom(const CopyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CopyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.MergeFrom(from.in_);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_copy_type()) {
      set_copy_type(from.copy_type());
    }
  }
}

void CopyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CopyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyProto::CopyFrom(const CopyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CopyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CopyProto::Swap(CopyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopyProto::InternalSwap(CopyProto* other) {
  in_.UnsafeArenaSwap(&other->in_);
  out_.UnsafeArenaSwap(&other->out_);
  std::swap(num_, other->num_);
  std::swap(copy_type_, other->copy_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CopyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CopyProto

// required uint32 num = 1;
bool CopyProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CopyProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void CopyProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void CopyProto::clear_num() {
  num_ = 0u;
  clear_has_num();
}
::google::protobuf::uint32 CopyProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.num)
  return num_;
}
void CopyProto::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.CopyProto.num)
}

// required .caffe.CopyType copy_type = 2;
bool CopyProto::has_copy_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CopyProto::set_has_copy_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CopyProto::clear_has_copy_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CopyProto::clear_copy_type() {
  copy_type_ = 0;
  clear_has_copy_type();
}
::caffe::CopyType CopyProto::copy_type() const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.copy_type)
  return static_cast< ::caffe::CopyType >(copy_type_);
}
void CopyProto::set_copy_type(::caffe::CopyType value) {
  assert(::caffe::CopyType_IsValid(value));
  set_has_copy_type();
  copy_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.CopyProto.copy_type)
}

// repeated string in = 3;
int CopyProto::in_size() const {
  return in_.size();
}
void CopyProto::clear_in() {
  in_.Clear();
}
const ::std::string& CopyProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.in)
  return in_.Get(index);
}
::std::string* CopyProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.CopyProto.in)
  return in_.Mutable(index);
}
void CopyProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.CopyProto.in)
  in_.Mutable(index)->assign(value);
}
void CopyProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.CopyProto.in)
}
void CopyProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.CopyProto.in)
}
::std::string* CopyProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.CopyProto.in)
  return in_.Add();
}
void CopyProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.CopyProto.in)
}
void CopyProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.CopyProto.in)
}
void CopyProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.CopyProto.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopyProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.CopyProto.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CopyProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CopyProto.in)
  return &in_;
}

// repeated string out = 4;
int CopyProto::out_size() const {
  return out_.size();
}
void CopyProto::clear_out() {
  out_.Clear();
}
const ::std::string& CopyProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.out)
  return out_.Get(index);
}
::std::string* CopyProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.CopyProto.out)
  return out_.Mutable(index);
}
void CopyProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.CopyProto.out)
  out_.Mutable(index)->assign(value);
}
void CopyProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.CopyProto.out)
}
void CopyProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.CopyProto.out)
}
::std::string* CopyProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.CopyProto.out)
  return out_.Add();
}
void CopyProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.CopyProto.out)
}
void CopyProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.CopyProto.out)
}
void CopyProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.CopyProto.out)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopyProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.CopyProto.out)
  return out_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CopyProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CopyProto.out)
  return &out_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxingProto::kInNumFieldNumber;
const int BoxingProto::kInFieldNumber;
const int BoxingProto::kInOpFieldNumber;
const int BoxingProto::kInAxisFieldNumber;
const int BoxingProto::kBackwardInOpFieldNumber;
const int BoxingProto::kOutNumFieldNumber;
const int BoxingProto::kOutFieldNumber;
const int BoxingProto::kOutOpFieldNumber;
const int BoxingProto::kOutAxisFieldNumber;
const int BoxingProto::kBackwardOutOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxingProto::BoxingProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BoxingProto)
}
BoxingProto::BoxingProto(const BoxingProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      out_(from.out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_num_, &from.in_num_,
    reinterpret_cast<char*>(&out_op_) -
    reinterpret_cast<char*>(&in_num_) + sizeof(out_op_));
  // @@protoc_insertion_point(copy_constructor:caffe.BoxingProto)
}

void BoxingProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&in_num_, 0, reinterpret_cast<char*>(&out_axis_) -
    reinterpret_cast<char*>(&in_num_) + sizeof(out_axis_));
  backward_out_op_ = 1;
  backward_in_op_ = 3;
  out_op_ = 2;
}

BoxingProto::~BoxingProto() {
  // @@protoc_insertion_point(destructor:caffe.BoxingProto)
  SharedDtor();
}

void BoxingProto::SharedDtor() {
}

void BoxingProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxingProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[20].descriptor;
}

const BoxingProto& BoxingProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

BoxingProto* BoxingProto::New(::google::protobuf::Arena* arena) const {
  BoxingProto* n = new BoxingProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxingProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BoxingProto)
  in_.Clear();
  out_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&in_num_, 0, reinterpret_cast<char*>(&out_axis_) -
      reinterpret_cast<char*>(&in_num_) + sizeof(out_axis_));
    backward_out_op_ = 1;
    backward_in_op_ = 3;
    out_op_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoxingProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BoxingProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 in_num = 1;
      case 1: {
        if (tag == 8u) {
          set_has_in_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string in = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in(this->in_size() - 1).data(),
            this->in(this->in_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BoxingProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .caffe.BoxingOp in_op = 3 [default = CONCAT];
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BoxingOp_IsValid(value)) {
            set_in_op(static_cast< ::caffe::BoxingOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 in_axis = 4 [default = 0];
      case 4: {
        if (tag == 32u) {
          set_has_in_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BoxingOp_IsValid(value)) {
            set_backward_in_op(static_cast< ::caffe::BoxingOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string out = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out(this->out_size() - 1).data(),
            this->out(this->out_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BoxingProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .caffe.BoxingOp out_op = 13 [default = COPY];
      case 13: {
        if (tag == 104u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BoxingOp_IsValid(value)) {
            set_out_op(static_cast< ::caffe::BoxingOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 out_axis = 14 [default = 0];
      case 14: {
        if (tag == 112u) {
          set_has_out_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
      case 15: {
        if (tag == 120u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BoxingOp_IsValid(value)) {
            set_backward_out_op(static_cast< ::caffe::BoxingOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 out_num = 110;
      case 110: {
        if (tag == 880u) {
          set_has_out_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BoxingProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BoxingProto)
  return false;
#undef DO_
}

void BoxingProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BoxingProto)
  // required uint32 in_num = 1;
  if (has_in_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->in_num(), output);
  }

  // repeated string in = 2;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BoxingProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->in(i), output);
  }

  // required .caffe.BoxingOp in_op = 3 [default = CONCAT];
  if (has_in_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->in_op(), output);
  }

  // required int32 in_axis = 4 [default = 0];
  if (has_in_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->in_axis(), output);
  }

  // required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
  if (has_backward_in_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->backward_in_op(), output);
  }

  // repeated string out = 12;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BoxingProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->out(i), output);
  }

  // required .caffe.BoxingOp out_op = 13 [default = COPY];
  if (has_out_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->out_op(), output);
  }

  // required int32 out_axis = 14 [default = 0];
  if (has_out_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->out_axis(), output);
  }

  // required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
  if (has_backward_out_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->backward_out_op(), output);
  }

  // required uint32 out_num = 110;
  if (has_out_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->out_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BoxingProto)
}

::google::protobuf::uint8* BoxingProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BoxingProto)
  // required uint32 in_num = 1;
  if (has_in_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->in_num(), target);
  }

  // repeated string in = 2;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BoxingProto.in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->in(i), target);
  }

  // required .caffe.BoxingOp in_op = 3 [default = CONCAT];
  if (has_in_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->in_op(), target);
  }

  // required int32 in_axis = 4 [default = 0];
  if (has_in_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->in_axis(), target);
  }

  // required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
  if (has_backward_in_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->backward_in_op(), target);
  }

  // repeated string out = 12;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BoxingProto.out");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->out(i), target);
  }

  // required .caffe.BoxingOp out_op = 13 [default = COPY];
  if (has_out_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->out_op(), target);
  }

  // required int32 out_axis = 14 [default = 0];
  if (has_out_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->out_axis(), target);
  }

  // required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
  if (has_backward_out_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->backward_out_op(), target);
  }

  // required uint32 out_num = 110;
  if (has_out_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->out_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BoxingProto)
  return target;
}

size_t BoxingProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.BoxingProto)
  size_t total_size = 0;

  if (has_in_num()) {
    // required uint32 in_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_num());
  }

  if (has_in_op()) {
    // required .caffe.BoxingOp in_op = 3 [default = CONCAT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_op());
  }

  if (has_in_axis()) {
    // required int32 in_axis = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_axis());
  }

  if (has_out_num()) {
    // required uint32 out_num = 110;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_num());
  }

  if (has_out_axis()) {
    // required int32 out_axis = 14 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_axis());
  }

  if (has_backward_out_op()) {
    // required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->backward_out_op());
  }

  if (has_backward_in_op()) {
    // required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->backward_in_op());
  }

  if (has_out_op()) {
    // required .caffe.BoxingOp out_op = 13 [default = COPY];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->out_op());
  }

  return total_size;
}
size_t BoxingProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BoxingProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 in_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_num());

    // required .caffe.BoxingOp in_op = 3 [default = CONCAT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_op());

    // required int32 in_axis = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_axis());

    // required uint32 out_num = 110;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_num());

    // required int32 out_axis = 14 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_axis());

    // required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->backward_out_op());

    // required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->backward_in_op());

    // required .caffe.BoxingOp out_op = 13 [default = COPY];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->out_op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string in = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0; i < this->in_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in(i));
  }

  // repeated string out = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->out_size());
  for (int i = 0; i < this->out_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->out(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxingProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BoxingProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxingProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxingProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BoxingProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BoxingProto)
    MergeFrom(*source);
  }
}

void BoxingProto::MergeFrom(const BoxingProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BoxingProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.MergeFrom(from.in_);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_in_num()) {
      set_in_num(from.in_num());
    }
    if (from.has_in_op()) {
      set_in_op(from.in_op());
    }
    if (from.has_in_axis()) {
      set_in_axis(from.in_axis());
    }
    if (from.has_out_num()) {
      set_out_num(from.out_num());
    }
    if (from.has_out_axis()) {
      set_out_axis(from.out_axis());
    }
    if (from.has_backward_out_op()) {
      set_backward_out_op(from.backward_out_op());
    }
    if (from.has_backward_in_op()) {
      set_backward_in_op(from.backward_in_op());
    }
    if (from.has_out_op()) {
      set_out_op(from.out_op());
    }
  }
}

void BoxingProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BoxingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxingProto::CopyFrom(const BoxingProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BoxingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxingProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void BoxingProto::Swap(BoxingProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxingProto::InternalSwap(BoxingProto* other) {
  in_.UnsafeArenaSwap(&other->in_);
  out_.UnsafeArenaSwap(&other->out_);
  std::swap(in_num_, other->in_num_);
  std::swap(in_op_, other->in_op_);
  std::swap(in_axis_, other->in_axis_);
  std::swap(out_num_, other->out_num_);
  std::swap(out_axis_, other->out_axis_);
  std::swap(backward_out_op_, other->backward_out_op_);
  std::swap(backward_in_op_, other->backward_in_op_);
  std::swap(out_op_, other->out_op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxingProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxingProto

// required uint32 in_num = 1;
bool BoxingProto::has_in_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoxingProto::set_has_in_num() {
  _has_bits_[0] |= 0x00000001u;
}
void BoxingProto::clear_has_in_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoxingProto::clear_in_num() {
  in_num_ = 0u;
  clear_has_in_num();
}
::google::protobuf::uint32 BoxingProto::in_num() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in_num)
  return in_num_;
}
void BoxingProto::set_in_num(::google::protobuf::uint32 value) {
  set_has_in_num();
  in_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in_num)
}

// repeated string in = 2;
int BoxingProto::in_size() const {
  return in_.size();
}
void BoxingProto::clear_in() {
  in_.Clear();
}
const ::std::string& BoxingProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in)
  return in_.Get(index);
}
::std::string* BoxingProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BoxingProto.in)
  return in_.Mutable(index);
}
void BoxingProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in)
  in_.Mutable(index)->assign(value);
}
void BoxingProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BoxingProto.in)
}
void BoxingProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BoxingProto.in)
}
::std::string* BoxingProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.BoxingProto.in)
  return in_.Add();
}
void BoxingProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.BoxingProto.in)
}
void BoxingProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.BoxingProto.in)
}
void BoxingProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.BoxingProto.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoxingProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.BoxingProto.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BoxingProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BoxingProto.in)
  return &in_;
}

// required .caffe.BoxingOp in_op = 3 [default = CONCAT];
bool BoxingProto::has_in_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoxingProto::set_has_in_op() {
  _has_bits_[0] |= 0x00000002u;
}
void BoxingProto::clear_has_in_op() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoxingProto::clear_in_op() {
  in_op_ = 0;
  clear_has_in_op();
}
::caffe::BoxingOp BoxingProto::in_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in_op)
  return static_cast< ::caffe::BoxingOp >(in_op_);
}
void BoxingProto::set_in_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_in_op();
  in_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in_op)
}

// required int32 in_axis = 4 [default = 0];
bool BoxingProto::has_in_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BoxingProto::set_has_in_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void BoxingProto::clear_has_in_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void BoxingProto::clear_in_axis() {
  in_axis_ = 0;
  clear_has_in_axis();
}
::google::protobuf::int32 BoxingProto::in_axis() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in_axis)
  return in_axis_;
}
void BoxingProto::set_in_axis(::google::protobuf::int32 value) {
  set_has_in_axis();
  in_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in_axis)
}

// required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
bool BoxingProto::has_backward_in_op() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BoxingProto::set_has_backward_in_op() {
  _has_bits_[0] |= 0x00000040u;
}
void BoxingProto::clear_has_backward_in_op() {
  _has_bits_[0] &= ~0x00000040u;
}
void BoxingProto::clear_backward_in_op() {
  backward_in_op_ = 3;
  clear_has_backward_in_op();
}
::caffe::BoxingOp BoxingProto::backward_in_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.backward_in_op)
  return static_cast< ::caffe::BoxingOp >(backward_in_op_);
}
void BoxingProto::set_backward_in_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_backward_in_op();
  backward_in_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.backward_in_op)
}

// required uint32 out_num = 110;
bool BoxingProto::has_out_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BoxingProto::set_has_out_num() {
  _has_bits_[0] |= 0x00000008u;
}
void BoxingProto::clear_has_out_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void BoxingProto::clear_out_num() {
  out_num_ = 0u;
  clear_has_out_num();
}
::google::protobuf::uint32 BoxingProto::out_num() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out_num)
  return out_num_;
}
void BoxingProto::set_out_num(::google::protobuf::uint32 value) {
  set_has_out_num();
  out_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out_num)
}

// repeated string out = 12;
int BoxingProto::out_size() const {
  return out_.size();
}
void BoxingProto::clear_out() {
  out_.Clear();
}
const ::std::string& BoxingProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out)
  return out_.Get(index);
}
::std::string* BoxingProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BoxingProto.out)
  return out_.Mutable(index);
}
void BoxingProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out)
  out_.Mutable(index)->assign(value);
}
void BoxingProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BoxingProto.out)
}
void BoxingProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BoxingProto.out)
}
::std::string* BoxingProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.BoxingProto.out)
  return out_.Add();
}
void BoxingProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.BoxingProto.out)
}
void BoxingProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.BoxingProto.out)
}
void BoxingProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.BoxingProto.out)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoxingProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.BoxingProto.out)
  return out_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BoxingProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BoxingProto.out)
  return &out_;
}

// required .caffe.BoxingOp out_op = 13 [default = COPY];
bool BoxingProto::has_out_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BoxingProto::set_has_out_op() {
  _has_bits_[0] |= 0x00000080u;
}
void BoxingProto::clear_has_out_op() {
  _has_bits_[0] &= ~0x00000080u;
}
void BoxingProto::clear_out_op() {
  out_op_ = 2;
  clear_has_out_op();
}
::caffe::BoxingOp BoxingProto::out_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out_op)
  return static_cast< ::caffe::BoxingOp >(out_op_);
}
void BoxingProto::set_out_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_out_op();
  out_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out_op)
}

// required int32 out_axis = 14 [default = 0];
bool BoxingProto::has_out_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BoxingProto::set_has_out_axis() {
  _has_bits_[0] |= 0x00000010u;
}
void BoxingProto::clear_has_out_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
void BoxingProto::clear_out_axis() {
  out_axis_ = 0;
  clear_has_out_axis();
}
::google::protobuf::int32 BoxingProto::out_axis() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out_axis)
  return out_axis_;
}
void BoxingProto::set_out_axis(::google::protobuf::int32 value) {
  set_has_out_axis();
  out_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out_axis)
}

// required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
bool BoxingProto::has_backward_out_op() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BoxingProto::set_has_backward_out_op() {
  _has_bits_[0] |= 0x00000020u;
}
void BoxingProto::clear_has_backward_out_op() {
  _has_bits_[0] &= ~0x00000020u;
}
void BoxingProto::clear_backward_out_op() {
  backward_out_op_ = 1;
  clear_has_backward_out_op();
}
::caffe::BoxingOp BoxingProto::backward_out_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.backward_out_op)
  return static_cast< ::caffe::BoxingOp >(backward_out_op_);
}
void BoxingProto::set_backward_out_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_backward_out_op();
  backward_out_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.backward_out_op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelUpdateProto::kGradientFieldNumber;
const int ModelUpdateProto::kOldWeightFieldNumber;
const int ModelUpdateProto::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelUpdateProto::ModelUpdateProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ModelUpdateProto)
}
ModelUpdateProto::ModelUpdateProto(const ModelUpdateProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gradient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gradient()) {
    gradient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gradient_);
  }
  old_weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_old_weight()) {
    old_weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_weight_);
  }
  weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weight()) {
    weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.ModelUpdateProto)
}

void ModelUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  gradient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModelUpdateProto::~ModelUpdateProto() {
  // @@protoc_insertion_point(destructor:caffe.ModelUpdateProto)
  SharedDtor();
}

void ModelUpdateProto::SharedDtor() {
  gradient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_weight_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModelUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelUpdateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[21].descriptor;
}

const ModelUpdateProto& ModelUpdateProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

ModelUpdateProto* ModelUpdateProto::New(::google::protobuf::Arena* arena) const {
  ModelUpdateProto* n = new ModelUpdateProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelUpdateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ModelUpdateProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_gradient()) {
      GOOGLE_DCHECK(!gradient_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gradient_.UnsafeRawStringPointer())->clear();
    }
    if (has_old_weight()) {
      GOOGLE_DCHECK(!old_weight_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*old_weight_.UnsafeRawStringPointer())->clear();
    }
    if (has_weight()) {
      GOOGLE_DCHECK(!weight_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weight_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ModelUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gradient = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gradient()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gradient().data(), this->gradient().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ModelUpdateProto.gradient");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string old_weight = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_weight().data(), this->old_weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ModelUpdateProto.old_weight");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string weight = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ModelUpdateProto.weight");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ModelUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ModelUpdateProto)
  return false;
#undef DO_
}

void ModelUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ModelUpdateProto)
  // required string gradient = 1;
  if (has_gradient()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gradient().data(), this->gradient().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ModelUpdateProto.gradient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gradient(), output);
  }

  // required string old_weight = 2;
  if (has_old_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_weight().data(), this->old_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ModelUpdateProto.old_weight");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_weight(), output);
  }

  // required string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ModelUpdateProto.weight");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ModelUpdateProto)
}

::google::protobuf::uint8* ModelUpdateProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ModelUpdateProto)
  // required string gradient = 1;
  if (has_gradient()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gradient().data(), this->gradient().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ModelUpdateProto.gradient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gradient(), target);
  }

  // required string old_weight = 2;
  if (has_old_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_weight().data(), this->old_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ModelUpdateProto.old_weight");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_weight(), target);
  }

  // required string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ModelUpdateProto.weight");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ModelUpdateProto)
  return target;
}

size_t ModelUpdateProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.ModelUpdateProto)
  size_t total_size = 0;

  if (has_gradient()) {
    // required string gradient = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gradient());
  }

  if (has_old_weight()) {
    // required string old_weight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_weight());
  }

  if (has_weight()) {
    // required string weight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight());
  }

  return total_size;
}
size_t ModelUpdateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ModelUpdateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string gradient = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gradient());

    // required string old_weight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_weight());

    // required string weight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelUpdateProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ModelUpdateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelUpdateProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelUpdateProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ModelUpdateProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ModelUpdateProto)
    MergeFrom(*source);
  }
}

void ModelUpdateProto::MergeFrom(const ModelUpdateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ModelUpdateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_gradient()) {
      set_has_gradient();
      gradient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gradient_);
    }
    if (from.has_old_weight()) {
      set_has_old_weight();
      old_weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_weight_);
    }
    if (from.has_weight()) {
      set_has_weight();
      weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_);
    }
  }
}

void ModelUpdateProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ModelUpdateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelUpdateProto::CopyFrom(const ModelUpdateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ModelUpdateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelUpdateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ModelUpdateProto::Swap(ModelUpdateProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelUpdateProto::InternalSwap(ModelUpdateProto* other) {
  gradient_.Swap(&other->gradient_);
  old_weight_.Swap(&other->old_weight_);
  weight_.Swap(&other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelUpdateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelUpdateProto

// required string gradient = 1;
bool ModelUpdateProto::has_gradient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelUpdateProto::set_has_gradient() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelUpdateProto::clear_has_gradient() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelUpdateProto::clear_gradient() {
  gradient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gradient();
}
const ::std::string& ModelUpdateProto::gradient() const {
  // @@protoc_insertion_point(field_get:caffe.ModelUpdateProto.gradient)
  return gradient_.GetNoArena();
}
void ModelUpdateProto::set_gradient(const ::std::string& value) {
  set_has_gradient();
  gradient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ModelUpdateProto.gradient)
}
#if LANG_CXX11
void ModelUpdateProto::set_gradient(::std::string&& value) {
  set_has_gradient();
  gradient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ModelUpdateProto.gradient)
}
#endif
void ModelUpdateProto::set_gradient(const char* value) {
  set_has_gradient();
  gradient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ModelUpdateProto.gradient)
}
void ModelUpdateProto::set_gradient(const char* value, size_t size) {
  set_has_gradient();
  gradient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ModelUpdateProto.gradient)
}
::std::string* ModelUpdateProto::mutable_gradient() {
  set_has_gradient();
  // @@protoc_insertion_point(field_mutable:caffe.ModelUpdateProto.gradient)
  return gradient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelUpdateProto::release_gradient() {
  // @@protoc_insertion_point(field_release:caffe.ModelUpdateProto.gradient)
  clear_has_gradient();
  return gradient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelUpdateProto::set_allocated_gradient(::std::string* gradient) {
  if (gradient != NULL) {
    set_has_gradient();
  } else {
    clear_has_gradient();
  }
  gradient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gradient);
  // @@protoc_insertion_point(field_set_allocated:caffe.ModelUpdateProto.gradient)
}

// required string old_weight = 2;
bool ModelUpdateProto::has_old_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelUpdateProto::set_has_old_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelUpdateProto::clear_has_old_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelUpdateProto::clear_old_weight() {
  old_weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_weight();
}
const ::std::string& ModelUpdateProto::old_weight() const {
  // @@protoc_insertion_point(field_get:caffe.ModelUpdateProto.old_weight)
  return old_weight_.GetNoArena();
}
void ModelUpdateProto::set_old_weight(const ::std::string& value) {
  set_has_old_weight();
  old_weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ModelUpdateProto.old_weight)
}
#if LANG_CXX11
void ModelUpdateProto::set_old_weight(::std::string&& value) {
  set_has_old_weight();
  old_weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ModelUpdateProto.old_weight)
}
#endif
void ModelUpdateProto::set_old_weight(const char* value) {
  set_has_old_weight();
  old_weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ModelUpdateProto.old_weight)
}
void ModelUpdateProto::set_old_weight(const char* value, size_t size) {
  set_has_old_weight();
  old_weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ModelUpdateProto.old_weight)
}
::std::string* ModelUpdateProto::mutable_old_weight() {
  set_has_old_weight();
  // @@protoc_insertion_point(field_mutable:caffe.ModelUpdateProto.old_weight)
  return old_weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelUpdateProto::release_old_weight() {
  // @@protoc_insertion_point(field_release:caffe.ModelUpdateProto.old_weight)
  clear_has_old_weight();
  return old_weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelUpdateProto::set_allocated_old_weight(::std::string* old_weight) {
  if (old_weight != NULL) {
    set_has_old_weight();
  } else {
    clear_has_old_weight();
  }
  old_weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_weight);
  // @@protoc_insertion_point(field_set_allocated:caffe.ModelUpdateProto.old_weight)
}

// required string weight = 3;
bool ModelUpdateProto::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelUpdateProto::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelUpdateProto::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelUpdateProto::clear_weight() {
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight();
}
const ::std::string& ModelUpdateProto::weight() const {
  // @@protoc_insertion_point(field_get:caffe.ModelUpdateProto.weight)
  return weight_.GetNoArena();
}
void ModelUpdateProto::set_weight(const ::std::string& value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ModelUpdateProto.weight)
}
#if LANG_CXX11
void ModelUpdateProto::set_weight(::std::string&& value) {
  set_has_weight();
  weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ModelUpdateProto.weight)
}
#endif
void ModelUpdateProto::set_weight(const char* value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ModelUpdateProto.weight)
}
void ModelUpdateProto::set_weight(const char* value, size_t size) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ModelUpdateProto.weight)
}
::std::string* ModelUpdateProto::mutable_weight() {
  set_has_weight();
  // @@protoc_insertion_point(field_mutable:caffe.ModelUpdateProto.weight)
  return weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelUpdateProto::release_weight() {
  // @@protoc_insertion_point(field_release:caffe.ModelUpdateProto.weight)
  clear_has_weight();
  return weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelUpdateProto::set_allocated_weight(::std::string* weight) {
  if (weight != NULL) {
    set_has_weight();
  } else {
    clear_has_weight();
  }
  weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight);
  // @@protoc_insertion_point(field_set_allocated:caffe.ModelUpdateProto.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NullUpdateProto::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullUpdateProto::NullUpdateProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NullUpdateProto)
}
NullUpdateProto::NullUpdateProto(const NullUpdateProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weight()) {
    weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.NullUpdateProto)
}

void NullUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NullUpdateProto::~NullUpdateProto() {
  // @@protoc_insertion_point(destructor:caffe.NullUpdateProto)
  SharedDtor();
}

void NullUpdateProto::SharedDtor() {
  weight_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NullUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullUpdateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[22].descriptor;
}

const NullUpdateProto& NullUpdateProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

NullUpdateProto* NullUpdateProto::New(::google::protobuf::Arena* arena) const {
  NullUpdateProto* n = new NullUpdateProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NullUpdateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NullUpdateProto)
  if (has_weight()) {
    GOOGLE_DCHECK(!weight_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*weight_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NullUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NullUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string weight = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NullUpdateProto.weight");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NullUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NullUpdateProto)
  return false;
#undef DO_
}

void NullUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NullUpdateProto)
  // required string weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NullUpdateProto.weight");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NullUpdateProto)
}

::google::protobuf::uint8* NullUpdateProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NullUpdateProto)
  // required string weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NullUpdateProto.weight");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NullUpdateProto)
  return target;
}

size_t NullUpdateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NullUpdateProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string weight = 1;
  if (has_weight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullUpdateProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NullUpdateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NullUpdateProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NullUpdateProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NullUpdateProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NullUpdateProto)
    MergeFrom(*source);
  }
}

void NullUpdateProto::MergeFrom(const NullUpdateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NullUpdateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight()) {
    set_has_weight();
    weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_);
  }
}

void NullUpdateProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NullUpdateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullUpdateProto::CopyFrom(const NullUpdateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NullUpdateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullUpdateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NullUpdateProto::Swap(NullUpdateProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullUpdateProto::InternalSwap(NullUpdateProto* other) {
  weight_.Swap(&other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NullUpdateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NullUpdateProto

// required string weight = 1;
bool NullUpdateProto::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NullUpdateProto::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void NullUpdateProto::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void NullUpdateProto::clear_weight() {
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight();
}
const ::std::string& NullUpdateProto::weight() const {
  // @@protoc_insertion_point(field_get:caffe.NullUpdateProto.weight)
  return weight_.GetNoArena();
}
void NullUpdateProto::set_weight(const ::std::string& value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NullUpdateProto.weight)
}
#if LANG_CXX11
void NullUpdateProto::set_weight(::std::string&& value) {
  set_has_weight();
  weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NullUpdateProto.weight)
}
#endif
void NullUpdateProto::set_weight(const char* value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NullUpdateProto.weight)
}
void NullUpdateProto::set_weight(const char* value, size_t size) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NullUpdateProto.weight)
}
::std::string* NullUpdateProto::mutable_weight() {
  set_has_weight();
  // @@protoc_insertion_point(field_mutable:caffe.NullUpdateProto.weight)
  return weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NullUpdateProto::release_weight() {
  // @@protoc_insertion_point(field_release:caffe.NullUpdateProto.weight)
  clear_has_weight();
  return weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NullUpdateProto::set_allocated_weight(::std::string* weight) {
  if (weight != NULL) {
    set_has_weight();
  } else {
    clear_has_weight();
  }
  weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight);
  // @@protoc_insertion_point(field_set_allocated:caffe.NullUpdateProto.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetProto::kInEnvelopeFieldNumber;
const int NetProto::kInNumFieldNumber;
const int NetProto::kInFieldNumber;
const int NetProto::kOutEnvelopeFieldNumber;
const int NetProto::kOutNumFieldNumber;
const int NetProto::kOutFieldNumber;
const int NetProto::kForwardIsSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetProto::NetProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetProto)
}
NetProto::NetProto(const NetProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      out_(from.out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_envelope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in_envelope()) {
    in_envelope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_envelope_);
  }
  out_envelope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out_envelope()) {
    out_envelope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_envelope_);
  }
  ::memcpy(&in_num_, &from.in_num_,
    reinterpret_cast<char*>(&forward_is_sender_) -
    reinterpret_cast<char*>(&in_num_) + sizeof(forward_is_sender_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetProto)
}

void NetProto::SharedCtor() {
  _cached_size_ = 0;
  in_envelope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_envelope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_num_, 0, reinterpret_cast<char*>(&out_num_) -
    reinterpret_cast<char*>(&in_num_) + sizeof(out_num_));
  forward_is_sender_ = true;
}

NetProto::~NetProto() {
  // @@protoc_insertion_point(destructor:caffe.NetProto)
  SharedDtor();
}

void NetProto::SharedDtor() {
  in_envelope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_envelope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[23].descriptor;
}

const NetProto& NetProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

NetProto* NetProto::New(::google::protobuf::Arena* arena) const {
  NetProto* n = new NetProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetProto)
  in_.Clear();
  out_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in_envelope()) {
      GOOGLE_DCHECK(!in_envelope_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_envelope_.UnsafeRawStringPointer())->clear();
    }
    if (has_out_envelope()) {
      GOOGLE_DCHECK(!out_envelope_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_envelope_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&in_num_, 0, reinterpret_cast<char*>(&out_num_) -
      reinterpret_cast<char*>(&in_num_) + sizeof(out_num_));
    forward_is_sender_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string in_envelope = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in_envelope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in_envelope().data(), this->in_envelope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetProto.in_envelope");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 in_num = 2;
      case 2: {
        if (tag == 16u) {
          set_has_in_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string in = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in(this->in_size() - 1).data(),
            this->in(this->in_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out_envelope = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out_envelope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out_envelope().data(), this->out_envelope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetProto.out_envelope");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 out_num = 5;
      case 5: {
        if (tag == 40u) {
          set_has_out_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string out = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out(this->out_size() - 1).data(),
            this->out(this->out_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool forward_is_sender = 7 [default = true];
      case 7: {
        if (tag == 56u) {
          set_has_forward_is_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_is_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetProto)
  return false;
#undef DO_
}

void NetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetProto)
  // required string in_envelope = 1;
  if (has_in_envelope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in_envelope().data(), this->in_envelope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.in_envelope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->in_envelope(), output);
  }

  // required uint32 in_num = 2;
  if (has_in_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->in_num(), output);
  }

  // repeated string in = 3;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->in(i), output);
  }

  // required string out_envelope = 4;
  if (has_out_envelope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_envelope().data(), this->out_envelope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.out_envelope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->out_envelope(), output);
  }

  // required uint32 out_num = 5;
  if (has_out_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->out_num(), output);
  }

  // repeated string out = 6;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->out(i), output);
  }

  // required bool forward_is_sender = 7 [default = true];
  if (has_forward_is_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->forward_is_sender(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetProto)
}

::google::protobuf::uint8* NetProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetProto)
  // required string in_envelope = 1;
  if (has_in_envelope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in_envelope().data(), this->in_envelope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.in_envelope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->in_envelope(), target);
  }

  // required uint32 in_num = 2;
  if (has_in_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->in_num(), target);
  }

  // repeated string in = 3;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->in(i), target);
  }

  // required string out_envelope = 4;
  if (has_out_envelope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_envelope().data(), this->out_envelope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.out_envelope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->out_envelope(), target);
  }

  // required uint32 out_num = 5;
  if (has_out_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->out_num(), target);
  }

  // repeated string out = 6;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetProto.out");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->out(i), target);
  }

  // required bool forward_is_sender = 7 [default = true];
  if (has_forward_is_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->forward_is_sender(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetProto)
  return target;
}

size_t NetProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.NetProto)
  size_t total_size = 0;

  if (has_in_envelope()) {
    // required string in_envelope = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in_envelope());
  }

  if (has_out_envelope()) {
    // required string out_envelope = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out_envelope());
  }

  if (has_in_num()) {
    // required uint32 in_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_num());
  }

  if (has_out_num()) {
    // required uint32 out_num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_num());
  }

  if (has_forward_is_sender()) {
    // required bool forward_is_sender = 7 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t NetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string in_envelope = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in_envelope());

    // required string out_envelope = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out_envelope());

    // required uint32 in_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_num());

    // required uint32 out_num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_num());

    // required bool forward_is_sender = 7 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string in = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0; i < this->in_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in(i));
  }

  // repeated string out = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->out_size());
  for (int i = 0; i < this->out_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->out(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NetProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetProto)
    MergeFrom(*source);
  }
}

void NetProto::MergeFrom(const NetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.MergeFrom(from.in_);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_in_envelope()) {
      set_has_in_envelope();
      in_envelope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_envelope_);
    }
    if (from.has_out_envelope()) {
      set_has_out_envelope();
      out_envelope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_envelope_);
    }
    if (from.has_in_num()) {
      set_in_num(from.in_num());
    }
    if (from.has_out_num()) {
      set_out_num(from.out_num());
    }
    if (from.has_forward_is_sender()) {
      set_forward_is_sender(from.forward_is_sender());
    }
  }
}

void NetProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto::CopyFrom(const NetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void NetProto::Swap(NetProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetProto::InternalSwap(NetProto* other) {
  in_.UnsafeArenaSwap(&other->in_);
  out_.UnsafeArenaSwap(&other->out_);
  in_envelope_.Swap(&other->in_envelope_);
  out_envelope_.Swap(&other->out_envelope_);
  std::swap(in_num_, other->in_num_);
  std::swap(out_num_, other->out_num_);
  std::swap(forward_is_sender_, other->forward_is_sender_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetProto

// required string in_envelope = 1;
bool NetProto::has_in_envelope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetProto::set_has_in_envelope() {
  _has_bits_[0] |= 0x00000001u;
}
void NetProto::clear_has_in_envelope() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetProto::clear_in_envelope() {
  in_envelope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in_envelope();
}
const ::std::string& NetProto::in_envelope() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.in_envelope)
  return in_envelope_.GetNoArena();
}
void NetProto::set_in_envelope(const ::std::string& value) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetProto.in_envelope)
}
#if LANG_CXX11
void NetProto::set_in_envelope(::std::string&& value) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetProto.in_envelope)
}
#endif
void NetProto::set_in_envelope(const char* value) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.in_envelope)
}
void NetProto::set_in_envelope(const char* value, size_t size) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.in_envelope)
}
::std::string* NetProto::mutable_in_envelope() {
  set_has_in_envelope();
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.in_envelope)
  return in_envelope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetProto::release_in_envelope() {
  // @@protoc_insertion_point(field_release:caffe.NetProto.in_envelope)
  clear_has_in_envelope();
  return in_envelope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetProto::set_allocated_in_envelope(::std::string* in_envelope) {
  if (in_envelope != NULL) {
    set_has_in_envelope();
  } else {
    clear_has_in_envelope();
  }
  in_envelope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_envelope);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetProto.in_envelope)
}

// required uint32 in_num = 2;
bool NetProto::has_in_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetProto::set_has_in_num() {
  _has_bits_[0] |= 0x00000004u;
}
void NetProto::clear_has_in_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetProto::clear_in_num() {
  in_num_ = 0u;
  clear_has_in_num();
}
::google::protobuf::uint32 NetProto::in_num() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.in_num)
  return in_num_;
}
void NetProto::set_in_num(::google::protobuf::uint32 value) {
  set_has_in_num();
  in_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetProto.in_num)
}

// repeated string in = 3;
int NetProto::in_size() const {
  return in_.size();
}
void NetProto::clear_in() {
  in_.Clear();
}
const ::std::string& NetProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.in)
  return in_.Get(index);
}
::std::string* NetProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.in)
  return in_.Mutable(index);
}
void NetProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetProto.in)
  in_.Mutable(index)->assign(value);
}
void NetProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.in)
}
void NetProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.in)
}
::std::string* NetProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetProto.in)
  return in_.Add();
}
void NetProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetProto.in)
}
void NetProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetProto.in)
}
void NetProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetProto.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.NetProto.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetProto.in)
  return &in_;
}

// required string out_envelope = 4;
bool NetProto::has_out_envelope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetProto::set_has_out_envelope() {
  _has_bits_[0] |= 0x00000002u;
}
void NetProto::clear_has_out_envelope() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetProto::clear_out_envelope() {
  out_envelope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out_envelope();
}
const ::std::string& NetProto::out_envelope() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.out_envelope)
  return out_envelope_.GetNoArena();
}
void NetProto::set_out_envelope(const ::std::string& value) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetProto.out_envelope)
}
#if LANG_CXX11
void NetProto::set_out_envelope(::std::string&& value) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetProto.out_envelope)
}
#endif
void NetProto::set_out_envelope(const char* value) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.out_envelope)
}
void NetProto::set_out_envelope(const char* value, size_t size) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.out_envelope)
}
::std::string* NetProto::mutable_out_envelope() {
  set_has_out_envelope();
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.out_envelope)
  return out_envelope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetProto::release_out_envelope() {
  // @@protoc_insertion_point(field_release:caffe.NetProto.out_envelope)
  clear_has_out_envelope();
  return out_envelope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetProto::set_allocated_out_envelope(::std::string* out_envelope) {
  if (out_envelope != NULL) {
    set_has_out_envelope();
  } else {
    clear_has_out_envelope();
  }
  out_envelope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_envelope);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetProto.out_envelope)
}

// required uint32 out_num = 5;
bool NetProto::has_out_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetProto::set_has_out_num() {
  _has_bits_[0] |= 0x00000008u;
}
void NetProto::clear_has_out_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetProto::clear_out_num() {
  out_num_ = 0u;
  clear_has_out_num();
}
::google::protobuf::uint32 NetProto::out_num() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.out_num)
  return out_num_;
}
void NetProto::set_out_num(::google::protobuf::uint32 value) {
  set_has_out_num();
  out_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetProto.out_num)
}

// repeated string out = 6;
int NetProto::out_size() const {
  return out_.size();
}
void NetProto::clear_out() {
  out_.Clear();
}
const ::std::string& NetProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.out)
  return out_.Get(index);
}
::std::string* NetProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.out)
  return out_.Mutable(index);
}
void NetProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetProto.out)
  out_.Mutable(index)->assign(value);
}
void NetProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.out)
}
void NetProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.out)
}
::std::string* NetProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetProto.out)
  return out_.Add();
}
void NetProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetProto.out)
}
void NetProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetProto.out)
}
void NetProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetProto.out)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.NetProto.out)
  return out_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetProto.out)
  return &out_;
}

// required bool forward_is_sender = 7 [default = true];
bool NetProto::has_forward_is_sender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetProto::set_has_forward_is_sender() {
  _has_bits_[0] |= 0x00000010u;
}
void NetProto::clear_has_forward_is_sender() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetProto::clear_forward_is_sender() {
  forward_is_sender_ = true;
  clear_has_forward_is_sender();
}
bool NetProto::forward_is_sender() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.forward_is_sender)
  return forward_is_sender_;
}
void NetProto::set_forward_is_sender(bool value) {
  set_has_forward_is_sender();
  forward_is_sender_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetProto.forward_is_sender)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitProto::kOutNumFieldNumber;
const int SplitProto::kInFieldNumber;
const int SplitProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitProto::SplitProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SplitProto)
}
SplitProto::SplitProto(const SplitProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      out_(from.out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_num_ = from.out_num_;
  // @@protoc_insertion_point(copy_constructor:caffe.SplitProto)
}

void SplitProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_num_ = 0u;
}

SplitProto::~SplitProto() {
  // @@protoc_insertion_point(destructor:caffe.SplitProto)
  SharedDtor();
}

void SplitProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SplitProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[24].descriptor;
}

const SplitProto& SplitProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

SplitProto* SplitProto::New(::google::protobuf::Arena* arena) const {
  SplitProto* n = new SplitProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SplitProto)
  out_.Clear();
  if (has_in()) {
    GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*in_.UnsafeRawStringPointer())->clear();
  }
  out_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SplitProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SplitProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 out_num = 1;
      case 1: {
        if (tag == 8u) {
          set_has_out_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SplitProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string out = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out(this->out_size() - 1).data(),
            this->out(this->out_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SplitProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SplitProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SplitProto)
  return false;
#undef DO_
}

void SplitProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SplitProto)
  // required uint32 out_num = 1;
  if (has_out_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_num(), output);
  }

  // required string in = 2;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SplitProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->in(), output);
  }

  // repeated string out = 3;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SplitProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->out(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SplitProto)
}

::google::protobuf::uint8* SplitProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SplitProto)
  // required uint32 out_num = 1;
  if (has_out_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_num(), target);
  }

  // required string in = 2;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SplitProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->in(), target);
  }

  // repeated string out = 3;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out(i).data(), this->out(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SplitProto.out");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->out(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SplitProto)
  return target;
}

size_t SplitProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.SplitProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out_num()) {
    // required uint32 out_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_num());
  }

  return total_size;
}
size_t SplitProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SplitProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required uint32 out_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string out = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->out_size());
  for (int i = 0; i < this->out_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->out(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SplitProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SplitProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SplitProto)
    MergeFrom(*source);
  }
}

void SplitProto::MergeFrom(const SplitProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SplitProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out_num()) {
      set_out_num(from.out_num());
    }
  }
}

void SplitProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SplitProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitProto::CopyFrom(const SplitProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SplitProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SplitProto::Swap(SplitProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitProto::InternalSwap(SplitProto* other) {
  out_.UnsafeArenaSwap(&other->out_);
  in_.Swap(&other->in_);
  std::swap(out_num_, other->out_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitProto

// required uint32 out_num = 1;
bool SplitProto::has_out_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SplitProto::set_has_out_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SplitProto::clear_has_out_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SplitProto::clear_out_num() {
  out_num_ = 0u;
  clear_has_out_num();
}
::google::protobuf::uint32 SplitProto::out_num() const {
  // @@protoc_insertion_point(field_get:caffe.SplitProto.out_num)
  return out_num_;
}
void SplitProto::set_out_num(::google::protobuf::uint32 value) {
  set_has_out_num();
  out_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.SplitProto.out_num)
}

// required string in = 2;
bool SplitProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& SplitProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.SplitProto.in)
  return in_.GetNoArena();
}
void SplitProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SplitProto.in)
}
#if LANG_CXX11
void SplitProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SplitProto.in)
}
#endif
void SplitProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SplitProto.in)
}
void SplitProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SplitProto.in)
}
::std::string* SplitProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.SplitProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SplitProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.SplitProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.SplitProto.in)
}

// repeated string out = 3;
int SplitProto::out_size() const {
  return out_.size();
}
void SplitProto::clear_out() {
  out_.Clear();
}
const ::std::string& SplitProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SplitProto.out)
  return out_.Get(index);
}
::std::string* SplitProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SplitProto.out)
  return out_.Mutable(index);
}
void SplitProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SplitProto.out)
  out_.Mutable(index)->assign(value);
}
void SplitProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SplitProto.out)
}
void SplitProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SplitProto.out)
}
::std::string* SplitProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SplitProto.out)
  return out_.Add();
}
void SplitProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SplitProto.out)
}
void SplitProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SplitProto.out)
}
void SplitProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SplitProto.out)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SplitProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.SplitProto.out)
  return out_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SplitProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SplitProto.out)
  return &out_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatProto::kInNumFieldNumber;
const int ConcatProto::kInFieldNumber;
const int ConcatProto::kOutFieldNumber;
const int ConcatProto::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatProto::ConcatProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatProto)
}
ConcatProto::ConcatProto(const ConcatProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  ::memcpy(&in_num_, &from.in_num_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&in_num_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatProto)
}

void ConcatProto::SharedCtor() {
  _cached_size_ = 0;
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  in_num_ = 0u;
  axis_ = 1;
}

ConcatProto::~ConcatProto() {
  // @@protoc_insertion_point(destructor:caffe.ConcatProto)
  SharedDtor();
}

void ConcatProto::SharedDtor() {
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConcatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[25].descriptor;
}

const ConcatProto& ConcatProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

ConcatProto* ConcatProto::New(::google::protobuf::Arena* arena) const {
  ConcatProto* n = new ConcatProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConcatProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatProto)
  in_.Clear();
  if (has_out()) {
    GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*out_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    in_num_ = 0u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConcatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 in_num = 1;
      case 1: {
        if (tag == 8u) {
          set_has_in_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string in = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in(this->in_size() - 1).data(),
            this->in(this->in_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ConcatProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ConcatProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 axis = 4 [default = 1];
      case 4: {
        if (tag == 32u) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatProto)
  return false;
#undef DO_
}

void ConcatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatProto)
  // required uint32 in_num = 1;
  if (has_in_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->in_num(), output);
  }

  // repeated string in = 2;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConcatProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->in(i), output);
  }

  // required string out = 3;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConcatProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->out(), output);
  }

  // required int32 axis = 4 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatProto)
}

::google::protobuf::uint8* ConcatProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatProto)
  // required uint32 in_num = 1;
  if (has_in_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->in_num(), target);
  }

  // repeated string in = 2;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), this->in(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConcatProto.in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->in(i), target);
  }

  // required string out = 3;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConcatProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->out(), target);
  }

  // required int32 axis = 4 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatProto)
  return target;
}

size_t ConcatProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.ConcatProto)
  size_t total_size = 0;

  if (has_out()) {
    // required string out = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  if (has_in_num()) {
    // required uint32 in_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_num());
  }

  if (has_axis()) {
    // required int32 axis = 4 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());
  }

  return total_size;
}
size_t ConcatProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string out = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

    // required uint32 in_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_num());

    // required int32 axis = 4 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string in = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0; i < this->in_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatProto)
    MergeFrom(*source);
  }
}

void ConcatProto::MergeFrom(const ConcatProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.MergeFrom(from.in_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_in_num()) {
      set_in_num(from.in_num());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
}

void ConcatProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatProto::CopyFrom(const ConcatProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConcatProto::Swap(ConcatProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatProto::InternalSwap(ConcatProto* other) {
  in_.UnsafeArenaSwap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(in_num_, other->in_num_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatProto

// required uint32 in_num = 1;
bool ConcatProto::has_in_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConcatProto::set_has_in_num() {
  _has_bits_[0] |= 0x00000002u;
}
void ConcatProto::clear_has_in_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConcatProto::clear_in_num() {
  in_num_ = 0u;
  clear_has_in_num();
}
::google::protobuf::uint32 ConcatProto::in_num() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.in_num)
  return in_num_;
}
void ConcatProto::set_in_num(::google::protobuf::uint32 value) {
  set_has_in_num();
  in_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.in_num)
}

// repeated string in = 2;
int ConcatProto::in_size() const {
  return in_.size();
}
void ConcatProto::clear_in() {
  in_.Clear();
}
const ::std::string& ConcatProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.in)
  return in_.Get(index);
}
::std::string* ConcatProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ConcatProto.in)
  return in_.Mutable(index);
}
void ConcatProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.in)
  in_.Mutable(index)->assign(value);
}
void ConcatProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ConcatProto.in)
}
void ConcatProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ConcatProto.in)
}
::std::string* ConcatProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.ConcatProto.in)
  return in_.Add();
}
void ConcatProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.ConcatProto.in)
}
void ConcatProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.ConcatProto.in)
}
void ConcatProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.ConcatProto.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConcatProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.ConcatProto.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ConcatProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConcatProto.in)
  return &in_;
}

// required string out = 3;
bool ConcatProto::has_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConcatProto::set_has_out() {
  _has_bits_[0] |= 0x00000001u;
}
void ConcatProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConcatProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& ConcatProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.out)
  return out_.GetNoArena();
}
void ConcatProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.out)
}
#if LANG_CXX11
void ConcatProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConcatProto.out)
}
#endif
void ConcatProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConcatProto.out)
}
void ConcatProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConcatProto.out)
}
::std::string* ConcatProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.ConcatProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConcatProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.ConcatProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConcatProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConcatProto.out)
}

// required int32 axis = 4 [default = 1];
bool ConcatProto::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConcatProto::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void ConcatProto::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConcatProto::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConcatProto::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.axis)
  return axis_;
}
void ConcatProto::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionProto::kNumOutputFieldNumber;
const int ConvolutionProto::kBiasTermFieldNumber;
const int ConvolutionProto::kPadFieldNumber;
const int ConvolutionProto::kPadHFieldNumber;
const int ConvolutionProto::kPadWFieldNumber;
const int ConvolutionProto::kKernelSizeFieldNumber;
const int ConvolutionProto::kKernelHFieldNumber;
const int ConvolutionProto::kKernelWFieldNumber;
const int ConvolutionProto::kGroupFieldNumber;
const int ConvolutionProto::kStrideFieldNumber;
const int ConvolutionProto::kStrideHFieldNumber;
const int ConvolutionProto::kStrideWFieldNumber;
const int ConvolutionProto::kWeightFillerFieldNumber;
const int ConvolutionProto::kBiasFillerFieldNumber;
const int ConvolutionProto::kEngineFieldNumber;
const int ConvolutionProto::kParamFieldNumber;
const int ConvolutionProto::kInFieldNumber;
const int ConvolutionProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionProto::ConvolutionProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionProto)
}
ConvolutionProto::ConvolutionProto(const ConvolutionProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(group_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionProto)
}

void ConvolutionProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(engine_));
  stride_ = 1u;
  bias_term_ = true;
  group_ = 1u;
}

ConvolutionProto::~ConvolutionProto() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionProto)
  SharedDtor();
}

void ConvolutionProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void ConvolutionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[26].descriptor;
}

const ConvolutionProto& ConvolutionProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

ConvolutionProto* ConvolutionProto::New(::google::protobuf::Arena* arena) const {
  ConvolutionProto* n = new ConvolutionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionProto)
  param_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&pad_w_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(pad_w_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&kernel_size_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&kernel_size_) + sizeof(engine_));
    stride_ = 1u;
    bias_term_ = true;
  }
  group_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvolutionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16u) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 3 [default = 0];
      case 3: {
        if (tag == 24u) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_size = 4;
      case 4: {
        if (tag == 32u) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (tag == 40u) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 6 [default = 1];
      case 6: {
        if (tag == 48u) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72u) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80u) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (tag == 88u) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (tag == 96u) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (tag == 104u) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (tag == 112u) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (tag == 120u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ConvolutionProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.ParamSpec param = 100;
      case 100: {
        if (tag == 802u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ConvolutionProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ConvolutionProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionProto)
  return false;
#undef DO_
}

void ConvolutionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionProto)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional uint32 pad = 3 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad(), output);
  }

  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kernel_size(), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // repeated .caffe.ParamSpec param = 100;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->param(i), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConvolutionProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConvolutionProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionProto)
}

::google::protobuf::uint8* ConvolutionProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionProto)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional uint32 pad = 3 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad(), target);
  }

  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kernel_size(), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // optional uint32 stride = 6 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, false, target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // repeated .caffe.ParamSpec param = 100;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->param(i), false, target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConvolutionProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConvolutionProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionProto)
  return target;
}

size_t ConvolutionProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.ConvolutionProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t ConvolutionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .caffe.ParamSpec param = 100;
  {
    unsigned int count = this->param_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad = 3 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 kernel_size = 4;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional uint32 stride = 6 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionProto)
    MergeFrom(*source);
  }
}

void ConvolutionProto::MergeFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
  }
  if (from.has_group()) {
    set_group(from.group());
  }
}

void ConvolutionProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionProto::CopyFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConvolutionProto::Swap(ConvolutionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionProto::InternalSwap(ConvolutionProto* other) {
  param_.UnsafeArenaSwap(&other->param_);
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(pad_, other->pad_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(engine_, other->engine_);
  std::swap(stride_, other->stride_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(group_, other->group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionProto

// optional uint32 num_output = 1;
bool ConvolutionProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConvolutionProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000010u;
}
void ConvolutionProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConvolutionProto::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 ConvolutionProto::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.num_output)
  return num_output_;
}
void ConvolutionProto::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.num_output)
}

// optional bool bias_term = 2 [default = true];
bool ConvolutionProto::has_bias_term() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ConvolutionProto::set_has_bias_term() {
  _has_bits_[0] |= 0x00008000u;
}
void ConvolutionProto::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00008000u;
}
void ConvolutionProto::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool ConvolutionProto::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.bias_term)
  return bias_term_;
}
void ConvolutionProto::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.bias_term)
}

// optional uint32 pad = 3 [default = 0];
bool ConvolutionProto::has_pad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConvolutionProto::set_has_pad() {
  _has_bits_[0] |= 0x00000020u;
}
void ConvolutionProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConvolutionProto::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 ConvolutionProto::pad() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.pad)
  return pad_;
}
void ConvolutionProto::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.pad)
}

// optional uint32 pad_h = 9 [default = 0];
bool ConvolutionProto::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionProto::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionProto::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionProto::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 ConvolutionProto::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.pad_h)
  return pad_h_;
}
void ConvolutionProto::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool ConvolutionProto::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionProto::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionProto::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionProto::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 ConvolutionProto::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.pad_w)
  return pad_w_;
}
void ConvolutionProto::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.pad_w)
}

// optional uint32 kernel_size = 4;
bool ConvolutionProto::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionProto::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionProto::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionProto::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 ConvolutionProto::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.kernel_size)
  return kernel_size_;
}
void ConvolutionProto::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.kernel_size)
}

// optional uint32 kernel_h = 11;
bool ConvolutionProto::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionProto::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionProto::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionProto::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 ConvolutionProto::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.kernel_h)
  return kernel_h_;
}
void ConvolutionProto::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.kernel_h)
}

// optional uint32 kernel_w = 12;
bool ConvolutionProto::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionProto::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionProto::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionProto::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 ConvolutionProto::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.kernel_w)
  return kernel_w_;
}
void ConvolutionProto::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.kernel_w)
}

// optional uint32 group = 5 [default = 1];
bool ConvolutionProto::has_group() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ConvolutionProto::set_has_group() {
  _has_bits_[0] |= 0x00010000u;
}
void ConvolutionProto::clear_has_group() {
  _has_bits_[0] &= ~0x00010000u;
}
void ConvolutionProto::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 ConvolutionProto::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.group)
  return group_;
}
void ConvolutionProto::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.group)
}

// optional uint32 stride = 6 [default = 1];
bool ConvolutionProto::has_stride() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ConvolutionProto::set_has_stride() {
  _has_bits_[0] |= 0x00004000u;
}
void ConvolutionProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00004000u;
}
void ConvolutionProto::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 ConvolutionProto::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.stride)
  return stride_;
}
void ConvolutionProto::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.stride)
}

// optional uint32 stride_h = 13;
bool ConvolutionProto::has_stride_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConvolutionProto::set_has_stride_h() {
  _has_bits_[0] |= 0x00000800u;
}
void ConvolutionProto::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConvolutionProto::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 ConvolutionProto::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.stride_h)
  return stride_h_;
}
void ConvolutionProto::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.stride_h)
}

// optional uint32 stride_w = 14;
bool ConvolutionProto::has_stride_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConvolutionProto::set_has_stride_w() {
  _has_bits_[0] |= 0x00001000u;
}
void ConvolutionProto::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConvolutionProto::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 ConvolutionProto::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.stride_w)
  return stride_w_;
}
void ConvolutionProto::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.stride_w)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool ConvolutionProto::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConvolutionProto::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void ConvolutionProto::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConvolutionProto::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& ConvolutionProto::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionProto::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* ConvolutionProto::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void ConvolutionProto::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool ConvolutionProto::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConvolutionProto::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void ConvolutionProto::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConvolutionProto::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ConvolutionProto::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionProto::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ConvolutionProto::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ConvolutionProto::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.bias_filler)
}

// optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
bool ConvolutionProto::has_engine() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConvolutionProto::set_has_engine() {
  _has_bits_[0] |= 0x00002000u;
}
void ConvolutionProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConvolutionProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ConvolutionProto_Engine ConvolutionProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.engine)
  return static_cast< ::caffe::ConvolutionProto_Engine >(engine_);
}
void ConvolutionProto::set_engine(::caffe::ConvolutionProto_Engine value) {
  assert(::caffe::ConvolutionProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.engine)
}

// repeated .caffe.ParamSpec param = 100;
int ConvolutionProto::param_size() const {
  return param_.size();
}
void ConvolutionProto::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& ConvolutionProto::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.param)
  return param_.Get(index);
}
::caffe::ParamSpec* ConvolutionProto::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* ConvolutionProto::add_param() {
  // @@protoc_insertion_point(field_add:caffe.ConvolutionProto.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
ConvolutionProto::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionProto.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
ConvolutionProto::param() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionProto.param)
  return param_;
}

// required string in = 120;
bool ConvolutionProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& ConvolutionProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.in)
  return in_.GetNoArena();
}
void ConvolutionProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.in)
}
#if LANG_CXX11
void ConvolutionProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConvolutionProto.in)
}
#endif
void ConvolutionProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConvolutionProto.in)
}
void ConvolutionProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConvolutionProto.in)
}
::std::string* ConvolutionProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConvolutionProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConvolutionProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.in)
}

// required string out = 121;
bool ConvolutionProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& ConvolutionProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.out)
  return out_.GetNoArena();
}
void ConvolutionProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.out)
}
#if LANG_CXX11
void ConvolutionProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConvolutionProto.out)
}
#endif
void ConvolutionProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConvolutionProto.out)
}
void ConvolutionProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConvolutionProto.out)
}
::std::string* ConvolutionProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConvolutionProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConvolutionProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoaderProto::kSourceFieldNumber;
const int LoaderProto::kPieceSizeFieldNumber;
const int LoaderProto::kDataFieldNumber;
const int LoaderProto::kLabelFieldNumber;
const int LoaderProto::kChannelFieldNumber;
const int LoaderProto::kHeightFieldNumber;
const int LoaderProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoaderProto::LoaderProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LoaderProto)
}
LoaderProto::LoaderProto(const LoaderProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&piece_size_, &from.piece_size_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&piece_size_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.LoaderProto)
}

void LoaderProto::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&piece_size_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&piece_size_) + sizeof(width_));
}

LoaderProto::~LoaderProto() {
  // @@protoc_insertion_point(destructor:caffe.LoaderProto)
  SharedDtor();
}

void LoaderProto::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoaderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[27].descriptor;
}

const LoaderProto& LoaderProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

LoaderProto* LoaderProto::New(::google::protobuf::Arena* arena) const {
  LoaderProto* n = new LoaderProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LoaderProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_label()) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&piece_size_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&piece_size_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LoaderProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LoaderProto.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 piece_size = 4;
      case 4: {
        if (tag == 32u) {
          set_has_piece_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &piece_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LoaderProto.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string label = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LoaderProto.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 channel = 122;
      case 122: {
        if (tag == 976u) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 123;
      case 123: {
        if (tag == 984u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 124;
      case 124: {
        if (tag == 992u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LoaderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LoaderProto)
  return false;
#undef DO_
}

void LoaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LoaderProto)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoaderProto.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 piece_size = 4;
  if (has_piece_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->piece_size(), output);
  }

  // required string data = 120;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoaderProto.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->data(), output);
  }

  // required string label = 121;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoaderProto.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->label(), output);
  }

  // required uint32 channel = 122;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(122, this->channel(), output);
  }

  // required uint32 height = 123;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(123, this->height(), output);
  }

  // required uint32 width = 124;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(124, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LoaderProto)
}

::google::protobuf::uint8* LoaderProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LoaderProto)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoaderProto.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 piece_size = 4;
  if (has_piece_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->piece_size(), target);
  }

  // required string data = 120;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoaderProto.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->data(), target);
  }

  // required string label = 121;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoaderProto.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->label(), target);
  }

  // required uint32 channel = 122;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(122, this->channel(), target);
  }

  // required uint32 height = 123;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(123, this->height(), target);
  }

  // required uint32 width = 124;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(124, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LoaderProto)
  return target;
}

size_t LoaderProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.LoaderProto)
  size_t total_size = 0;

  if (has_data()) {
    // required string data = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_label()) {
    // required string label = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  if (has_channel()) {
    // required uint32 channel = 122;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  if (has_height()) {
    // required uint32 height = 123;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_width()) {
    // required uint32 width = 124;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  return total_size;
}
size_t LoaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LoaderProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000076) ^ 0x00000076) == 0) {  // All required fields are present.
    // required string data = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required string label = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());

    // required uint32 channel = 122;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());

    // required uint32 height = 123;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 width = 124;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string source = 1;
  if (has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional uint32 piece_size = 4;
  if (has_piece_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->piece_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoaderProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LoaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoaderProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoaderProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LoaderProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LoaderProto)
    MergeFrom(*source);
  }
}

void LoaderProto::MergeFrom(const LoaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LoaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_piece_size()) {
      set_piece_size(from.piece_size());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
}

void LoaderProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LoaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoaderProto::CopyFrom(const LoaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LoaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoaderProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000076) != 0x00000076) return false;
  return true;
}

void LoaderProto::Swap(LoaderProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoaderProto::InternalSwap(LoaderProto* other) {
  source_.Swap(&other->source_);
  data_.Swap(&other->data_);
  label_.Swap(&other->label_);
  std::swap(piece_size_, other->piece_size_);
  std::swap(channel_, other->channel_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoaderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoaderProto

// optional string source = 1;
bool LoaderProto::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoaderProto::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void LoaderProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoaderProto::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& LoaderProto::source() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.source)
  return source_.GetNoArena();
}
void LoaderProto::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.source)
}
#if LANG_CXX11
void LoaderProto::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoaderProto.source)
}
#endif
void LoaderProto::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoaderProto.source)
}
void LoaderProto::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoaderProto.source)
}
::std::string* LoaderProto::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.LoaderProto.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoaderProto::release_source() {
  // @@protoc_insertion_point(field_release:caffe.LoaderProto.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoaderProto::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoaderProto.source)
}

// optional uint32 piece_size = 4;
bool LoaderProto::has_piece_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoaderProto::set_has_piece_size() {
  _has_bits_[0] |= 0x00000008u;
}
void LoaderProto::clear_has_piece_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoaderProto::clear_piece_size() {
  piece_size_ = 0u;
  clear_has_piece_size();
}
::google::protobuf::uint32 LoaderProto::piece_size() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.piece_size)
  return piece_size_;
}
void LoaderProto::set_piece_size(::google::protobuf::uint32 value) {
  set_has_piece_size();
  piece_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.piece_size)
}

// required string data = 120;
bool LoaderProto::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoaderProto::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void LoaderProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoaderProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& LoaderProto::data() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.data)
  return data_.GetNoArena();
}
void LoaderProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.data)
}
#if LANG_CXX11
void LoaderProto::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoaderProto.data)
}
#endif
void LoaderProto::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoaderProto.data)
}
void LoaderProto::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoaderProto.data)
}
::std::string* LoaderProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.LoaderProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoaderProto::release_data() {
  // @@protoc_insertion_point(field_release:caffe.LoaderProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoaderProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoaderProto.data)
}

// required string label = 121;
bool LoaderProto::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoaderProto::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
void LoaderProto::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoaderProto::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& LoaderProto::label() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.label)
  return label_.GetNoArena();
}
void LoaderProto::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.label)
}
#if LANG_CXX11
void LoaderProto::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoaderProto.label)
}
#endif
void LoaderProto::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoaderProto.label)
}
void LoaderProto::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoaderProto.label)
}
::std::string* LoaderProto::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:caffe.LoaderProto.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoaderProto::release_label() {
  // @@protoc_insertion_point(field_release:caffe.LoaderProto.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoaderProto::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoaderProto.label)
}

// required uint32 channel = 122;
bool LoaderProto::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoaderProto::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
void LoaderProto::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoaderProto::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 LoaderProto::channel() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.channel)
  return channel_;
}
void LoaderProto::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.channel)
}

// required uint32 height = 123;
bool LoaderProto::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoaderProto::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void LoaderProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoaderProto::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 LoaderProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.height)
  return height_;
}
void LoaderProto::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.height)
}

// required uint32 width = 124;
bool LoaderProto::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoaderProto::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void LoaderProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoaderProto::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 LoaderProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.width)
  return width_;
}
void LoaderProto::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductProto::kNumOutputFieldNumber;
const int InnerProductProto::kBiasTermFieldNumber;
const int InnerProductProto::kWeightFillerFieldNumber;
const int InnerProductProto::kBiasFillerFieldNumber;
const int InnerProductProto::kAxisFieldNumber;
const int InnerProductProto::kParamFieldNumber;
const int InnerProductProto::kInFieldNumber;
const int InnerProductProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductProto::InnerProductProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductProto)
}
InnerProductProto::InnerProductProto(const InnerProductProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductProto)
}

void InnerProductProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&num_output_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(num_output_));
  bias_term_ = true;
  axis_ = 1;
}

InnerProductProto::~InnerProductProto() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductProto)
  SharedDtor();
}

void InnerProductProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
  if (this != internal_default_instance()) {
    delete bias_filler_;
  }
}

void InnerProductProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[28].descriptor;
}

const InnerProductProto& InnerProductProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

InnerProductProto* InnerProductProto::New(::google::protobuf::Arena* arena) const {
  InnerProductProto* n = new InnerProductProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerProductProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductProto)
  param_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    num_output_ = 0u;
    bias_term_ = true;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerProductProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16u) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (tag == 40u) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.ParamSpec param = 100;
      case 100: {
        if (tag == 802u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InnerProductProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InnerProductProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductProto)
  return false;
#undef DO_
}

void InnerProductProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductProto)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // repeated .caffe.ParamSpec param = 100;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->param(i), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InnerProductProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InnerProductProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductProto)
}

::google::protobuf::uint8* InnerProductProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductProto)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bias_filler_, false, target);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // repeated .caffe.ParamSpec param = 100;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->param(i), false, target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InnerProductProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InnerProductProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductProto)
  return target;
}

size_t InnerProductProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.InnerProductProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t InnerProductProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .caffe.ParamSpec param = 100;
  {
    unsigned int count = this->param_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductProto)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerProductProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerProductProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductProto)
    MergeFrom(*source);
  }
}

void InnerProductProto::MergeFrom(const InnerProductProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
}

void InnerProductProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductProto::CopyFrom(const InnerProductProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InnerProductProto::Swap(InnerProductProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerProductProto::InternalSwap(InnerProductProto* other) {
  param_.UnsafeArenaSwap(&other->param_);
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerProductProto

// optional uint32 num_output = 1;
bool InnerProductProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnerProductProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000010u;
}
void InnerProductProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnerProductProto::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 InnerProductProto::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.num_output)
  return num_output_;
}
void InnerProductProto::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.num_output)
}

// optional bool bias_term = 2 [default = true];
bool InnerProductProto::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InnerProductProto::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
void InnerProductProto::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
void InnerProductProto::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool InnerProductProto::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.bias_term)
  return bias_term_;
}
void InnerProductProto::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerProductProto::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerProductProto::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerProductProto::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerProductProto::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerProductProto::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductProto::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerProductProto::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerProductProto::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool InnerProductProto::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerProductProto::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerProductProto::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerProductProto::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InnerProductProto::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductProto::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InnerProductProto::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InnerProductProto::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.bias_filler)
}

// optional int32 axis = 5 [default = 1];
bool InnerProductProto::has_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InnerProductProto::set_has_axis() {
  _has_bits_[0] |= 0x00000040u;
}
void InnerProductProto::clear_has_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
void InnerProductProto::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 InnerProductProto::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.axis)
  return axis_;
}
void InnerProductProto::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.axis)
}

// repeated .caffe.ParamSpec param = 100;
int InnerProductProto::param_size() const {
  return param_.size();
}
void InnerProductProto::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& InnerProductProto::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.param)
  return param_.Get(index);
}
::caffe::ParamSpec* InnerProductProto::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* InnerProductProto::add_param() {
  // @@protoc_insertion_point(field_add:caffe.InnerProductProto.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
InnerProductProto::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InnerProductProto.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
InnerProductProto::param() const {
  // @@protoc_insertion_point(field_list:caffe.InnerProductProto.param)
  return param_;
}

// required string in = 120;
bool InnerProductProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerProductProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerProductProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerProductProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& InnerProductProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.in)
  return in_.GetNoArena();
}
void InnerProductProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.in)
}
#if LANG_CXX11
void InnerProductProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InnerProductProto.in)
}
#endif
void InnerProductProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InnerProductProto.in)
}
void InnerProductProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InnerProductProto.in)
}
::std::string* InnerProductProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InnerProductProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InnerProductProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.in)
}

// required string out = 121;
bool InnerProductProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerProductProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerProductProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerProductProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& InnerProductProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.out)
  return out_.GetNoArena();
}
void InnerProductProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.out)
}
#if LANG_CXX11
void InnerProductProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InnerProductProto.out)
}
#endif
void InnerProductProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InnerProductProto.out)
}
void InnerProductProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InnerProductProto.out)
}
::std::string* InnerProductProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InnerProductProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InnerProductProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingProto::kPoolFieldNumber;
const int PoolingProto::kPadFieldNumber;
const int PoolingProto::kPadHFieldNumber;
const int PoolingProto::kPadWFieldNumber;
const int PoolingProto::kKernelSizeFieldNumber;
const int PoolingProto::kKernelHFieldNumber;
const int PoolingProto::kKernelWFieldNumber;
const int PoolingProto::kStrideFieldNumber;
const int PoolingProto::kStrideHFieldNumber;
const int PoolingProto::kStrideWFieldNumber;
const int PoolingProto::kEngineFieldNumber;
const int PoolingProto::kGlobalPoolingFieldNumber;
const int PoolingProto::kInFieldNumber;
const int PoolingProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingProto::PoolingProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingProto)
}
PoolingProto::PoolingProto(const PoolingProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  ::memcpy(&pool_, &from.pool_,
    reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&pool_) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingProto)
}

void PoolingProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pool_, 0, reinterpret_cast<char*>(&global_pooling_) -
    reinterpret_cast<char*>(&pool_) + sizeof(global_pooling_));
  stride_ = 1u;
}

PoolingProto::~PoolingProto() {
  // @@protoc_insertion_point(destructor:caffe.PoolingProto)
  SharedDtor();
}

void PoolingProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PoolingProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[29].descriptor;
}

const PoolingProto& PoolingProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

PoolingProto* PoolingProto::New(::google::protobuf::Arena* arena) const {
  PoolingProto* n = new PoolingProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&pool_, 0, reinterpret_cast<char*>(&kernel_h_) -
      reinterpret_cast<char*>(&pool_) + sizeof(kernel_h_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&kernel_w_, 0, reinterpret_cast<char*>(&global_pooling_) -
      reinterpret_cast<char*>(&kernel_w_) + sizeof(global_pooling_));
    stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoolingProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingProto_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::PoolingProto_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (tag == 16u) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (tag == 24u) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 4 [default = 0];
      case 4: {
        if (tag == 32u) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 5;
      case 5: {
        if (tag == 40u) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 6;
      case 6: {
        if (tag == 48u) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 7;
      case 7: {
        if (tag == 56u) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 8;
      case 8: {
        if (tag == 64u) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72u) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80u) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
      case 11: {
        if (tag == 88u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PoolingProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool global_pooling = 12 [default = false];
      case 12: {
        if (tag == 96u) {
          set_has_global_pooling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PoolingProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PoolingProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingProto)
  return false;
#undef DO_
}

void PoolingProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingProto)
  // optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->engine(), output);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PoolingProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PoolingProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingProto)
}

::google::protobuf::uint8* PoolingProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingProto)
  // optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PoolingProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PoolingProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingProto)
  return target;
}

size_t PoolingProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.PoolingProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t PoolingProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 kernel_h = 5;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 kernel_w = 6;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 7;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 8;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingProto)
    MergeFrom(*source);
  }
}

void PoolingProto::MergeFrom(const PoolingProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_global_pooling()) {
      set_global_pooling(from.global_pooling());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
  }
}

void PoolingProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingProto::CopyFrom(const PoolingProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PoolingProto::Swap(PoolingProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingProto::InternalSwap(PoolingProto* other) {
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(pool_, other->pool_);
  std::swap(pad_, other->pad_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(engine_, other->engine_);
  std::swap(global_pooling_, other->global_pooling_);
  std::swap(stride_, other->stride_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingProto

// optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
bool PoolingProto::has_pool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoolingProto::set_has_pool() {
  _has_bits_[0] |= 0x00000004u;
}
void PoolingProto::clear_has_pool() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoolingProto::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::PoolingProto_PoolMethod PoolingProto::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pool)
  return static_cast< ::caffe::PoolingProto_PoolMethod >(pool_);
}
void PoolingProto::set_pool(::caffe::PoolingProto_PoolMethod value) {
  assert(::caffe::PoolingProto_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pool)
}

// optional uint32 pad = 4 [default = 0];
bool PoolingProto::has_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoolingProto::set_has_pad() {
  _has_bits_[0] |= 0x00000008u;
}
void PoolingProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoolingProto::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 PoolingProto::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pad)
  return pad_;
}
void PoolingProto::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pad)
}

// optional uint32 pad_h = 9 [default = 0];
bool PoolingProto::has_pad_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoolingProto::set_has_pad_h() {
  _has_bits_[0] |= 0x00000010u;
}
void PoolingProto::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoolingProto::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 PoolingProto::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pad_h)
  return pad_h_;
}
void PoolingProto::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool PoolingProto::has_pad_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PoolingProto::set_has_pad_w() {
  _has_bits_[0] |= 0x00000020u;
}
void PoolingProto::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000020u;
}
void PoolingProto::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 PoolingProto::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pad_w)
  return pad_w_;
}
void PoolingProto::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pad_w)
}

// optional uint32 kernel_size = 2;
bool PoolingProto::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PoolingProto::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000040u;
}
void PoolingProto::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void PoolingProto::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 PoolingProto::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.kernel_size)
  return kernel_size_;
}
void PoolingProto::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.kernel_size)
}

// optional uint32 kernel_h = 5;
bool PoolingProto::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PoolingProto::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000080u;
}
void PoolingProto::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void PoolingProto::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 PoolingProto::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.kernel_h)
  return kernel_h_;
}
void PoolingProto::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.kernel_h)
}

// optional uint32 kernel_w = 6;
bool PoolingProto::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PoolingProto::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000100u;
}
void PoolingProto::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void PoolingProto::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 PoolingProto::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.kernel_w)
  return kernel_w_;
}
void PoolingProto::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
bool PoolingProto::has_stride() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PoolingProto::set_has_stride() {
  _has_bits_[0] |= 0x00002000u;
}
void PoolingProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00002000u;
}
void PoolingProto::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 PoolingProto::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.stride)
  return stride_;
}
void PoolingProto::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.stride)
}

// optional uint32 stride_h = 7;
bool PoolingProto::has_stride_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PoolingProto::set_has_stride_h() {
  _has_bits_[0] |= 0x00000200u;
}
void PoolingProto::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000200u;
}
void PoolingProto::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 PoolingProto::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.stride_h)
  return stride_h_;
}
void PoolingProto::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.stride_h)
}

// optional uint32 stride_w = 8;
bool PoolingProto::has_stride_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PoolingProto::set_has_stride_w() {
  _has_bits_[0] |= 0x00000400u;
}
void PoolingProto::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000400u;
}
void PoolingProto::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 PoolingProto::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.stride_w)
  return stride_w_;
}
void PoolingProto::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.stride_w)
}

// optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
bool PoolingProto::has_engine() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PoolingProto::set_has_engine() {
  _has_bits_[0] |= 0x00000800u;
}
void PoolingProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000800u;
}
void PoolingProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::PoolingProto_Engine PoolingProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.engine)
  return static_cast< ::caffe::PoolingProto_Engine >(engine_);
}
void PoolingProto::set_engine(::caffe::PoolingProto_Engine value) {
  assert(::caffe::PoolingProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.engine)
}

// optional bool global_pooling = 12 [default = false];
bool PoolingProto::has_global_pooling() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PoolingProto::set_has_global_pooling() {
  _has_bits_[0] |= 0x00001000u;
}
void PoolingProto::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00001000u;
}
void PoolingProto::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
bool PoolingProto::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.global_pooling)
  return global_pooling_;
}
void PoolingProto::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.global_pooling)
}

// required string in = 120;
bool PoolingProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoolingProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void PoolingProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoolingProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& PoolingProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.in)
  return in_.GetNoArena();
}
void PoolingProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.in)
}
#if LANG_CXX11
void PoolingProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PoolingProto.in)
}
#endif
void PoolingProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoolingProto.in)
}
void PoolingProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoolingProto.in)
}
::std::string* PoolingProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.PoolingProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PoolingProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.PoolingProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PoolingProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoolingProto.in)
}

// required string out = 121;
bool PoolingProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoolingProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void PoolingProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoolingProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& PoolingProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.out)
  return out_.GetNoArena();
}
void PoolingProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.out)
}
#if LANG_CXX11
void PoolingProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PoolingProto.out)
}
#endif
void PoolingProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoolingProto.out)
}
void PoolingProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoolingProto.out)
}
::std::string* PoolingProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.PoolingProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PoolingProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.PoolingProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PoolingProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoolingProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUProto::kNegativeSlopeFieldNumber;
const int ReLUProto::kEngineFieldNumber;
const int ReLUProto::kInFieldNumber;
const int ReLUProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUProto::ReLUProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUProto)
}
ReLUProto::ReLUProto(const ReLUProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  ::memcpy(&negative_slope_, &from.negative_slope_,
    reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUProto)
}

void ReLUProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
}

ReLUProto::~ReLUProto() {
  // @@protoc_insertion_point(destructor:caffe.ReLUProto)
  SharedDtor();
}

void ReLUProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReLUProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[30].descriptor;
}

const ReLUProto& ReLUProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

ReLUProto* ReLUProto::New(::google::protobuf::Arena* arena) const {
  ReLUProto* n = new ReLUProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLUProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReLUProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (tag == 13u) {
          set_has_negative_slope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReLUProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ReLUProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ReLUProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ReLUProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUProto)
  return false;
#undef DO_
}

void ReLUProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUProto)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine(), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ReLUProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ReLUProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUProto)
}

::google::protobuf::uint8* ReLUProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUProto)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine(), target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ReLUProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ReLUProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUProto)
  return target;
}

size_t ReLUProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.ReLUProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t ReLUProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLUProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLUProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUProto)
    MergeFrom(*source);
  }
}

void ReLUProto::MergeFrom(const ReLUProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_negative_slope()) {
      set_negative_slope(from.negative_slope());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
}

void ReLUProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUProto::CopyFrom(const ReLUProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReLUProto::Swap(ReLUProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLUProto::InternalSwap(ReLUProto* other) {
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLUProto

// optional float negative_slope = 1 [default = 0];
bool ReLUProto::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReLUProto::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000004u;
}
void ReLUProto::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReLUProto::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
float ReLUProto::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.negative_slope)
  return negative_slope_;
}
void ReLUProto::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.negative_slope)
}

// optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
bool ReLUProto::has_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReLUProto::set_has_engine() {
  _has_bits_[0] |= 0x00000008u;
}
void ReLUProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReLUProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ReLUProto_Engine ReLUProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.engine)
  return static_cast< ::caffe::ReLUProto_Engine >(engine_);
}
void ReLUProto::set_engine(::caffe::ReLUProto_Engine value) {
  assert(::caffe::ReLUProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.engine)
}

// required string in = 120;
bool ReLUProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLUProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLUProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLUProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& ReLUProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.in)
  return in_.GetNoArena();
}
void ReLUProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.in)
}
#if LANG_CXX11
void ReLUProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ReLUProto.in)
}
#endif
void ReLUProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReLUProto.in)
}
void ReLUProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReLUProto.in)
}
::std::string* ReLUProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.ReLUProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReLUProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.ReLUProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReLUProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReLUProto.in)
}

// required string out = 121;
bool ReLUProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReLUProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void ReLUProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReLUProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& ReLUProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.out)
  return out_.GetNoArena();
}
void ReLUProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.out)
}
#if LANG_CXX11
void ReLUProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ReLUProto.out)
}
#endif
void ReLUProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReLUProto.out)
}
void ReLUProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReLUProto.out)
}
::std::string* ReLUProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.ReLUProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReLUProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.ReLUProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReLUProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReLUProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRNProto::kLocalSizeFieldNumber;
const int LRNProto::kAlphaFieldNumber;
const int LRNProto::kBetaFieldNumber;
const int LRNProto::kNormRegionFieldNumber;
const int LRNProto::kKFieldNumber;
const int LRNProto::kEngineFieldNumber;
const int LRNProto::kInFieldNumber;
const int LRNProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRNProto::LRNProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LRNProto)
}
LRNProto::LRNProto(const LRNProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  ::memcpy(&norm_region_, &from.norm_region_,
    reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&norm_region_) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:caffe.LRNProto)
}

void LRNProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&norm_region_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&norm_region_) + sizeof(engine_));
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
}

LRNProto::~LRNProto() {
  // @@protoc_insertion_point(destructor:caffe.LRNProto)
  SharedDtor();
}

void LRNProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LRNProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[31].descriptor;
}

const LRNProto& LRNProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

LRNProto* LRNProto::New(::google::protobuf::Arena* arena) const {
  LRNProto* n = new LRNProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LRNProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LRNProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&norm_region_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&norm_region_) + sizeof(engine_));
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LRNProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LRNProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (tag == 8u) {
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (tag == 21u) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (tag == 29u) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNProto_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffe::LRNProto_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (tag == 45u) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::LRNProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LRNProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LRNProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LRNProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LRNProto)
  return false;
#undef DO_
}

void LRNProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LRNProto)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  // optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LRNProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LRNProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LRNProto)
}

::google::protobuf::uint8* LRNProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LRNProto)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  // optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LRNProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LRNProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LRNProto)
  return target;
}

size_t LRNProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.LRNProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t LRNProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LRNProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LRNProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LRNProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRNProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LRNProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LRNProto)
    MergeFrom(*source);
  }
}

void LRNProto::MergeFrom(const LRNProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LRNProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_norm_region()) {
      set_norm_region(from.norm_region());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
}

void LRNProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LRNProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNProto::CopyFrom(const LRNProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LRNProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LRNProto::Swap(LRNProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRNProto::InternalSwap(LRNProto* other) {
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(norm_region_, other->norm_region_);
  std::swap(engine_, other->engine_);
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(k_, other->k_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LRNProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LRNProto

// optional uint32 local_size = 1 [default = 5];
bool LRNProto::has_local_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LRNProto::set_has_local_size() {
  _has_bits_[0] |= 0x00000010u;
}
void LRNProto::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void LRNProto::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 LRNProto::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.local_size)
  return local_size_;
}
void LRNProto::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.local_size)
}

// optional float alpha = 2 [default = 1];
bool LRNProto::has_alpha() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LRNProto::set_has_alpha() {
  _has_bits_[0] |= 0x00000020u;
}
void LRNProto::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000020u;
}
void LRNProto::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float LRNProto::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.alpha)
  return alpha_;
}
void LRNProto::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.alpha)
}

// optional float beta = 3 [default = 0.75];
bool LRNProto::has_beta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LRNProto::set_has_beta() {
  _has_bits_[0] |= 0x00000040u;
}
void LRNProto::clear_has_beta() {
  _has_bits_[0] &= ~0x00000040u;
}
void LRNProto::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float LRNProto::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.beta)
  return beta_;
}
void LRNProto::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.beta)
}

// optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
bool LRNProto::has_norm_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LRNProto::set_has_norm_region() {
  _has_bits_[0] |= 0x00000004u;
}
void LRNProto::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000004u;
}
void LRNProto::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
::caffe::LRNProto_NormRegion LRNProto::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.norm_region)
  return static_cast< ::caffe::LRNProto_NormRegion >(norm_region_);
}
void LRNProto::set_norm_region(::caffe::LRNProto_NormRegion value) {
  assert(::caffe::LRNProto_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.norm_region)
}

// optional float k = 5 [default = 1];
bool LRNProto::has_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LRNProto::set_has_k() {
  _has_bits_[0] |= 0x00000080u;
}
void LRNProto::clear_has_k() {
  _has_bits_[0] &= ~0x00000080u;
}
void LRNProto::clear_k() {
  k_ = 1;
  clear_has_k();
}
float LRNProto::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.k)
  return k_;
}
void LRNProto::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.k)
}

// optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
bool LRNProto::has_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LRNProto::set_has_engine() {
  _has_bits_[0] |= 0x00000008u;
}
void LRNProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
void LRNProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::LRNProto_Engine LRNProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.engine)
  return static_cast< ::caffe::LRNProto_Engine >(engine_);
}
void LRNProto::set_engine(::caffe::LRNProto_Engine value) {
  assert(::caffe::LRNProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.engine)
}

// required string in = 120;
bool LRNProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LRNProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void LRNProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void LRNProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& LRNProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.in)
  return in_.GetNoArena();
}
void LRNProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LRNProto.in)
}
#if LANG_CXX11
void LRNProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LRNProto.in)
}
#endif
void LRNProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LRNProto.in)
}
void LRNProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LRNProto.in)
}
::std::string* LRNProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.LRNProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LRNProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.LRNProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LRNProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.LRNProto.in)
}

// required string out = 121;
bool LRNProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LRNProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void LRNProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void LRNProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& LRNProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.out)
  return out_.GetNoArena();
}
void LRNProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LRNProto.out)
}
#if LANG_CXX11
void LRNProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LRNProto.out)
}
#endif
void LRNProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LRNProto.out)
}
void LRNProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LRNProto.out)
}
::std::string* LRNProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.LRNProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LRNProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.LRNProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LRNProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.LRNProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidProto::kEngineFieldNumber;
const int SigmoidProto::kInFieldNumber;
const int SigmoidProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidProto::SigmoidProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SigmoidProto)
}
SigmoidProto::SigmoidProto(const SigmoidProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:caffe.SigmoidProto)
}

void SigmoidProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engine_ = 0;
}

SigmoidProto::~SigmoidProto() {
  // @@protoc_insertion_point(destructor:caffe.SigmoidProto)
  SharedDtor();
}

void SigmoidProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SigmoidProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[32].descriptor;
}

const SigmoidProto& SigmoidProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

SigmoidProto* SigmoidProto::New(::google::protobuf::Arena* arena) const {
  SigmoidProto* n = new SigmoidProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SigmoidProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SigmoidProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SigmoidProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SigmoidProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SigmoidProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SigmoidProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SigmoidProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SigmoidProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SigmoidProto)
  return false;
#undef DO_
}

void SigmoidProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SigmoidProto)
  // optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SigmoidProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SigmoidProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SigmoidProto)
}

::google::protobuf::uint8* SigmoidProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidProto)
  // optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SigmoidProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SigmoidProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidProto)
  return target;
}

size_t SigmoidProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.SigmoidProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t SigmoidProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SigmoidProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SigmoidProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SigmoidProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SigmoidProto)
    MergeFrom(*source);
  }
}

void SigmoidProto::MergeFrom(const SigmoidProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SigmoidProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
}

void SigmoidProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SigmoidProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidProto::CopyFrom(const SigmoidProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SigmoidProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SigmoidProto::Swap(SigmoidProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidProto::InternalSwap(SigmoidProto* other) {
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidProto

// optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
bool SigmoidProto::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SigmoidProto::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void SigmoidProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void SigmoidProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SigmoidProto_Engine SigmoidProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidProto.engine)
  return static_cast< ::caffe::SigmoidProto_Engine >(engine_);
}
void SigmoidProto::set_engine(::caffe::SigmoidProto_Engine value) {
  assert(::caffe::SigmoidProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidProto.engine)
}

// required string in = 120;
bool SigmoidProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SigmoidProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void SigmoidProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void SigmoidProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& SigmoidProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidProto.in)
  return in_.GetNoArena();
}
void SigmoidProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SigmoidProto.in)
}
#if LANG_CXX11
void SigmoidProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SigmoidProto.in)
}
#endif
void SigmoidProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SigmoidProto.in)
}
void SigmoidProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SigmoidProto.in)
}
::std::string* SigmoidProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.SigmoidProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SigmoidProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.SigmoidProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SigmoidProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.SigmoidProto.in)
}

// required string out = 121;
bool SigmoidProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SigmoidProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void SigmoidProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void SigmoidProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& SigmoidProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidProto.out)
  return out_.GetNoArena();
}
void SigmoidProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SigmoidProto.out)
}
#if LANG_CXX11
void SigmoidProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SigmoidProto.out)
}
#endif
void SigmoidProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SigmoidProto.out)
}
void SigmoidProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SigmoidProto.out)
}
::std::string* SigmoidProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.SigmoidProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SigmoidProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.SigmoidProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SigmoidProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.SigmoidProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxProto::kEngineFieldNumber;
const int SoftmaxProto::kAxisFieldNumber;
const int SoftmaxProto::kInFieldNumber;
const int SoftmaxProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxProto::SoftmaxProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftmaxProto)
}
SoftmaxProto::SoftmaxProto(const SoftmaxProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  ::memcpy(&engine_, &from.engine_,
    reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&engine_) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.SoftmaxProto)
}

void SoftmaxProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engine_ = 0;
  axis_ = 1;
}

SoftmaxProto::~SoftmaxProto() {
  // @@protoc_insertion_point(destructor:caffe.SoftmaxProto)
  SharedDtor();
}

void SoftmaxProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SoftmaxProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[33].descriptor;
}

const SoftmaxProto& SoftmaxProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

SoftmaxProto* SoftmaxProto::New(::google::protobuf::Arena* arena) const {
  SoftmaxProto* n = new SoftmaxProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftmaxProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    engine_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SoftmaxProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftmaxProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SoftmaxProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SoftmaxProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16u) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SoftmaxProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SoftmaxProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftmaxProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftmaxProto)
  return false;
#undef DO_
}

void SoftmaxProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftmaxProto)
  // optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SoftmaxProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SoftmaxProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftmaxProto)
}

::google::protobuf::uint8* SoftmaxProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxProto)
  // optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SoftmaxProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SoftmaxProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxProto)
  return target;
}

size_t SoftmaxProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.SoftmaxProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t SoftmaxProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftmaxProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftmaxProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftmaxProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftmaxProto)
    MergeFrom(*source);
  }
}

void SoftmaxProto::MergeFrom(const SoftmaxProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftmaxProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
}

void SoftmaxProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftmaxProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxProto::CopyFrom(const SoftmaxProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftmaxProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SoftmaxProto::Swap(SoftmaxProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxProto::InternalSwap(SoftmaxProto* other) {
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(engine_, other->engine_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxProto

// optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
bool SoftmaxProto::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SoftmaxProto::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void SoftmaxProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void SoftmaxProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SoftmaxProto_Engine SoftmaxProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.engine)
  return static_cast< ::caffe::SoftmaxProto_Engine >(engine_);
}
void SoftmaxProto::set_engine(::caffe::SoftmaxProto_Engine value) {
  assert(::caffe::SoftmaxProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.engine)
}

// optional int32 axis = 2 [default = 1];
bool SoftmaxProto::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SoftmaxProto::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
void SoftmaxProto::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
void SoftmaxProto::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SoftmaxProto::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.axis)
  return axis_;
}
void SoftmaxProto::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.axis)
}

// required string in = 120;
bool SoftmaxProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftmaxProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftmaxProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftmaxProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& SoftmaxProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.in)
  return in_.GetNoArena();
}
void SoftmaxProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.in)
}
#if LANG_CXX11
void SoftmaxProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SoftmaxProto.in)
}
#endif
void SoftmaxProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxProto.in)
}
void SoftmaxProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxProto.in)
}
::std::string* SoftmaxProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SoftmaxProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SoftmaxProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxProto.in)
}

// required string out = 121;
bool SoftmaxProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftmaxProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftmaxProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftmaxProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& SoftmaxProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.out)
  return out_.GetNoArena();
}
void SoftmaxProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.out)
}
#if LANG_CXX11
void SoftmaxProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SoftmaxProto.out)
}
#endif
void SoftmaxProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxProto.out)
}
void SoftmaxProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxProto.out)
}
::std::string* SoftmaxProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SoftmaxProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SoftmaxProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreProto::kEngineFieldNumber;
const int StoreProto::kInFieldNumber;
const int StoreProto::kOutFieldNumber;
const int StoreProto::kStopFieldNumber;
const int StoreProto::kStoreLayerNamesFieldNumber;
const int StoreProto::kStoreLayerShapesFieldNumber;
const int StoreProto::kLayerSeekPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreProto::StoreProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.StoreProto)
}
StoreProto::StoreProto(const StoreProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      store_layer_names_(from.store_layer_names_),
      store_layer_shapes_(from.store_layer_shapes_),
      layer_seek_pos_(from.layer_seek_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  ::memcpy(&engine_, &from.engine_,
    reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&engine_) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:caffe.StoreProto)
}

void StoreProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&engine_, 0, reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&engine_) + sizeof(stop_));
}

StoreProto::~StoreProto() {
  // @@protoc_insertion_point(destructor:caffe.StoreProto)
  SharedDtor();
}

void StoreProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[34].descriptor;
}

const StoreProto& StoreProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

StoreProto* StoreProto::New(::google::protobuf::Arena* arena) const {
  StoreProto* n = new StoreProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.StoreProto)
  store_layer_names_.Clear();
  store_layer_shapes_.Clear();
  layer_seek_pos_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&engine_, 0, reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&engine_) + sizeof(stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.StoreProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::StoreProto_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::StoreProto_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string in = 120;
      case 120: {
        if (tag == 962u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.StoreProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 121;
      case 121: {
        if (tag == 970u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.StoreProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool stop = 122 [default = false];
      case 122: {
        if (tag == 976u) {
          set_has_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string store_layer_names = 124;
      case 124: {
        if (tag == 994u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_store_layer_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_layer_names(this->store_layer_names_size() - 1).data(),
            this->store_layer_names(this->store_layer_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.StoreProto.store_layer_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 store_layer_shapes = 125;
      case 125: {
        if (tag == 1000u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1000u, input, this->mutable_store_layer_shapes())));
        } else if (tag == 1002u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_store_layer_shapes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 layer_seek_pos = 126;
      case 126: {
        if (tag == 1008u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1008u, input, this->mutable_layer_seek_pos())));
        } else if (tag == 1010u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_layer_seek_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.StoreProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.StoreProto)
  return false;
#undef DO_
}

void StoreProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.StoreProto)
  // optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.StoreProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->in(), output);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.StoreProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->out(), output);
  }

  // required bool stop = 122 [default = false];
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(122, this->stop(), output);
  }

  // repeated string store_layer_names = 124;
  for (int i = 0; i < this->store_layer_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_layer_names(i).data(), this->store_layer_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.StoreProto.store_layer_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      124, this->store_layer_names(i), output);
  }

  // repeated int64 store_layer_shapes = 125;
  for (int i = 0; i < this->store_layer_shapes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      125, this->store_layer_shapes(i), output);
  }

  // repeated int64 layer_seek_pos = 126;
  for (int i = 0; i < this->layer_seek_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      126, this->layer_seek_pos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.StoreProto)
}

::google::protobuf::uint8* StoreProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.StoreProto)
  // optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // required string in = 120;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.StoreProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->in(), target);
  }

  // required string out = 121;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.StoreProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->out(), target);
  }

  // required bool stop = 122 [default = false];
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(122, this->stop(), target);
  }

  // repeated string store_layer_names = 124;
  for (int i = 0; i < this->store_layer_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_layer_names(i).data(), this->store_layer_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.StoreProto.store_layer_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(124, this->store_layer_names(i), target);
  }

  // repeated int64 store_layer_shapes = 125;
  for (int i = 0; i < this->store_layer_shapes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(125, this->store_layer_shapes(i), target);
  }

  // repeated int64 layer_seek_pos = 126;
  for (int i = 0; i < this->layer_seek_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(126, this->layer_seek_pos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.StoreProto)
  return target;
}

size_t StoreProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.StoreProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  if (has_stop()) {
    // required bool stop = 122 [default = false];
    total_size += 2 + 1;
  }

  return total_size;
}
size_t StoreProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.StoreProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string in = 120;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 121;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

    // required bool stop = 122 [default = false];
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string store_layer_names = 124;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->store_layer_names_size());
  for (int i = 0; i < this->store_layer_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->store_layer_names(i));
  }

  // repeated int64 store_layer_shapes = 125;
  {
    size_t data_size = 0;
    unsigned int count = this->store_layer_shapes_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->store_layer_shapes(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->store_layer_shapes_size());
    total_size += data_size;
  }

  // repeated int64 layer_seek_pos = 126;
  {
    size_t data_size = 0;
    unsigned int count = this->layer_seek_pos_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->layer_seek_pos(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->layer_seek_pos_size());
    total_size += data_size;
  }

  // optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.StoreProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.StoreProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.StoreProto)
    MergeFrom(*source);
  }
}

void StoreProto::MergeFrom(const StoreProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.StoreProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_layer_names_.MergeFrom(from.store_layer_names_);
  store_layer_shapes_.MergeFrom(from.store_layer_shapes_);
  layer_seek_pos_.MergeFrom(from.layer_seek_pos_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
  }
}

void StoreProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.StoreProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreProto::CopyFrom(const StoreProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.StoreProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void StoreProto::Swap(StoreProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreProto::InternalSwap(StoreProto* other) {
  store_layer_names_.UnsafeArenaSwap(&other->store_layer_names_);
  store_layer_shapes_.UnsafeArenaSwap(&other->store_layer_shapes_);
  layer_seek_pos_.UnsafeArenaSwap(&other->layer_seek_pos_);
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(engine_, other->engine_);
  std::swap(stop_, other->stop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreProto

// optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
bool StoreProto::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreProto::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::StoreProto_Engine StoreProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.engine)
  return static_cast< ::caffe::StoreProto_Engine >(engine_);
}
void StoreProto::set_engine(::caffe::StoreProto_Engine value) {
  assert(::caffe::StoreProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.StoreProto.engine)
}

// required string in = 120;
bool StoreProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& StoreProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.in)
  return in_.GetNoArena();
}
void StoreProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.in)
}
#if LANG_CXX11
void StoreProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.StoreProto.in)
}
#endif
void StoreProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.StoreProto.in)
}
void StoreProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.StoreProto.in)
}
::std::string* StoreProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.StoreProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StoreProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.StoreProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.StoreProto.in)
}

// required string out = 121;
bool StoreProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& StoreProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.out)
  return out_.GetNoArena();
}
void StoreProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.out)
}
#if LANG_CXX11
void StoreProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.StoreProto.out)
}
#endif
void StoreProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.StoreProto.out)
}
void StoreProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.StoreProto.out)
}
::std::string* StoreProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.StoreProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StoreProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.StoreProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StoreProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.StoreProto.out)
}

// required bool stop = 122 [default = false];
bool StoreProto::has_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreProto::set_has_stop() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreProto::clear_has_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreProto::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
bool StoreProto::stop() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.stop)
  return stop_;
}
void StoreProto::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
  // @@protoc_insertion_point(field_set:caffe.StoreProto.stop)
}

// repeated string store_layer_names = 124;
int StoreProto::store_layer_names_size() const {
  return store_layer_names_.size();
}
void StoreProto::clear_store_layer_names() {
  store_layer_names_.Clear();
}
const ::std::string& StoreProto::store_layer_names(int index) const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.store_layer_names)
  return store_layer_names_.Get(index);
}
::std::string* StoreProto::mutable_store_layer_names(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.StoreProto.store_layer_names)
  return store_layer_names_.Mutable(index);
}
void StoreProto::set_store_layer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.StoreProto.store_layer_names)
  store_layer_names_.Mutable(index)->assign(value);
}
void StoreProto::set_store_layer_names(int index, const char* value) {
  store_layer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.StoreProto.store_layer_names)
}
void StoreProto::set_store_layer_names(int index, const char* value, size_t size) {
  store_layer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.StoreProto.store_layer_names)
}
::std::string* StoreProto::add_store_layer_names() {
  // @@protoc_insertion_point(field_add_mutable:caffe.StoreProto.store_layer_names)
  return store_layer_names_.Add();
}
void StoreProto::add_store_layer_names(const ::std::string& value) {
  store_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.StoreProto.store_layer_names)
}
void StoreProto::add_store_layer_names(const char* value) {
  store_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.StoreProto.store_layer_names)
}
void StoreProto::add_store_layer_names(const char* value, size_t size) {
  store_layer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.StoreProto.store_layer_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StoreProto::store_layer_names() const {
  // @@protoc_insertion_point(field_list:caffe.StoreProto.store_layer_names)
  return store_layer_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StoreProto::mutable_store_layer_names() {
  // @@protoc_insertion_point(field_mutable_list:caffe.StoreProto.store_layer_names)
  return &store_layer_names_;
}

// repeated int64 store_layer_shapes = 125;
int StoreProto::store_layer_shapes_size() const {
  return store_layer_shapes_.size();
}
void StoreProto::clear_store_layer_shapes() {
  store_layer_shapes_.Clear();
}
::google::protobuf::int64 StoreProto::store_layer_shapes(int index) const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.store_layer_shapes)
  return store_layer_shapes_.Get(index);
}
void StoreProto::set_store_layer_shapes(int index, ::google::protobuf::int64 value) {
  store_layer_shapes_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.store_layer_shapes)
}
void StoreProto::add_store_layer_shapes(::google::protobuf::int64 value) {
  store_layer_shapes_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.StoreProto.store_layer_shapes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
StoreProto::store_layer_shapes() const {
  // @@protoc_insertion_point(field_list:caffe.StoreProto.store_layer_shapes)
  return store_layer_shapes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
StoreProto::mutable_store_layer_shapes() {
  // @@protoc_insertion_point(field_mutable_list:caffe.StoreProto.store_layer_shapes)
  return &store_layer_shapes_;
}

// repeated int64 layer_seek_pos = 126;
int StoreProto::layer_seek_pos_size() const {
  return layer_seek_pos_.size();
}
void StoreProto::clear_layer_seek_pos() {
  layer_seek_pos_.Clear();
}
::google::protobuf::int64 StoreProto::layer_seek_pos(int index) const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.layer_seek_pos)
  return layer_seek_pos_.Get(index);
}
void StoreProto::set_layer_seek_pos(int index, ::google::protobuf::int64 value) {
  layer_seek_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.layer_seek_pos)
}
void StoreProto::add_layer_seek_pos(::google::protobuf::int64 value) {
  layer_seek_pos_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.StoreProto.layer_seek_pos)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
StoreProto::layer_seek_pos() const {
  // @@protoc_insertion_point(field_list:caffe.StoreProto.layer_seek_pos)
  return layer_seek_pos_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
StoreProto::mutable_layer_seek_pos() {
  // @@protoc_insertion_point(field_mutable_list:caffe.StoreProto.layer_seek_pos)
  return &layer_seek_pos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceholderProto::kInFieldNumber;
const int PlaceholderProto::kOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceholderProto::PlaceholderProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PlaceholderProto)
}
PlaceholderProto::PlaceholderProto(const PlaceholderProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_in()) {
    in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
  }
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.PlaceholderProto)
}

void PlaceholderProto::SharedCtor() {
  _cached_size_ = 0;
  in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PlaceholderProto::~PlaceholderProto() {
  // @@protoc_insertion_point(destructor:caffe.PlaceholderProto)
  SharedDtor();
}

void PlaceholderProto::SharedDtor() {
  in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlaceholderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceholderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[35].descriptor;
}

const PlaceholderProto& PlaceholderProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

PlaceholderProto* PlaceholderProto::New(::google::protobuf::Arena* arena) const {
  PlaceholderProto* n = new PlaceholderProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceholderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PlaceholderProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_in()) {
      GOOGLE_DCHECK(!in_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*in_.UnsafeRawStringPointer())->clear();
    }
    if (has_out()) {
      GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*out_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlaceholderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PlaceholderProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string in = 100;
      case 100: {
        if (tag == 802u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in().data(), this->in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PlaceholderProto.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string out = 101;
      case 101: {
        if (tag == 810u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PlaceholderProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PlaceholderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PlaceholderProto)
  return false;
#undef DO_
}

void PlaceholderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PlaceholderProto)
  // required string in = 100;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PlaceholderProto.in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->in(), output);
  }

  // required string out = 101;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PlaceholderProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PlaceholderProto)
}

::google::protobuf::uint8* PlaceholderProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PlaceholderProto)
  // required string in = 100;
  if (has_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in().data(), this->in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PlaceholderProto.in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->in(), target);
  }

  // required string out = 101;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PlaceholderProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PlaceholderProto)
  return target;
}

size_t PlaceholderProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.PlaceholderProto)
  size_t total_size = 0;

  if (has_in()) {
    // required string in = 100;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());
  }

  if (has_out()) {
    // required string out = 101;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }

  return total_size;
}
size_t PlaceholderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PlaceholderProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string in = 100;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->in());

    // required string out = 101;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceholderProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PlaceholderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceholderProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PlaceholderProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PlaceholderProto)
    MergeFrom(*source);
  }
}

void PlaceholderProto::MergeFrom(const PlaceholderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PlaceholderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_in()) {
      set_has_in();
      in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.in_);
    }
    if (from.has_out()) {
      set_has_out();
      out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
    }
  }
}

void PlaceholderProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PlaceholderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderProto::CopyFrom(const PlaceholderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PlaceholderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlaceholderProto::Swap(PlaceholderProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceholderProto::InternalSwap(PlaceholderProto* other) {
  in_.Swap(&other->in_);
  out_.Swap(&other->out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceholderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceholderProto

// required string in = 100;
bool PlaceholderProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaceholderProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaceholderProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaceholderProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
const ::std::string& PlaceholderProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.PlaceholderProto.in)
  return in_.GetNoArena();
}
void PlaceholderProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PlaceholderProto.in)
}
#if LANG_CXX11
void PlaceholderProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PlaceholderProto.in)
}
#endif
void PlaceholderProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PlaceholderProto.in)
}
void PlaceholderProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PlaceholderProto.in)
}
::std::string* PlaceholderProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.PlaceholderProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaceholderProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.PlaceholderProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaceholderProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.PlaceholderProto.in)
}

// required string out = 101;
bool PlaceholderProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlaceholderProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
void PlaceholderProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlaceholderProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& PlaceholderProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.PlaceholderProto.out)
  return out_.GetNoArena();
}
void PlaceholderProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PlaceholderProto.out)
}
#if LANG_CXX11
void PlaceholderProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PlaceholderProto.out)
}
#endif
void PlaceholderProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PlaceholderProto.out)
}
void PlaceholderProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PlaceholderProto.out)
}
::std::string* PlaceholderProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.PlaceholderProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaceholderProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.PlaceholderProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaceholderProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.PlaceholderProto.out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadPartialModelProto::kOutFieldNumber;
const int LoadPartialModelProto::kLoadLayerNamesFieldNumber;
const int LoadPartialModelProto::kLoadLayerShapesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadPartialModelProto::LoadPartialModelProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_caffe_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LoadPartialModelProto)
}
LoadPartialModelProto::LoadPartialModelProto(const LoadPartialModelProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      load_layer_names_(from.load_layer_names_),
      load_layer_shapes_(from.load_layer_shapes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_out()) {
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.LoadPartialModelProto)
}

void LoadPartialModelProto::SharedCtor() {
  _cached_size_ = 0;
  out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoadPartialModelProto::~LoadPartialModelProto() {
  // @@protoc_insertion_point(destructor:caffe.LoadPartialModelProto)
  SharedDtor();
}

void LoadPartialModelProto::SharedDtor() {
  out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoadPartialModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadPartialModelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[36].descriptor;
}

const LoadPartialModelProto& LoadPartialModelProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

LoadPartialModelProto* LoadPartialModelProto::New(::google::protobuf::Arena* arena) const {
  LoadPartialModelProto* n = new LoadPartialModelProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadPartialModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LoadPartialModelProto)
  load_layer_names_.Clear();
  load_layer_shapes_.Clear();
  if (has_out()) {
    GOOGLE_DCHECK(!out_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*out_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoadPartialModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LoadPartialModelProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string out = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LoadPartialModelProto.out");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string load_layer_names = 124;
      case 124: {
        if (tag == 994u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_load_layer_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->load_layer_names(this->load_layer_names_size() - 1).data(),
            this->load_layer_names(this->load_layer_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LoadPartialModelProto.load_layer_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 load_layer_shapes = 125;
      case 125: {
        if (tag == 1000u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1000u, input, this->mutable_load_layer_shapes())));
        } else if (tag == 1002u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_load_layer_shapes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LoadPartialModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LoadPartialModelProto)
  return false;
#undef DO_
}

void LoadPartialModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LoadPartialModelProto)
  // required string out = 1;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoadPartialModelProto.out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->out(), output);
  }

  // repeated string load_layer_names = 124;
  for (int i = 0; i < this->load_layer_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->load_layer_names(i).data(), this->load_layer_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoadPartialModelProto.load_layer_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      124, this->load_layer_names(i), output);
  }

  // repeated int64 load_layer_shapes = 125;
  for (int i = 0; i < this->load_layer_shapes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      125, this->load_layer_shapes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LoadPartialModelProto)
}

::google::protobuf::uint8* LoadPartialModelProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LoadPartialModelProto)
  // required string out = 1;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoadPartialModelProto.out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->out(), target);
  }

  // repeated string load_layer_names = 124;
  for (int i = 0; i < this->load_layer_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->load_layer_names(i).data(), this->load_layer_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LoadPartialModelProto.load_layer_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(124, this->load_layer_names(i), target);
  }

  // repeated int64 load_layer_shapes = 125;
  for (int i = 0; i < this->load_layer_shapes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(125, this->load_layer_shapes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LoadPartialModelProto)
  return target;
}

size_t LoadPartialModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LoadPartialModelProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string out = 1;
  if (has_out()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out());
  }
  // repeated string load_layer_names = 124;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->load_layer_names_size());
  for (int i = 0; i < this->load_layer_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->load_layer_names(i));
  }

  // repeated int64 load_layer_shapes = 125;
  {
    size_t data_size = 0;
    unsigned int count = this->load_layer_shapes_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->load_layer_shapes(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->load_layer_shapes_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadPartialModelProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LoadPartialModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPartialModelProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadPartialModelProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LoadPartialModelProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LoadPartialModelProto)
    MergeFrom(*source);
  }
}

void LoadPartialModelProto::MergeFrom(const LoadPartialModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LoadPartialModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  load_layer_names_.MergeFrom(from.load_layer_names_);
  load_layer_shapes_.MergeFrom(from.load_layer_shapes_);
  if (from.has_out()) {
    set_has_out();
    out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_);
  }
}

void LoadPartialModelProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LoadPartialModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPartialModelProto::CopyFrom(const LoadPartialModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LoadPartialModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPartialModelProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LoadPartialModelProto::Swap(LoadPartialModelProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadPartialModelProto::InternalSwap(LoadPartialModelProto* other) {
  load_layer_names_.UnsafeArenaSwap(&other->load_layer_names_);
  load_layer_shapes_.UnsafeArenaSwap(&other->load_layer_shapes_);
  out_.Swap(&other->out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadPartialModelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadPartialModelProto

// required string out = 1;
bool LoadPartialModelProto::has_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoadPartialModelProto::set_has_out() {
  _has_bits_[0] |= 0x00000001u;
}
void LoadPartialModelProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoadPartialModelProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
const ::std::string& LoadPartialModelProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.LoadPartialModelProto.out)
  return out_.GetNoArena();
}
void LoadPartialModelProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoadPartialModelProto.out)
}
#if LANG_CXX11
void LoadPartialModelProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoadPartialModelProto.out)
}
#endif
void LoadPartialModelProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoadPartialModelProto.out)
}
void LoadPartialModelProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoadPartialModelProto.out)
}
::std::string* LoadPartialModelProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.LoadPartialModelProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoadPartialModelProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.LoadPartialModelProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoadPartialModelProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoadPartialModelProto.out)
}

// repeated string load_layer_names = 124;
int LoadPartialModelProto::load_layer_names_size() const {
  return load_layer_names_.size();
}
void LoadPartialModelProto::clear_load_layer_names() {
  load_layer_names_.Clear();
}
const ::std::string& LoadPartialModelProto::load_layer_names(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_.Get(index);
}
::std::string* LoadPartialModelProto::mutable_load_layer_names(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_.Mutable(index);
}
void LoadPartialModelProto::set_load_layer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LoadPartialModelProto.load_layer_names)
  load_layer_names_.Mutable(index)->assign(value);
}
void LoadPartialModelProto::set_load_layer_names(int index, const char* value) {
  load_layer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LoadPartialModelProto.load_layer_names)
}
void LoadPartialModelProto::set_load_layer_names(int index, const char* value, size_t size) {
  load_layer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LoadPartialModelProto.load_layer_names)
}
::std::string* LoadPartialModelProto::add_load_layer_names() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_.Add();
}
void LoadPartialModelProto::add_load_layer_names(const ::std::string& value) {
  load_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LoadPartialModelProto.load_layer_names)
}
void LoadPartialModelProto::add_load_layer_names(const char* value) {
  load_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LoadPartialModelProto.load_layer_names)
}
void LoadPartialModelProto::add_load_layer_names(const char* value, size_t size) {
  load_layer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LoadPartialModelProto.load_layer_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoadPartialModelProto::load_layer_names() const {
  // @@protoc_insertion_point(field_list:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LoadPartialModelProto::mutable_load_layer_names() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LoadPartialModelProto.load_layer_names)
  return &load_layer_names_;
}

// repeated int64 load_layer_shapes = 125;
int LoadPartialModelProto::load_layer_shapes_size() const {
  return load_layer_shapes_.size();
}
void LoadPartialModelProto::clear_load_layer_shapes() {
  load_layer_shapes_.Clear();
}
::google::protobuf::int64 LoadPartialModelProto::load_layer_shapes(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LoadPartialModelProto.load_layer_shapes)
  return load_layer_shapes_.Get(index);
}
void LoadPartialModelProto::set_load_layer_shapes(int index, ::google::protobuf::int64 value) {
  load_layer_shapes_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LoadPartialModelProto.load_layer_shapes)
}
void LoadPartialModelProto::add_load_layer_shapes(::google::protobuf::int64 value) {
  load_layer_shapes_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LoadPartialModelProto.load_layer_shapes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LoadPartialModelProto::load_layer_shapes() const {
  // @@protoc_insertion_point(field_list:caffe.LoadPartialModelProto.load_layer_shapes)
  return load_layer_shapes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LoadPartialModelProto::mutable_load_layer_shapes() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LoadPartialModelProto.load_layer_shapes)
  return &load_layer_shapes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
