// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace caffe {
class BatchNormProto;
class BatchNormProtoDefaultTypeInternal;
extern BatchNormProtoDefaultTypeInternal _BatchNormProto_default_instance_;
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobShape;
class BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class BoxingProto;
class BoxingProtoDefaultTypeInternal;
extern BoxingProtoDefaultTypeInternal _BoxingProto_default_instance_;
class ConcatProto;
class ConcatProtoDefaultTypeInternal;
extern ConcatProtoDefaultTypeInternal _ConcatProto_default_instance_;
class ConvolutionProto;
class ConvolutionProtoDefaultTypeInternal;
extern ConvolutionProtoDefaultTypeInternal _ConvolutionProto_default_instance_;
class CopyProto;
class CopyProtoDefaultTypeInternal;
extern CopyProtoDefaultTypeInternal _CopyProto_default_instance_;
class DeviceGroup;
class DeviceGroupDefaultTypeInternal;
extern DeviceGroupDefaultTypeInternal _DeviceGroup_default_instance_;
class DeviceSet;
class DeviceSetDefaultTypeInternal;
extern DeviceSetDefaultTypeInternal _DeviceSet_default_instance_;
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class InnerProductProto;
class InnerProductProtoDefaultTypeInternal;
extern InnerProductProtoDefaultTypeInternal _InnerProductProto_default_instance_;
class LRNProto;
class LRNProtoDefaultTypeInternal;
extern LRNProtoDefaultTypeInternal _LRNProto_default_instance_;
class LayerProto;
class LayerProtoDefaultTypeInternal;
extern LayerProtoDefaultTypeInternal _LayerProto_default_instance_;
class LayerSet;
class LayerSetDefaultTypeInternal;
extern LayerSetDefaultTypeInternal _LayerSet_default_instance_;
class LoadPartialModelProto;
class LoadPartialModelProtoDefaultTypeInternal;
extern LoadPartialModelProtoDefaultTypeInternal _LoadPartialModelProto_default_instance_;
class LoaderProto;
class LoaderProtoDefaultTypeInternal;
extern LoaderProtoDefaultTypeInternal _LoaderProto_default_instance_;
class Machine;
class MachineDefaultTypeInternal;
extern MachineDefaultTypeInternal _Machine_default_instance_;
class MachineGroup;
class MachineGroupDefaultTypeInternal;
extern MachineGroupDefaultTypeInternal _MachineGroup_default_instance_;
class ModelUpdateProto;
class ModelUpdateProtoDefaultTypeInternal;
extern ModelUpdateProtoDefaultTypeInternal _ModelUpdateProto_default_instance_;
class MultinomialLogisticLossProto;
class MultinomialLogisticLossProtoDefaultTypeInternal;
extern MultinomialLogisticLossProtoDefaultTypeInternal _MultinomialLogisticLossProto_default_instance_;
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetProto;
class NetProtoDefaultTypeInternal;
extern NetProtoDefaultTypeInternal _NetProto_default_instance_;
class NetState;
class NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NullUpdateProto;
class NullUpdateProtoDefaultTypeInternal;
extern NullUpdateProtoDefaultTypeInternal _NullUpdateProto_default_instance_;
class ParamSpec;
class ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class PlaceholderProto;
class PlaceholderProtoDefaultTypeInternal;
extern PlaceholderProtoDefaultTypeInternal _PlaceholderProto_default_instance_;
class PlacementGroup;
class PlacementGroupDefaultTypeInternal;
extern PlacementGroupDefaultTypeInternal _PlacementGroup_default_instance_;
class PoolingProto;
class PoolingProtoDefaultTypeInternal;
extern PoolingProtoDefaultTypeInternal _PoolingProto_default_instance_;
class ReLUProto;
class ReLUProtoDefaultTypeInternal;
extern ReLUProtoDefaultTypeInternal _ReLUProto_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class SigmoidProto;
class SigmoidProtoDefaultTypeInternal;
extern SigmoidProtoDefaultTypeInternal _SigmoidProto_default_instance_;
class SoftmaxProto;
class SoftmaxProtoDefaultTypeInternal;
extern SoftmaxProtoDefaultTypeInternal _SoftmaxProto_default_instance_;
class SolverProto;
class SolverProtoDefaultTypeInternal;
extern SolverProtoDefaultTypeInternal _SolverProto_default_instance_;
class SolverState;
class SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class SplitProto;
class SplitProtoDefaultTypeInternal;
extern SplitProtoDefaultTypeInternal _SplitProto_default_instance_;
class StoreProto;
class StoreProtoDefaultTypeInternal;
extern StoreProtoDefaultTypeInternal _StoreProto_default_instance_;
class Strategy;
class StrategyDefaultTypeInternal;
extern StrategyDefaultTypeInternal _Strategy_default_instance_;
}  // namespace caffe

namespace caffe {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_caffe_2eproto();
void protobuf_InitDefaults_caffe_2eproto();

enum BlobProto_DataType {
  BlobProto_DataType_UNDEFINED = 0,
  BlobProto_DataType_FLOAT = 1,
  BlobProto_DataType_INT32 = 2,
  BlobProto_DataType_BYTE = 3,
  BlobProto_DataType_STRING = 4,
  BlobProto_DataType_BOOL = 5,
  BlobProto_DataType_UINT8 = 6,
  BlobProto_DataType_INT8 = 7,
  BlobProto_DataType_UINT16 = 8,
  BlobProto_DataType_INT16 = 9,
  BlobProto_DataType_INT64 = 10,
  BlobProto_DataType_FLOAT16 = 12,
  BlobProto_DataType_DOUBLE = 13
};
bool BlobProto_DataType_IsValid(int value);
const BlobProto_DataType BlobProto_DataType_DataType_MIN = BlobProto_DataType_UNDEFINED;
const BlobProto_DataType BlobProto_DataType_DataType_MAX = BlobProto_DataType_DOUBLE;
const int BlobProto_DataType_DataType_ARRAYSIZE = BlobProto_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlobProto_DataType_descriptor();
inline const ::std::string& BlobProto_DataType_Name(BlobProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlobProto_DataType_descriptor(), value);
}
inline bool BlobProto_DataType_Parse(
    const ::std::string& name, BlobProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlobProto_DataType>(
    BlobProto_DataType_descriptor(), name, value);
}
enum SolverProto_SolverMode {
  SolverProto_SolverMode_CPU = 0,
  SolverProto_SolverMode_GPU = 1
};
bool SolverProto_SolverMode_IsValid(int value);
const SolverProto_SolverMode SolverProto_SolverMode_SolverMode_MIN = SolverProto_SolverMode_CPU;
const SolverProto_SolverMode SolverProto_SolverMode_SolverMode_MAX = SolverProto_SolverMode_GPU;
const int SolverProto_SolverMode_SolverMode_ARRAYSIZE = SolverProto_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_SolverMode_descriptor();
inline const ::std::string& SolverProto_SolverMode_Name(SolverProto_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_SolverMode_descriptor(), value);
}
inline bool SolverProto_SolverMode_Parse(
    const ::std::string& name, SolverProto_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_SolverMode>(
    SolverProto_SolverMode_descriptor(), name, value);
}
enum SolverProto_SolverType {
  SolverProto_SolverType_SGD = 0,
  SolverProto_SolverType_NESTEROV = 1,
  SolverProto_SolverType_ADAGRAD = 2
};
bool SolverProto_SolverType_IsValid(int value);
const SolverProto_SolverType SolverProto_SolverType_SolverType_MIN = SolverProto_SolverType_SGD;
const SolverProto_SolverType SolverProto_SolverType_SolverType_MAX = SolverProto_SolverType_ADAGRAD;
const int SolverProto_SolverType_SolverType_ARRAYSIZE = SolverProto_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_SolverType_descriptor();
inline const ::std::string& SolverProto_SolverType_Name(SolverProto_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_SolverType_descriptor(), value);
}
inline bool SolverProto_SolverType_Parse(
    const ::std::string& name, SolverProto_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_SolverType>(
    SolverProto_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum ConvolutionProto_Engine {
  ConvolutionProto_Engine_DEFAULT = 0,
  ConvolutionProto_Engine_CAFFE = 1,
  ConvolutionProto_Engine_CUDNN = 2
};
bool ConvolutionProto_Engine_IsValid(int value);
const ConvolutionProto_Engine ConvolutionProto_Engine_Engine_MIN = ConvolutionProto_Engine_DEFAULT;
const ConvolutionProto_Engine ConvolutionProto_Engine_Engine_MAX = ConvolutionProto_Engine_CUDNN;
const int ConvolutionProto_Engine_Engine_ARRAYSIZE = ConvolutionProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionProto_Engine_descriptor();
inline const ::std::string& ConvolutionProto_Engine_Name(ConvolutionProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionProto_Engine_descriptor(), value);
}
inline bool ConvolutionProto_Engine_Parse(
    const ::std::string& name, ConvolutionProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionProto_Engine>(
    ConvolutionProto_Engine_descriptor(), name, value);
}
enum PoolingProto_PoolMethod {
  PoolingProto_PoolMethod_MAX = 0,
  PoolingProto_PoolMethod_AVE = 1,
  PoolingProto_PoolMethod_STOCHASTIC = 2
};
bool PoolingProto_PoolMethod_IsValid(int value);
const PoolingProto_PoolMethod PoolingProto_PoolMethod_PoolMethod_MIN = PoolingProto_PoolMethod_MAX;
const PoolingProto_PoolMethod PoolingProto_PoolMethod_PoolMethod_MAX = PoolingProto_PoolMethod_STOCHASTIC;
const int PoolingProto_PoolMethod_PoolMethod_ARRAYSIZE = PoolingProto_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingProto_PoolMethod_descriptor();
inline const ::std::string& PoolingProto_PoolMethod_Name(PoolingProto_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingProto_PoolMethod_descriptor(), value);
}
inline bool PoolingProto_PoolMethod_Parse(
    const ::std::string& name, PoolingProto_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingProto_PoolMethod>(
    PoolingProto_PoolMethod_descriptor(), name, value);
}
enum PoolingProto_Engine {
  PoolingProto_Engine_DEFAULT = 0,
  PoolingProto_Engine_CAFFE = 1,
  PoolingProto_Engine_CUDNN = 2
};
bool PoolingProto_Engine_IsValid(int value);
const PoolingProto_Engine PoolingProto_Engine_Engine_MIN = PoolingProto_Engine_DEFAULT;
const PoolingProto_Engine PoolingProto_Engine_Engine_MAX = PoolingProto_Engine_CUDNN;
const int PoolingProto_Engine_Engine_ARRAYSIZE = PoolingProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingProto_Engine_descriptor();
inline const ::std::string& PoolingProto_Engine_Name(PoolingProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingProto_Engine_descriptor(), value);
}
inline bool PoolingProto_Engine_Parse(
    const ::std::string& name, PoolingProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingProto_Engine>(
    PoolingProto_Engine_descriptor(), name, value);
}
enum ReLUProto_Engine {
  ReLUProto_Engine_DEFAULT = 0,
  ReLUProto_Engine_CAFFE = 1,
  ReLUProto_Engine_CUDNN = 2
};
bool ReLUProto_Engine_IsValid(int value);
const ReLUProto_Engine ReLUProto_Engine_Engine_MIN = ReLUProto_Engine_DEFAULT;
const ReLUProto_Engine ReLUProto_Engine_Engine_MAX = ReLUProto_Engine_CUDNN;
const int ReLUProto_Engine_Engine_ARRAYSIZE = ReLUProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUProto_Engine_descriptor();
inline const ::std::string& ReLUProto_Engine_Name(ReLUProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUProto_Engine_descriptor(), value);
}
inline bool ReLUProto_Engine_Parse(
    const ::std::string& name, ReLUProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUProto_Engine>(
    ReLUProto_Engine_descriptor(), name, value);
}
enum LRNProto_NormRegion {
  LRNProto_NormRegion_ACROSS_CHANNELS = 0,
  LRNProto_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNProto_NormRegion_IsValid(int value);
const LRNProto_NormRegion LRNProto_NormRegion_NormRegion_MIN = LRNProto_NormRegion_ACROSS_CHANNELS;
const LRNProto_NormRegion LRNProto_NormRegion_NormRegion_MAX = LRNProto_NormRegion_WITHIN_CHANNEL;
const int LRNProto_NormRegion_NormRegion_ARRAYSIZE = LRNProto_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNProto_NormRegion_descriptor();
inline const ::std::string& LRNProto_NormRegion_Name(LRNProto_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNProto_NormRegion_descriptor(), value);
}
inline bool LRNProto_NormRegion_Parse(
    const ::std::string& name, LRNProto_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNProto_NormRegion>(
    LRNProto_NormRegion_descriptor(), name, value);
}
enum LRNProto_Engine {
  LRNProto_Engine_DEFAULT = 0,
  LRNProto_Engine_CAFFE = 1,
  LRNProto_Engine_CUDNN = 2
};
bool LRNProto_Engine_IsValid(int value);
const LRNProto_Engine LRNProto_Engine_Engine_MIN = LRNProto_Engine_DEFAULT;
const LRNProto_Engine LRNProto_Engine_Engine_MAX = LRNProto_Engine_CUDNN;
const int LRNProto_Engine_Engine_ARRAYSIZE = LRNProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNProto_Engine_descriptor();
inline const ::std::string& LRNProto_Engine_Name(LRNProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNProto_Engine_descriptor(), value);
}
inline bool LRNProto_Engine_Parse(
    const ::std::string& name, LRNProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNProto_Engine>(
    LRNProto_Engine_descriptor(), name, value);
}
enum SigmoidProto_Engine {
  SigmoidProto_Engine_DEFAULT = 0,
  SigmoidProto_Engine_CAFFE = 1,
  SigmoidProto_Engine_CUDNN = 2
};
bool SigmoidProto_Engine_IsValid(int value);
const SigmoidProto_Engine SigmoidProto_Engine_Engine_MIN = SigmoidProto_Engine_DEFAULT;
const SigmoidProto_Engine SigmoidProto_Engine_Engine_MAX = SigmoidProto_Engine_CUDNN;
const int SigmoidProto_Engine_Engine_ARRAYSIZE = SigmoidProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidProto_Engine_descriptor();
inline const ::std::string& SigmoidProto_Engine_Name(SigmoidProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidProto_Engine_descriptor(), value);
}
inline bool SigmoidProto_Engine_Parse(
    const ::std::string& name, SigmoidProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidProto_Engine>(
    SigmoidProto_Engine_descriptor(), name, value);
}
enum SoftmaxProto_Engine {
  SoftmaxProto_Engine_DEFAULT = 0,
  SoftmaxProto_Engine_CAFFE = 1,
  SoftmaxProto_Engine_CUDNN = 2
};
bool SoftmaxProto_Engine_IsValid(int value);
const SoftmaxProto_Engine SoftmaxProto_Engine_Engine_MIN = SoftmaxProto_Engine_DEFAULT;
const SoftmaxProto_Engine SoftmaxProto_Engine_Engine_MAX = SoftmaxProto_Engine_CUDNN;
const int SoftmaxProto_Engine_Engine_ARRAYSIZE = SoftmaxProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxProto_Engine_descriptor();
inline const ::std::string& SoftmaxProto_Engine_Name(SoftmaxProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxProto_Engine_descriptor(), value);
}
inline bool SoftmaxProto_Engine_Parse(
    const ::std::string& name, SoftmaxProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxProto_Engine>(
    SoftmaxProto_Engine_descriptor(), name, value);
}
enum StoreProto_Engine {
  StoreProto_Engine_DEFAULT = 0,
  StoreProto_Engine_CAFFE = 1,
  StoreProto_Engine_CUDNN = 2
};
bool StoreProto_Engine_IsValid(int value);
const StoreProto_Engine StoreProto_Engine_Engine_MIN = StoreProto_Engine_DEFAULT;
const StoreProto_Engine StoreProto_Engine_Engine_MAX = StoreProto_Engine_CUDNN;
const int StoreProto_Engine_Engine_ARRAYSIZE = StoreProto_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoreProto_Engine_descriptor();
inline const ::std::string& StoreProto_Engine_Name(StoreProto_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoreProto_Engine_descriptor(), value);
}
inline bool StoreProto_Engine_Parse(
    const ::std::string& name, StoreProto_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoreProto_Engine>(
    StoreProto_Engine_descriptor(), name, value);
}
enum ParallelPolicy {
  kUnknownParallel = 0,
  kNaiveParallelOnSingleDevice = 1,
  kDataParallelOnMultipleDevices = 2,
  kModelParallelOnMultipleDevices = 3,
  kNaiveParallelOnSingleMachine = 4,
  kDataParallelOnMultipleMachines = 5,
  kModelParallelOnMultipleMachines = 6
};
bool ParallelPolicy_IsValid(int value);
const ParallelPolicy ParallelPolicy_MIN = kUnknownParallel;
const ParallelPolicy ParallelPolicy_MAX = kModelParallelOnMultipleMachines;
const int ParallelPolicy_ARRAYSIZE = ParallelPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParallelPolicy_descriptor();
inline const ::std::string& ParallelPolicy_Name(ParallelPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParallelPolicy_descriptor(), value);
}
inline bool ParallelPolicy_Parse(
    const ::std::string& name, ParallelPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParallelPolicy>(
    ParallelPolicy_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
enum CopyType {
  ForwardH2D = 0,
  ForwardD2H = 1,
  ForwardD2D = 2
};
bool CopyType_IsValid(int value);
const CopyType CopyType_MIN = ForwardH2D;
const CopyType CopyType_MAX = ForwardD2D;
const int CopyType_ARRAYSIZE = CopyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CopyType_descriptor();
inline const ::std::string& CopyType_Name(CopyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CopyType_descriptor(), value);
}
inline bool CopyType_Parse(
    const ::std::string& name, CopyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CopyType>(
    CopyType_descriptor(), name, value);
}
enum BoxingOp {
  CONCAT = 0,
  ADD = 1,
  COPY = 2,
  SPLIT = 3
};
bool BoxingOp_IsValid(int value);
const BoxingOp BoxingOp_MIN = CONCAT;
const BoxingOp BoxingOp_MAX = SPLIT;
const int BoxingOp_ARRAYSIZE = BoxingOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* BoxingOp_descriptor();
inline const ::std::string& BoxingOp_Name(BoxingOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    BoxingOp_descriptor(), value);
}
inline bool BoxingOp_Parse(
    const ::std::string& name, BoxingOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BoxingOp>(
    BoxingOp_descriptor(), name, value);
}
// ===================================================================

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  inline BlobProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BlobProto_DataType DataType;
  static const DataType UNDEFINED =
    BlobProto_DataType_UNDEFINED;
  static const DataType FLOAT =
    BlobProto_DataType_FLOAT;
  static const DataType INT32 =
    BlobProto_DataType_INT32;
  static const DataType BYTE =
    BlobProto_DataType_BYTE;
  static const DataType STRING =
    BlobProto_DataType_STRING;
  static const DataType BOOL =
    BlobProto_DataType_BOOL;
  static const DataType UINT8 =
    BlobProto_DataType_UINT8;
  static const DataType INT8 =
    BlobProto_DataType_INT8;
  static const DataType UINT16 =
    BlobProto_DataType_UINT16;
  static const DataType INT16 =
    BlobProto_DataType_INT16;
  static const DataType INT64 =
    BlobProto_DataType_INT64;
  static const DataType FLOAT16 =
    BlobProto_DataType_FLOAT16;
  static const DataType DOUBLE =
    BlobProto_DataType_DOUBLE;
  static inline bool DataType_IsValid(int value) {
    return BlobProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    BlobProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    BlobProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    BlobProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return BlobProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return BlobProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return BlobProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::google::protobuf::int64 shape() const;
  void set_shape(::google::protobuf::int64 value);

  // optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::caffe::BlobProto_DataType data_type() const;
  void set_data_type(::caffe::BlobProto_DataType value);

  // repeated float float_data = 3 [packed = true];
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 3;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 4 [packed = true];
  int int32_data_size() const;
  void clear_int32_data();
  static const int kInt32DataFieldNumber = 4;
  ::google::protobuf::int32 int32_data(int index) const;
  void set_int32_data(int index, ::google::protobuf::int32 value);
  void add_int32_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // optional bytes byte_data = 5;
  bool has_byte_data() const;
  void clear_byte_data();
  static const int kByteDataFieldNumber = 5;
  const ::std::string& byte_data() const;
  void set_byte_data(const ::std::string& value);
  #if LANG_CXX11
  void set_byte_data(::std::string&& value);
  #endif
  void set_byte_data(const char* value);
  void set_byte_data(const void* value, size_t size);
  ::std::string* mutable_byte_data();
  ::std::string* release_byte_data();
  void set_allocated_byte_data(::std::string* byte_data);

  // repeated bytes string_data = 6;
  int string_data_size() const;
  void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  const ::std::string& string_data(int index) const;
  ::std::string* mutable_string_data(int index);
  void set_string_data(int index, const ::std::string& value);
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const void* value, size_t size);
  ::std::string* add_string_data();
  void add_string_data(const ::std::string& value);
  void add_string_data(const char* value);
  void add_string_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // repeated double double_data = 9 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 9;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated int64 int64_data = 10 [packed = true];
  int int64_data_size() const;
  void clear_int64_data();
  static const int kInt64DataFieldNumber = 10;
  ::google::protobuf::int64 int64_data(int index) const;
  void set_int64_data(int index, ::google::protobuf::int64 value);
  void add_int64_data(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_data();

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_data_type();
  void clear_has_data_type();
  void set_has_byte_data();
  void clear_has_byte_data();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  mutable int _int32_data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_data_;
  mutable int _int64_data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr byte_data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 shape_;
  int data_type_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class BlobShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  inline BlobShape* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_mean();
  void clear_has_mean();
  void set_has_std();
  void clear_has_std();
  void set_has_sparse();
  void clear_has_sparse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  ::google::protobuf::int32 sparse_;
  float max_;
  float std_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  inline NetParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .caffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  const ::caffe::BlobShape& input_shape(int index) const;
  ::caffe::BlobShape* mutable_input_shape(int index);
  ::caffe::BlobShape* add_input_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  bool force_backward() const;
  void set_force_backward(bool value);

  // optional .caffe.NetState state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::caffe::NetState& state() const;
  ::caffe::NetState* mutable_state();
  ::caffe::NetState* release_state();
  void set_allocated_state(::caffe::NetState* state);

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  bool debug_info() const;
  void set_debug_info(bool value);

  // repeated .caffe.LayerProto layer = 100;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 100;
  const ::caffe::LayerProto& layer(int index) const;
  ::caffe::LayerProto* mutable_layer(int index);
  ::caffe::LayerProto* add_layer();
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerProto >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LayerProto >&
      layer() const;

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_force_backward();
  void clear_has_force_backward();
  void set_has_state();
  void clear_has_state();
  void set_has_debug_info();
  void clear_has_debug_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerProto > layer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::NetState* state_;
  bool force_backward_;
  bool debug_info_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class DeviceSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DeviceSet) */ {
 public:
  DeviceSet();
  virtual ~DeviceSet();

  DeviceSet(const DeviceSet& from);

  inline DeviceSet& operator=(const DeviceSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceSet& default_instance();

  static inline const DeviceSet* internal_default_instance() {
    return reinterpret_cast<const DeviceSet*>(
               &_DeviceSet_default_instance_);
  }

  void Swap(DeviceSet* other);

  // implements Message ----------------------------------------------

  inline DeviceSet* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceSet& from);
  void MergeFrom(const DeviceSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 device_id = 1;
  int device_id_size() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::int32 device_id(int index) const;
  void set_device_id(int index, ::google::protobuf::int32 value);
  void add_device_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      device_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_device_id();

  // @@protoc_insertion_point(class_scope:caffe.DeviceSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > device_id_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class Machine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Machine) */ {
 public:
  Machine();
  virtual ~Machine();

  Machine(const Machine& from);

  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Machine& default_instance();

  static inline const Machine* internal_default_instance() {
    return reinterpret_cast<const Machine*>(
               &_Machine_default_instance_);
  }

  void Swap(Machine* other);

  // implements Message ----------------------------------------------

  inline Machine* New() const PROTOBUF_FINAL { return New(NULL); }

  Machine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Machine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // optional .caffe.DeviceSet device_set = 3;
  bool has_device_set() const;
  void clear_device_set();
  static const int kDeviceSetFieldNumber = 3;
  const ::caffe::DeviceSet& device_set() const;
  ::caffe::DeviceSet* mutable_device_set();
  ::caffe::DeviceSet* release_device_set();
  void set_allocated_device_set(::caffe::DeviceSet* device_set);

  // @@protoc_insertion_point(class_scope:caffe.Machine)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_port();
  void clear_has_port();
  void set_has_device_set();
  void clear_has_device_set();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::caffe::DeviceSet* device_set_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();

  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }

  void Swap(Resource* other);

  // implements Message ----------------------------------------------

  inline Resource* New() const PROTOBUF_FINAL { return New(NULL); }

  Resource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.Machine machine = 1;
  int machine_size() const;
  void clear_machine();
  static const int kMachineFieldNumber = 1;
  const ::caffe::Machine& machine(int index) const;
  ::caffe::Machine* mutable_machine(int index);
  ::caffe::Machine* add_machine();
  ::google::protobuf::RepeatedPtrField< ::caffe::Machine >*
      mutable_machine();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Machine >&
      machine() const;

  // @@protoc_insertion_point(class_scope:caffe.Resource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Machine > machine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class LayerSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerSet) */ {
 public:
  LayerSet();
  virtual ~LayerSet();

  LayerSet(const LayerSet& from);

  inline LayerSet& operator=(const LayerSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerSet& default_instance();

  static inline const LayerSet* internal_default_instance() {
    return reinterpret_cast<const LayerSet*>(
               &_LayerSet_default_instance_);
  }

  void Swap(LayerSet* other);

  // implements Message ----------------------------------------------

  inline LayerSet* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerSet& from);
  void MergeFrom(const LayerSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:caffe.LayerSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class DeviceGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DeviceGroup) */ {
 public:
  DeviceGroup();
  virtual ~DeviceGroup();

  DeviceGroup(const DeviceGroup& from);

  inline DeviceGroup& operator=(const DeviceGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceGroup& default_instance();

  static inline const DeviceGroup* internal_default_instance() {
    return reinterpret_cast<const DeviceGroup*>(
               &_DeviceGroup_default_instance_);
  }

  void Swap(DeviceGroup* other);

  // implements Message ----------------------------------------------

  inline DeviceGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceGroup& from);
  void MergeFrom(const DeviceGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int32 begin() const;
  void set_begin(::google::protobuf::int32 value);

  // required int32 end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.DeviceGroup)
 private:
  void set_has_begin();
  void clear_has_begin();
  void set_has_end();
  void clear_has_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 end_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class MachineGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MachineGroup) */ {
 public:
  MachineGroup();
  virtual ~MachineGroup();

  MachineGroup(const MachineGroup& from);

  inline MachineGroup& operator=(const MachineGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineGroup& default_instance();

  static inline const MachineGroup* internal_default_instance() {
    return reinterpret_cast<const MachineGroup*>(
               &_MachineGroup_default_instance_);
  }

  void Swap(MachineGroup* other);

  // implements Message ----------------------------------------------

  inline MachineGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  MachineGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MachineGroup& from);
  void MergeFrom(const MachineGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MachineGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int32 begin() const;
  void set_begin(::google::protobuf::int32 value);

  // required int32 end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.MachineGroup)
 private:
  void set_has_begin();
  void clear_has_begin();
  void set_has_end();
  void clear_has_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 end_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class PlacementGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PlacementGroup) */ {
 public:
  PlacementGroup();
  virtual ~PlacementGroup();

  PlacementGroup(const PlacementGroup& from);

  inline PlacementGroup& operator=(const PlacementGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacementGroup& default_instance();

  static inline const PlacementGroup* internal_default_instance() {
    return reinterpret_cast<const PlacementGroup*>(
               &_PlacementGroup_default_instance_);
  }

  void Swap(PlacementGroup* other);

  // implements Message ----------------------------------------------

  inline PlacementGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  PlacementGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlacementGroup& from);
  void MergeFrom(const PlacementGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlacementGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .caffe.LayerSet layer_set = 2;
  bool has_layer_set() const;
  void clear_layer_set();
  static const int kLayerSetFieldNumber = 2;
  const ::caffe::LayerSet& layer_set() const;
  ::caffe::LayerSet* mutable_layer_set();
  ::caffe::LayerSet* release_layer_set();
  void set_allocated_layer_set(::caffe::LayerSet* layer_set);

  // optional .caffe.DeviceGroup device_group = 3;
  bool has_device_group() const;
  void clear_device_group();
  static const int kDeviceGroupFieldNumber = 3;
  const ::caffe::DeviceGroup& device_group() const;
  ::caffe::DeviceGroup* mutable_device_group();
  ::caffe::DeviceGroup* release_device_group();
  void set_allocated_device_group(::caffe::DeviceGroup* device_group);

  // optional .caffe.MachineGroup machine_group = 4;
  bool has_machine_group() const;
  void clear_machine_group();
  static const int kMachineGroupFieldNumber = 4;
  const ::caffe::MachineGroup& machine_group() const;
  ::caffe::MachineGroup* mutable_machine_group();
  ::caffe::MachineGroup* release_machine_group();
  void set_allocated_machine_group(::caffe::MachineGroup* machine_group);

  // optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
  bool has_parallel_policy() const;
  void clear_parallel_policy();
  static const int kParallelPolicyFieldNumber = 5;
  ::caffe::ParallelPolicy parallel_policy() const;
  void set_parallel_policy(::caffe::ParallelPolicy value);

  // @@protoc_insertion_point(class_scope:caffe.PlacementGroup)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_layer_set();
  void clear_has_layer_set();
  void set_has_device_group();
  void clear_has_device_group();
  void set_has_machine_group();
  void clear_has_machine_group();
  void set_has_parallel_policy();
  void clear_has_parallel_policy();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::LayerSet* layer_set_;
  ::caffe::DeviceGroup* device_group_;
  ::caffe::MachineGroup* machine_group_;
  int parallel_policy_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class Strategy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Strategy) */ {
 public:
  Strategy();
  virtual ~Strategy();

  Strategy(const Strategy& from);

  inline Strategy& operator=(const Strategy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Strategy& default_instance();

  static inline const Strategy* internal_default_instance() {
    return reinterpret_cast<const Strategy*>(
               &_Strategy_default_instance_);
  }

  void Swap(Strategy* other);

  // implements Message ----------------------------------------------

  inline Strategy* New() const PROTOBUF_FINAL { return New(NULL); }

  Strategy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Strategy& from);
  void MergeFrom(const Strategy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Strategy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.PlacementGroup placement_group = 1;
  int placement_group_size() const;
  void clear_placement_group();
  static const int kPlacementGroupFieldNumber = 1;
  const ::caffe::PlacementGroup& placement_group(int index) const;
  ::caffe::PlacementGroup* mutable_placement_group(int index);
  ::caffe::PlacementGroup* add_placement_group();
  ::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup >*
      mutable_placement_group();
  const ::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup >&
      placement_group() const;

  // @@protoc_insertion_point(class_scope:caffe.Strategy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup > placement_group_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class SolverProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverProto) */ {
 public:
  SolverProto();
  virtual ~SolverProto();

  SolverProto(const SolverProto& from);

  inline SolverProto& operator=(const SolverProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverProto& default_instance();

  static inline const SolverProto* internal_default_instance() {
    return reinterpret_cast<const SolverProto*>(
               &_SolverProto_default_instance_);
  }

  void Swap(SolverProto* other);

  // implements Message ----------------------------------------------

  inline SolverProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverProto& from);
  void MergeFrom(const SolverProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SolverProto_SolverMode SolverMode;
  static const SolverMode CPU =
    SolverProto_SolverMode_CPU;
  static const SolverMode GPU =
    SolverProto_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverProto_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverProto_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverProto_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverProto_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverProto_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverProto_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverProto_SolverMode_Parse(name, value);
  }

  typedef SolverProto_SolverType SolverType;
  static const SolverType SGD =
    SolverProto_SolverType_SGD;
  static const SolverType NESTEROV =
    SolverProto_SolverType_NESTEROV;
  static const SolverType ADAGRAD =
    SolverProto_SolverType_ADAGRAD;
  static inline bool SolverType_IsValid(int value) {
    return SolverProto_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverProto_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverProto_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverProto_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverProto_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverProto_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverProto_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::std::string& train_net() const;
  void set_train_net(const ::std::string& value);
  #if LANG_CXX11
  void set_train_net(::std::string&& value);
  #endif
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  ::std::string* mutable_train_net();
  ::std::string* release_train_net();
  void set_allocated_train_net(::std::string* train_net);

  // repeated string test_net = 2;
  int test_net_size() const;
  void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  const ::std::string& test_net(int index) const;
  ::std::string* mutable_test_net(int index);
  void set_test_net(int index, const ::std::string& value);
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  ::std::string* add_test_net();
  void add_test_net(const ::std::string& value);
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // required string resource = 3;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 3;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // required string strategy = 4;
  bool has_strategy() const;
  void clear_strategy();
  static const int kStrategyFieldNumber = 4;
  const ::std::string& strategy() const;
  void set_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_strategy(::std::string&& value);
  #endif
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  ::std::string* mutable_strategy();
  ::std::string* release_strategy();
  void set_allocated_strategy(::std::string* strategy);

  // optional .caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  const ::caffe::NetState& train_state() const;
  ::caffe::NetState* mutable_train_state();
  ::caffe::NetState* release_train_state();
  void set_allocated_train_state(::caffe::NetState* train_state);

  // repeated .caffe.NetState test_state = 27;
  int test_state_size() const;
  void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  const ::caffe::NetState& test_state(int index) const;
  ::caffe::NetState* mutable_test_state(int index);
  ::caffe::NetState* add_test_state();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;

  // repeated int32 test_iter = 28;
  int test_iter_size() const;
  void clear_test_iter();
  static const int kTestIterFieldNumber = 28;
  ::google::protobuf::int32 test_iter(int index) const;
  void set_test_iter(int index, ::google::protobuf::int32 value);
  void add_test_iter(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 29 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval();
  static const int kTestIntervalFieldNumber = 29;
  ::google::protobuf::int32 test_interval() const;
  void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 30 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 30;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  // optional float base_lr = 33;
  bool has_base_lr() const;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 33;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 display = 34;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 34;
  ::google::protobuf::int32 display() const;
  void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 35 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss();
  static const int kAverageLossFieldNumber = 35;
  ::google::protobuf::int32 average_loss() const;
  void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 36;
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 36;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional string lr_policy = 37;
  bool has_lr_policy() const;
  void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 37;
  const ::std::string& lr_policy() const;
  void set_lr_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_lr_policy(::std::string&& value);
  #endif
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  ::std::string* mutable_lr_policy();
  ::std::string* release_lr_policy();
  void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 39;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 39;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 40;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 40;
  float power() const;
  void set_power(float value);

  // optional float momentum = 41;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 41;
  float momentum() const;
  void set_momentum(float value);

  // optional float weight_decay = 42;
  bool has_weight_decay() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 42;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional string regularization_type = 43 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 43;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  #if LANG_CXX11
  void set_regularization_type(::std::string&& value);
  #endif
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional int32 stepsize = 44;
  bool has_stepsize() const;
  void clear_stepsize();
  static const int kStepsizeFieldNumber = 44;
  ::google::protobuf::int32 stepsize() const;
  void set_stepsize(::google::protobuf::int32 value);

  // repeated int32 stepvalue = 45;
  int stepvalue_size() const;
  void clear_stepvalue();
  static const int kStepvalueFieldNumber = 45;
  ::google::protobuf::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::google::protobuf::int32 value);
  void add_stepvalue(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional float clip_gradients = 46 [default = -1];
  bool has_clip_gradients() const;
  void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 46;
  float clip_gradients() const;
  void set_clip_gradients(float value);

  // optional int32 snapshot = 47 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 47;
  ::google::protobuf::int32 snapshot() const;
  void set_snapshot(::google::protobuf::int32 value);

  // optional string snapshot_prefix = 48;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 48;
  const ::std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot_prefix(::std::string&& value);
  #endif
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  ::std::string* mutable_snapshot_prefix();
  ::std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 49 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 49;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  // optional int64 random_seed = 52 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 52;
  ::google::protobuf::int64 random_seed() const;
  void set_random_seed(::google::protobuf::int64 value);

  // required int32 machine_id = 56 [default = 0];
  bool has_machine_id() const;
  void clear_machine_id();
  static const int kMachineIdFieldNumber = 56;
  ::google::protobuf::int32 machine_id() const;
  void set_machine_id(::google::protobuf::int32 value);

  // optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 57;
  ::caffe::SolverProto_SolverType solver_type() const;
  void set_solver_type(::caffe::SolverProto_SolverType value);

  // optional float delta = 59 [default = 1e-08];
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 59;
  float delta() const;
  void set_delta(float value);

  // optional bool debug_info = 60 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 60;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional bool snapshot_after_train = 62 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 62;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  // optional int32 num_data_param_copy = 63 [default = 1];
  bool has_num_data_param_copy() const;
  void clear_num_data_param_copy();
  static const int kNumDataParamCopyFieldNumber = 63;
  ::google::protobuf::int32 num_data_param_copy() const;
  void set_num_data_param_copy(::google::protobuf::int32 value);

  // optional int32 num_model_param_copy = 64 [default = 1];
  bool has_num_model_param_copy() const;
  void clear_num_model_param_copy();
  static const int kNumModelParamCopyFieldNumber = 64;
  ::google::protobuf::int32 num_model_param_copy() const;
  void set_num_model_param_copy(::google::protobuf::int32 value);

  // optional int32 num_batch_per_sync = 65 [default = 1];
  bool has_num_batch_per_sync() const;
  void clear_num_batch_per_sync();
  static const int kNumBatchPerSyncFieldNumber = 65;
  ::google::protobuf::int32 num_batch_per_sync() const;
  void set_num_batch_per_sync(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverProto)
 private:
  void set_has_train_net();
  void clear_has_train_net();
  void set_has_resource();
  void clear_has_resource();
  void set_has_strategy();
  void clear_has_strategy();
  void set_has_train_state();
  void clear_has_train_state();
  void set_has_test_interval();
  void clear_has_test_interval();
  void set_has_test_compute_loss();
  void clear_has_test_compute_loss();
  void set_has_test_initialization();
  void clear_has_test_initialization();
  void set_has_base_lr();
  void clear_has_base_lr();
  void set_has_display();
  void clear_has_display();
  void set_has_average_loss();
  void clear_has_average_loss();
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_lr_policy();
  void clear_has_lr_policy();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_momentum();
  void clear_has_momentum();
  void set_has_weight_decay();
  void clear_has_weight_decay();
  void set_has_regularization_type();
  void clear_has_regularization_type();
  void set_has_stepsize();
  void clear_has_stepsize();
  void set_has_clip_gradients();
  void clear_has_clip_gradients();
  void set_has_snapshot();
  void clear_has_snapshot();
  void set_has_snapshot_prefix();
  void clear_has_snapshot_prefix();
  void set_has_snapshot_diff();
  void clear_has_snapshot_diff();
  void set_has_random_seed();
  void clear_has_random_seed();
  void set_has_machine_id();
  void clear_has_machine_id();
  void set_has_solver_type();
  void clear_has_solver_type();
  void set_has_delta();
  void clear_has_delta();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_snapshot_after_train();
  void clear_has_snapshot_after_train();
  void set_has_num_data_param_copy();
  void clear_has_num_data_param_copy();
  void set_has_num_model_param_copy();
  void clear_has_num_model_param_copy();
  void set_has_num_batch_per_sync();
  void clear_has_num_batch_per_sync();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::internal::ArenaStringPtr train_net_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::protobuf::internal::ArenaStringPtr strategy_;
  ::google::protobuf::internal::ArenaStringPtr lr_policy_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  bool test_compute_loss_;
  bool snapshot_diff_;
  bool debug_info_;
  ::google::protobuf::int32 snapshot_;
  ::google::protobuf::int32 machine_id_;
  int solver_type_;
  ::google::protobuf::int32 num_batch_per_sync_;
  ::google::protobuf::int32 average_loss_;
  bool test_initialization_;
  bool snapshot_after_train_;
  float clip_gradients_;
  float delta_;
  ::google::protobuf::int64 random_seed_;
  ::google::protobuf::int32 num_data_param_copy_;
  ::google::protobuf::int32 num_model_param_copy_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  inline SolverState* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::google::protobuf::int32 iter() const;
  void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  const ::std::string& learned_net() const;
  void set_learned_net(const ::std::string& value);
  #if LANG_CXX11
  void set_learned_net(::std::string&& value);
  #endif
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  ::std::string* mutable_learned_net();
  ::std::string* release_learned_net();
  void set_allocated_learned_net(::std::string* learned_net);

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  ::google::protobuf::int32 current_step() const;
  void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  void set_has_iter();
  void clear_has_iter();
  void set_has_learned_net();
  void clear_has_learned_net();
  void set_has_current_step();
  void clear_has_current_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  inline NetState* New() const PROTOBUF_FINAL { return New(NULL); }

  NetState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_level();
  void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::int32 level_;
  int phase_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParamSpec) */ {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  ::caffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  float lr_mult() const;
  void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  float decay_mult() const;
  void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_share_mode();
  void clear_has_share_mode();
  void set_has_lr_mult();
  void clear_has_lr_mult();
  void set_has_decay_mult();
  void clear_has_decay_mult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class LayerProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerProto) */ {
 public:
  LayerProto();
  virtual ~LayerProto();

  LayerProto(const LayerProto& from);

  inline LayerProto& operator=(const LayerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerProto& default_instance();

  static inline const LayerProto* internal_default_instance() {
    return reinterpret_cast<const LayerProto*>(
               &_LayerProto_default_instance_);
  }

  void Swap(LayerProto* other);

  // implements Message ----------------------------------------------

  inline LayerProto* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerProto& from);
  void MergeFrom(const LayerProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe.ConvolutionProto convolution_proto = 106;
  bool has_convolution_proto() const;
  void clear_convolution_proto();
  static const int kConvolutionProtoFieldNumber = 106;
  const ::caffe::ConvolutionProto& convolution_proto() const;
  ::caffe::ConvolutionProto* mutable_convolution_proto();
  ::caffe::ConvolutionProto* release_convolution_proto();
  void set_allocated_convolution_proto(::caffe::ConvolutionProto* convolution_proto);

  // optional .caffe.LoaderProto loader_proto = 107;
  bool has_loader_proto() const;
  void clear_loader_proto();
  static const int kLoaderProtoFieldNumber = 107;
  const ::caffe::LoaderProto& loader_proto() const;
  ::caffe::LoaderProto* mutable_loader_proto();
  ::caffe::LoaderProto* release_loader_proto();
  void set_allocated_loader_proto(::caffe::LoaderProto* loader_proto);

  // optional .caffe.InnerProductProto innerproduct_proto = 117;
  bool has_innerproduct_proto() const;
  void clear_innerproduct_proto();
  static const int kInnerproductProtoFieldNumber = 117;
  const ::caffe::InnerProductProto& innerproduct_proto() const;
  ::caffe::InnerProductProto* mutable_innerproduct_proto();
  ::caffe::InnerProductProto* release_innerproduct_proto();
  void set_allocated_innerproduct_proto(::caffe::InnerProductProto* innerproduct_proto);

  // optional .caffe.PoolingProto pooling_proto = 121;
  bool has_pooling_proto() const;
  void clear_pooling_proto();
  static const int kPoolingProtoFieldNumber = 121;
  const ::caffe::PoolingProto& pooling_proto() const;
  ::caffe::PoolingProto* mutable_pooling_proto();
  ::caffe::PoolingProto* release_pooling_proto();
  void set_allocated_pooling_proto(::caffe::PoolingProto* pooling_proto);

  // optional .caffe.ReLUProto relu_proto = 123;
  bool has_relu_proto() const;
  void clear_relu_proto();
  static const int kReluProtoFieldNumber = 123;
  const ::caffe::ReLUProto& relu_proto() const;
  ::caffe::ReLUProto* mutable_relu_proto();
  ::caffe::ReLUProto* release_relu_proto();
  void set_allocated_relu_proto(::caffe::ReLUProto* relu_proto);

  // optional .caffe.LRNProto lrn_proto = 118;
  bool has_lrn_proto() const;
  void clear_lrn_proto();
  static const int kLrnProtoFieldNumber = 118;
  const ::caffe::LRNProto& lrn_proto() const;
  ::caffe::LRNProto* mutable_lrn_proto();
  ::caffe::LRNProto* release_lrn_proto();
  void set_allocated_lrn_proto(::caffe::LRNProto* lrn_proto);

  // optional .caffe.SigmoidProto sigmoid_proto = 124;
  bool has_sigmoid_proto() const;
  void clear_sigmoid_proto();
  static const int kSigmoidProtoFieldNumber = 124;
  const ::caffe::SigmoidProto& sigmoid_proto() const;
  ::caffe::SigmoidProto* mutable_sigmoid_proto();
  ::caffe::SigmoidProto* release_sigmoid_proto();
  void set_allocated_sigmoid_proto(::caffe::SigmoidProto* sigmoid_proto);

  // optional .caffe.SoftmaxProto softmax_proto = 125;
  bool has_softmax_proto() const;
  void clear_softmax_proto();
  static const int kSoftmaxProtoFieldNumber = 125;
  const ::caffe::SoftmaxProto& softmax_proto() const;
  ::caffe::SoftmaxProto* mutable_softmax_proto();
  ::caffe::SoftmaxProto* release_softmax_proto();
  void set_allocated_softmax_proto(::caffe::SoftmaxProto* softmax_proto);

  // optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
  bool has_multinomiallogisticloss_proto() const;
  void clear_multinomiallogisticloss_proto();
  static const int kMultinomiallogisticlossProtoFieldNumber = 130;
  const ::caffe::MultinomialLogisticLossProto& multinomiallogisticloss_proto() const;
  ::caffe::MultinomialLogisticLossProto* mutable_multinomiallogisticloss_proto();
  ::caffe::MultinomialLogisticLossProto* release_multinomiallogisticloss_proto();
  void set_allocated_multinomiallogisticloss_proto(::caffe::MultinomialLogisticLossProto* multinomiallogisticloss_proto);

  // optional .caffe.SplitProto split_proto = 131;
  bool has_split_proto() const;
  void clear_split_proto();
  static const int kSplitProtoFieldNumber = 131;
  const ::caffe::SplitProto& split_proto() const;
  ::caffe::SplitProto* mutable_split_proto();
  ::caffe::SplitProto* release_split_proto();
  void set_allocated_split_proto(::caffe::SplitProto* split_proto);

  // optional .caffe.ConcatProto concat_proto = 132;
  bool has_concat_proto() const;
  void clear_concat_proto();
  static const int kConcatProtoFieldNumber = 132;
  const ::caffe::ConcatProto& concat_proto() const;
  ::caffe::ConcatProto* mutable_concat_proto();
  ::caffe::ConcatProto* release_concat_proto();
  void set_allocated_concat_proto(::caffe::ConcatProto* concat_proto);

  // optional .caffe.BatchNormProto batchnorm_proto = 135;
  bool has_batchnorm_proto() const;
  void clear_batchnorm_proto();
  static const int kBatchnormProtoFieldNumber = 135;
  const ::caffe::BatchNormProto& batchnorm_proto() const;
  ::caffe::BatchNormProto* mutable_batchnorm_proto();
  ::caffe::BatchNormProto* release_batchnorm_proto();
  void set_allocated_batchnorm_proto(::caffe::BatchNormProto* batchnorm_proto);

  // optional .caffe.ModelUpdateProto modelupdate_proto = 136;
  bool has_modelupdate_proto() const;
  void clear_modelupdate_proto();
  static const int kModelupdateProtoFieldNumber = 136;
  const ::caffe::ModelUpdateProto& modelupdate_proto() const;
  ::caffe::ModelUpdateProto* mutable_modelupdate_proto();
  ::caffe::ModelUpdateProto* release_modelupdate_proto();
  void set_allocated_modelupdate_proto(::caffe::ModelUpdateProto* modelupdate_proto);

  // optional .caffe.NullUpdateProto nullupdate_proto = 137;
  bool has_nullupdate_proto() const;
  void clear_nullupdate_proto();
  static const int kNullupdateProtoFieldNumber = 137;
  const ::caffe::NullUpdateProto& nullupdate_proto() const;
  ::caffe::NullUpdateProto* mutable_nullupdate_proto();
  ::caffe::NullUpdateProto* release_nullupdate_proto();
  void set_allocated_nullupdate_proto(::caffe::NullUpdateProto* nullupdate_proto);

  // optional .caffe.StoreProto store_proto = 139;
  bool has_store_proto() const;
  void clear_store_proto();
  static const int kStoreProtoFieldNumber = 139;
  const ::caffe::StoreProto& store_proto() const;
  ::caffe::StoreProto* mutable_store_proto();
  ::caffe::StoreProto* release_store_proto();
  void set_allocated_store_proto(::caffe::StoreProto* store_proto);

  // optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
  bool has_loadpartialmodel_proto() const;
  void clear_loadpartialmodel_proto();
  static const int kLoadpartialmodelProtoFieldNumber = 140;
  const ::caffe::LoadPartialModelProto& loadpartialmodel_proto() const;
  ::caffe::LoadPartialModelProto* mutable_loadpartialmodel_proto();
  ::caffe::LoadPartialModelProto* release_loadpartialmodel_proto();
  void set_allocated_loadpartialmodel_proto(::caffe::LoadPartialModelProto* loadpartialmodel_proto);

  // optional .caffe.PlaceholderProto placeholder_proto = 141;
  bool has_placeholder_proto() const;
  void clear_placeholder_proto();
  static const int kPlaceholderProtoFieldNumber = 141;
  const ::caffe::PlaceholderProto& placeholder_proto() const;
  ::caffe::PlaceholderProto* mutable_placeholder_proto();
  ::caffe::PlaceholderProto* release_placeholder_proto();
  void set_allocated_placeholder_proto(::caffe::PlaceholderProto* placeholder_proto);

  // @@protoc_insertion_point(class_scope:caffe.LayerProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_convolution_proto();
  void clear_has_convolution_proto();
  void set_has_loader_proto();
  void clear_has_loader_proto();
  void set_has_innerproduct_proto();
  void clear_has_innerproduct_proto();
  void set_has_pooling_proto();
  void clear_has_pooling_proto();
  void set_has_relu_proto();
  void clear_has_relu_proto();
  void set_has_lrn_proto();
  void clear_has_lrn_proto();
  void set_has_sigmoid_proto();
  void clear_has_sigmoid_proto();
  void set_has_softmax_proto();
  void clear_has_softmax_proto();
  void set_has_multinomiallogisticloss_proto();
  void clear_has_multinomiallogisticloss_proto();
  void set_has_split_proto();
  void clear_has_split_proto();
  void set_has_concat_proto();
  void clear_has_concat_proto();
  void set_has_batchnorm_proto();
  void clear_has_batchnorm_proto();
  void set_has_modelupdate_proto();
  void clear_has_modelupdate_proto();
  void set_has_nullupdate_proto();
  void clear_has_nullupdate_proto();
  void set_has_store_proto();
  void clear_has_store_proto();
  void set_has_loadpartialmodel_proto();
  void clear_has_loadpartialmodel_proto();
  void set_has_placeholder_proto();
  void clear_has_placeholder_proto();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::ConvolutionProto* convolution_proto_;
  ::caffe::LoaderProto* loader_proto_;
  ::caffe::InnerProductProto* innerproduct_proto_;
  ::caffe::PoolingProto* pooling_proto_;
  ::caffe::ReLUProto* relu_proto_;
  ::caffe::LRNProto* lrn_proto_;
  ::caffe::SigmoidProto* sigmoid_proto_;
  ::caffe::SoftmaxProto* softmax_proto_;
  ::caffe::MultinomialLogisticLossProto* multinomiallogisticloss_proto_;
  ::caffe::SplitProto* split_proto_;
  ::caffe::ConcatProto* concat_proto_;
  ::caffe::BatchNormProto* batchnorm_proto_;
  ::caffe::ModelUpdateProto* modelupdate_proto_;
  ::caffe::NullUpdateProto* nullupdate_proto_;
  ::caffe::StoreProto* store_proto_;
  ::caffe::LoadPartialModelProto* loadpartialmodel_proto_;
  ::caffe::PlaceholderProto* placeholder_proto_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class BatchNormProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchNormProto) */ {
 public:
  BatchNormProto();
  virtual ~BatchNormProto();

  BatchNormProto(const BatchNormProto& from);

  inline BatchNormProto& operator=(const BatchNormProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormProto& default_instance();

  static inline const BatchNormProto* internal_default_instance() {
    return reinterpret_cast<const BatchNormProto*>(
               &_BatchNormProto_default_instance_);
  }

  void Swap(BatchNormProto* other);

  // implements Message ----------------------------------------------

  inline BatchNormProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchNormProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchNormProto& from);
  void MergeFrom(const BatchNormProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchNormProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  bool use_global_stats() const;
  void set_use_global_stats(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-05];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormProto)
 private:
  void set_has_use_global_stats();
  void clear_has_use_global_stats();
  void set_has_moving_average_fraction();
  void clear_has_moving_average_fraction();
  void set_has_eps();
  void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool use_global_stats_;
  float moving_average_fraction_;
  float eps_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class MultinomialLogisticLossProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MultinomialLogisticLossProto) */ {
 public:
  MultinomialLogisticLossProto();
  virtual ~MultinomialLogisticLossProto();

  MultinomialLogisticLossProto(const MultinomialLogisticLossProto& from);

  inline MultinomialLogisticLossProto& operator=(const MultinomialLogisticLossProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultinomialLogisticLossProto& default_instance();

  static inline const MultinomialLogisticLossProto* internal_default_instance() {
    return reinterpret_cast<const MultinomialLogisticLossProto*>(
               &_MultinomialLogisticLossProto_default_instance_);
  }

  void Swap(MultinomialLogisticLossProto* other);

  // implements Message ----------------------------------------------

  inline MultinomialLogisticLossProto* New() const PROTOBUF_FINAL { return New(NULL); }

  MultinomialLogisticLossProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultinomialLogisticLossProto& from);
  void MergeFrom(const MultinomialLogisticLossProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultinomialLogisticLossProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data = 120;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 120;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required string label = 121;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 121;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // required string loss = 122;
  bool has_loss() const;
  void clear_loss();
  static const int kLossFieldNumber = 122;
  const ::std::string& loss() const;
  void set_loss(const ::std::string& value);
  #if LANG_CXX11
  void set_loss(::std::string&& value);
  #endif
  void set_loss(const char* value);
  void set_loss(const char* value, size_t size);
  ::std::string* mutable_loss();
  ::std::string* release_loss();
  void set_allocated_loss(::std::string* loss);

  // @@protoc_insertion_point(class_scope:caffe.MultinomialLogisticLossProto)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_label();
  void clear_has_label();
  void set_has_loss();
  void clear_has_loss();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr loss_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class CopyProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CopyProto) */ {
 public:
  CopyProto();
  virtual ~CopyProto();

  CopyProto(const CopyProto& from);

  inline CopyProto& operator=(const CopyProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CopyProto& default_instance();

  static inline const CopyProto* internal_default_instance() {
    return reinterpret_cast<const CopyProto*>(
               &_CopyProto_default_instance_);
  }

  void Swap(CopyProto* other);

  // implements Message ----------------------------------------------

  inline CopyProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CopyProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CopyProto& from);
  void MergeFrom(const CopyProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CopyProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // required .caffe.CopyType copy_type = 2;
  bool has_copy_type() const;
  void clear_copy_type();
  static const int kCopyTypeFieldNumber = 2;
  ::caffe::CopyType copy_type() const;
  void set_copy_type(::caffe::CopyType value);

  // repeated string in = 3;
  int in_size() const;
  void clear_in();
  static const int kInFieldNumber = 3;
  const ::std::string& in(int index) const;
  ::std::string* mutable_in(int index);
  void set_in(int index, const ::std::string& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  ::std::string* add_in();
  void add_in(const ::std::string& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in();

  // repeated string out = 4;
  int out_size() const;
  void clear_out();
  static const int kOutFieldNumber = 4;
  const ::std::string& out(int index) const;
  ::std::string* mutable_out(int index);
  void set_out(int index, const ::std::string& value);
  void set_out(int index, const char* value);
  void set_out(int index, const char* value, size_t size);
  ::std::string* add_out();
  void add_out(const ::std::string& value);
  void add_out(const char* value);
  void add_out(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out();

  // @@protoc_insertion_point(class_scope:caffe.CopyProto)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_copy_type();
  void clear_has_copy_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_;
  ::google::protobuf::uint32 num_;
  int copy_type_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class BoxingProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BoxingProto) */ {
 public:
  BoxingProto();
  virtual ~BoxingProto();

  BoxingProto(const BoxingProto& from);

  inline BoxingProto& operator=(const BoxingProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxingProto& default_instance();

  static inline const BoxingProto* internal_default_instance() {
    return reinterpret_cast<const BoxingProto*>(
               &_BoxingProto_default_instance_);
  }

  void Swap(BoxingProto* other);

  // implements Message ----------------------------------------------

  inline BoxingProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BoxingProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoxingProto& from);
  void MergeFrom(const BoxingProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoxingProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 in_num = 1;
  bool has_in_num() const;
  void clear_in_num();
  static const int kInNumFieldNumber = 1;
  ::google::protobuf::uint32 in_num() const;
  void set_in_num(::google::protobuf::uint32 value);

  // repeated string in = 2;
  int in_size() const;
  void clear_in();
  static const int kInFieldNumber = 2;
  const ::std::string& in(int index) const;
  ::std::string* mutable_in(int index);
  void set_in(int index, const ::std::string& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  ::std::string* add_in();
  void add_in(const ::std::string& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in();

  // required .caffe.BoxingOp in_op = 3 [default = CONCAT];
  bool has_in_op() const;
  void clear_in_op();
  static const int kInOpFieldNumber = 3;
  ::caffe::BoxingOp in_op() const;
  void set_in_op(::caffe::BoxingOp value);

  // required int32 in_axis = 4 [default = 0];
  bool has_in_axis() const;
  void clear_in_axis();
  static const int kInAxisFieldNumber = 4;
  ::google::protobuf::int32 in_axis() const;
  void set_in_axis(::google::protobuf::int32 value);

  // required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
  bool has_backward_in_op() const;
  void clear_backward_in_op();
  static const int kBackwardInOpFieldNumber = 5;
  ::caffe::BoxingOp backward_in_op() const;
  void set_backward_in_op(::caffe::BoxingOp value);

  // required uint32 out_num = 110;
  bool has_out_num() const;
  void clear_out_num();
  static const int kOutNumFieldNumber = 110;
  ::google::protobuf::uint32 out_num() const;
  void set_out_num(::google::protobuf::uint32 value);

  // repeated string out = 12;
  int out_size() const;
  void clear_out();
  static const int kOutFieldNumber = 12;
  const ::std::string& out(int index) const;
  ::std::string* mutable_out(int index);
  void set_out(int index, const ::std::string& value);
  void set_out(int index, const char* value);
  void set_out(int index, const char* value, size_t size);
  ::std::string* add_out();
  void add_out(const ::std::string& value);
  void add_out(const char* value);
  void add_out(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out();

  // required .caffe.BoxingOp out_op = 13 [default = COPY];
  bool has_out_op() const;
  void clear_out_op();
  static const int kOutOpFieldNumber = 13;
  ::caffe::BoxingOp out_op() const;
  void set_out_op(::caffe::BoxingOp value);

  // required int32 out_axis = 14 [default = 0];
  bool has_out_axis() const;
  void clear_out_axis();
  static const int kOutAxisFieldNumber = 14;
  ::google::protobuf::int32 out_axis() const;
  void set_out_axis(::google::protobuf::int32 value);

  // required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
  bool has_backward_out_op() const;
  void clear_backward_out_op();
  static const int kBackwardOutOpFieldNumber = 15;
  ::caffe::BoxingOp backward_out_op() const;
  void set_backward_out_op(::caffe::BoxingOp value);

  // @@protoc_insertion_point(class_scope:caffe.BoxingProto)
 private:
  void set_has_in_num();
  void clear_has_in_num();
  void set_has_in_op();
  void clear_has_in_op();
  void set_has_in_axis();
  void clear_has_in_axis();
  void set_has_backward_in_op();
  void clear_has_backward_in_op();
  void set_has_out_num();
  void clear_has_out_num();
  void set_has_out_op();
  void clear_has_out_op();
  void set_has_out_axis();
  void clear_has_out_axis();
  void set_has_backward_out_op();
  void clear_has_backward_out_op();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_;
  ::google::protobuf::uint32 in_num_;
  int in_op_;
  ::google::protobuf::int32 in_axis_;
  ::google::protobuf::uint32 out_num_;
  ::google::protobuf::int32 out_axis_;
  int backward_out_op_;
  int backward_in_op_;
  int out_op_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class ModelUpdateProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ModelUpdateProto) */ {
 public:
  ModelUpdateProto();
  virtual ~ModelUpdateProto();

  ModelUpdateProto(const ModelUpdateProto& from);

  inline ModelUpdateProto& operator=(const ModelUpdateProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelUpdateProto& default_instance();

  static inline const ModelUpdateProto* internal_default_instance() {
    return reinterpret_cast<const ModelUpdateProto*>(
               &_ModelUpdateProto_default_instance_);
  }

  void Swap(ModelUpdateProto* other);

  // implements Message ----------------------------------------------

  inline ModelUpdateProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelUpdateProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModelUpdateProto& from);
  void MergeFrom(const ModelUpdateProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModelUpdateProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gradient = 1;
  bool has_gradient() const;
  void clear_gradient();
  static const int kGradientFieldNumber = 1;
  const ::std::string& gradient() const;
  void set_gradient(const ::std::string& value);
  #if LANG_CXX11
  void set_gradient(::std::string&& value);
  #endif
  void set_gradient(const char* value);
  void set_gradient(const char* value, size_t size);
  ::std::string* mutable_gradient();
  ::std::string* release_gradient();
  void set_allocated_gradient(::std::string* gradient);

  // required string old_weight = 2;
  bool has_old_weight() const;
  void clear_old_weight();
  static const int kOldWeightFieldNumber = 2;
  const ::std::string& old_weight() const;
  void set_old_weight(const ::std::string& value);
  #if LANG_CXX11
  void set_old_weight(::std::string&& value);
  #endif
  void set_old_weight(const char* value);
  void set_old_weight(const char* value, size_t size);
  ::std::string* mutable_old_weight();
  ::std::string* release_old_weight();
  void set_allocated_old_weight(::std::string* old_weight);

  // required string weight = 3;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  const ::std::string& weight() const;
  void set_weight(const ::std::string& value);
  #if LANG_CXX11
  void set_weight(::std::string&& value);
  #endif
  void set_weight(const char* value);
  void set_weight(const char* value, size_t size);
  ::std::string* mutable_weight();
  ::std::string* release_weight();
  void set_allocated_weight(::std::string* weight);

  // @@protoc_insertion_point(class_scope:caffe.ModelUpdateProto)
 private:
  void set_has_gradient();
  void clear_has_gradient();
  void set_has_old_weight();
  void clear_has_old_weight();
  void set_has_weight();
  void clear_has_weight();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gradient_;
  ::google::protobuf::internal::ArenaStringPtr old_weight_;
  ::google::protobuf::internal::ArenaStringPtr weight_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class NullUpdateProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NullUpdateProto) */ {
 public:
  NullUpdateProto();
  virtual ~NullUpdateProto();

  NullUpdateProto(const NullUpdateProto& from);

  inline NullUpdateProto& operator=(const NullUpdateProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NullUpdateProto& default_instance();

  static inline const NullUpdateProto* internal_default_instance() {
    return reinterpret_cast<const NullUpdateProto*>(
               &_NullUpdateProto_default_instance_);
  }

  void Swap(NullUpdateProto* other);

  // implements Message ----------------------------------------------

  inline NullUpdateProto* New() const PROTOBUF_FINAL { return New(NULL); }

  NullUpdateProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NullUpdateProto& from);
  void MergeFrom(const NullUpdateProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NullUpdateProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string weight = 1;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  const ::std::string& weight() const;
  void set_weight(const ::std::string& value);
  #if LANG_CXX11
  void set_weight(::std::string&& value);
  #endif
  void set_weight(const char* value);
  void set_weight(const char* value, size_t size);
  ::std::string* mutable_weight();
  ::std::string* release_weight();
  void set_allocated_weight(::std::string* weight);

  // @@protoc_insertion_point(class_scope:caffe.NullUpdateProto)
 private:
  void set_has_weight();
  void clear_has_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr weight_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class NetProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetProto) */ {
 public:
  NetProto();
  virtual ~NetProto();

  NetProto(const NetProto& from);

  inline NetProto& operator=(const NetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto& default_instance();

  static inline const NetProto* internal_default_instance() {
    return reinterpret_cast<const NetProto*>(
               &_NetProto_default_instance_);
  }

  void Swap(NetProto* other);

  // implements Message ----------------------------------------------

  inline NetProto* New() const PROTOBUF_FINAL { return New(NULL); }

  NetProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetProto& from);
  void MergeFrom(const NetProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string in_envelope = 1;
  bool has_in_envelope() const;
  void clear_in_envelope();
  static const int kInEnvelopeFieldNumber = 1;
  const ::std::string& in_envelope() const;
  void set_in_envelope(const ::std::string& value);
  #if LANG_CXX11
  void set_in_envelope(::std::string&& value);
  #endif
  void set_in_envelope(const char* value);
  void set_in_envelope(const char* value, size_t size);
  ::std::string* mutable_in_envelope();
  ::std::string* release_in_envelope();
  void set_allocated_in_envelope(::std::string* in_envelope);

  // required uint32 in_num = 2;
  bool has_in_num() const;
  void clear_in_num();
  static const int kInNumFieldNumber = 2;
  ::google::protobuf::uint32 in_num() const;
  void set_in_num(::google::protobuf::uint32 value);

  // repeated string in = 3;
  int in_size() const;
  void clear_in();
  static const int kInFieldNumber = 3;
  const ::std::string& in(int index) const;
  ::std::string* mutable_in(int index);
  void set_in(int index, const ::std::string& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  ::std::string* add_in();
  void add_in(const ::std::string& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in();

  // required string out_envelope = 4;
  bool has_out_envelope() const;
  void clear_out_envelope();
  static const int kOutEnvelopeFieldNumber = 4;
  const ::std::string& out_envelope() const;
  void set_out_envelope(const ::std::string& value);
  #if LANG_CXX11
  void set_out_envelope(::std::string&& value);
  #endif
  void set_out_envelope(const char* value);
  void set_out_envelope(const char* value, size_t size);
  ::std::string* mutable_out_envelope();
  ::std::string* release_out_envelope();
  void set_allocated_out_envelope(::std::string* out_envelope);

  // required uint32 out_num = 5;
  bool has_out_num() const;
  void clear_out_num();
  static const int kOutNumFieldNumber = 5;
  ::google::protobuf::uint32 out_num() const;
  void set_out_num(::google::protobuf::uint32 value);

  // repeated string out = 6;
  int out_size() const;
  void clear_out();
  static const int kOutFieldNumber = 6;
  const ::std::string& out(int index) const;
  ::std::string* mutable_out(int index);
  void set_out(int index, const ::std::string& value);
  void set_out(int index, const char* value);
  void set_out(int index, const char* value, size_t size);
  ::std::string* add_out();
  void add_out(const ::std::string& value);
  void add_out(const char* value);
  void add_out(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out();

  // required bool forward_is_sender = 7 [default = true];
  bool has_forward_is_sender() const;
  void clear_forward_is_sender();
  static const int kForwardIsSenderFieldNumber = 7;
  bool forward_is_sender() const;
  void set_forward_is_sender(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NetProto)
 private:
  void set_has_in_envelope();
  void clear_has_in_envelope();
  void set_has_in_num();
  void clear_has_in_num();
  void set_has_out_envelope();
  void clear_has_out_envelope();
  void set_has_out_num();
  void clear_has_out_num();
  void set_has_forward_is_sender();
  void clear_has_forward_is_sender();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_;
  ::google::protobuf::internal::ArenaStringPtr in_envelope_;
  ::google::protobuf::internal::ArenaStringPtr out_envelope_;
  ::google::protobuf::uint32 in_num_;
  ::google::protobuf::uint32 out_num_;
  bool forward_is_sender_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class SplitProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SplitProto) */ {
 public:
  SplitProto();
  virtual ~SplitProto();

  SplitProto(const SplitProto& from);

  inline SplitProto& operator=(const SplitProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitProto& default_instance();

  static inline const SplitProto* internal_default_instance() {
    return reinterpret_cast<const SplitProto*>(
               &_SplitProto_default_instance_);
  }

  void Swap(SplitProto* other);

  // implements Message ----------------------------------------------

  inline SplitProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SplitProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SplitProto& from);
  void MergeFrom(const SplitProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SplitProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 out_num = 1;
  bool has_out_num() const;
  void clear_out_num();
  static const int kOutNumFieldNumber = 1;
  ::google::protobuf::uint32 out_num() const;
  void set_out_num(::google::protobuf::uint32 value);

  // required string in = 2;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 2;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // repeated string out = 3;
  int out_size() const;
  void clear_out();
  static const int kOutFieldNumber = 3;
  const ::std::string& out(int index) const;
  ::std::string* mutable_out(int index);
  void set_out(int index, const ::std::string& value);
  void set_out(int index, const char* value);
  void set_out(int index, const char* value, size_t size);
  ::std::string* add_out();
  void add_out(const ::std::string& value);
  void add_out(const char* value);
  void add_out(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out();

  // @@protoc_insertion_point(class_scope:caffe.SplitProto)
 private:
  void set_has_out_num();
  void clear_has_out_num();
  void set_has_in();
  void clear_has_in();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::uint32 out_num_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class ConcatProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatProto) */ {
 public:
  ConcatProto();
  virtual ~ConcatProto();

  ConcatProto(const ConcatProto& from);

  inline ConcatProto& operator=(const ConcatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatProto& default_instance();

  static inline const ConcatProto* internal_default_instance() {
    return reinterpret_cast<const ConcatProto*>(
               &_ConcatProto_default_instance_);
  }

  void Swap(ConcatProto* other);

  // implements Message ----------------------------------------------

  inline ConcatProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ConcatProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConcatProto& from);
  void MergeFrom(const ConcatProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConcatProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 in_num = 1;
  bool has_in_num() const;
  void clear_in_num();
  static const int kInNumFieldNumber = 1;
  ::google::protobuf::uint32 in_num() const;
  void set_in_num(::google::protobuf::uint32 value);

  // repeated string in = 2;
  int in_size() const;
  void clear_in();
  static const int kInFieldNumber = 2;
  const ::std::string& in(int index) const;
  ::std::string* mutable_in(int index);
  void set_in(int index, const ::std::string& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  ::std::string* add_in();
  void add_in(const ::std::string& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in();

  // required string out = 3;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 3;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // required int32 axis = 4 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 4;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatProto)
 private:
  void set_has_in_num();
  void clear_has_in_num();
  void set_has_out();
  void clear_has_out();
  void set_has_axis();
  void clear_has_axis();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  ::google::protobuf::uint32 in_num_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class ConvolutionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionProto) */ {
 public:
  ConvolutionProto();
  virtual ~ConvolutionProto();

  ConvolutionProto(const ConvolutionProto& from);

  inline ConvolutionProto& operator=(const ConvolutionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionProto& default_instance();

  static inline const ConvolutionProto* internal_default_instance() {
    return reinterpret_cast<const ConvolutionProto*>(
               &_ConvolutionProto_default_instance_);
  }

  void Swap(ConvolutionProto* other);

  // implements Message ----------------------------------------------

  inline ConvolutionProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionProto& from);
  void MergeFrom(const ConvolutionProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConvolutionProto_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionProto_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionProto_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 pad = 3 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 4;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 6 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::ConvolutionProto_Engine engine() const;
  void set_engine(::caffe::ConvolutionProto_Engine value);

  // repeated .caffe.ParamSpec param = 100;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 100;
  const ::caffe::ParamSpec& param(int index) const;
  ::caffe::ParamSpec* mutable_param(int index);
  ::caffe::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionProto)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_group();
  void clear_has_group();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_engine();
  void clear_has_engine();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  ::google::protobuf::uint32 stride_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class LoaderProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LoaderProto) */ {
 public:
  LoaderProto();
  virtual ~LoaderProto();

  LoaderProto(const LoaderProto& from);

  inline LoaderProto& operator=(const LoaderProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoaderProto& default_instance();

  static inline const LoaderProto* internal_default_instance() {
    return reinterpret_cast<const LoaderProto*>(
               &_LoaderProto_default_instance_);
  }

  void Swap(LoaderProto* other);

  // implements Message ----------------------------------------------

  inline LoaderProto* New() const PROTOBUF_FINAL { return New(NULL); }

  LoaderProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoaderProto& from);
  void MergeFrom(const LoaderProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoaderProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 piece_size = 4;
  bool has_piece_size() const;
  void clear_piece_size();
  static const int kPieceSizeFieldNumber = 4;
  ::google::protobuf::uint32 piece_size() const;
  void set_piece_size(::google::protobuf::uint32 value);

  // required string data = 120;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 120;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required string label = 121;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 121;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // required uint32 channel = 122;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 122;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // required uint32 height = 123;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 123;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // required uint32 width = 124;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 124;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.LoaderProto)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_piece_size();
  void clear_has_piece_size();
  void set_has_data();
  void clear_has_data();
  void set_has_label();
  void clear_has_label();
  void set_has_channel();
  void clear_has_channel();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint32 piece_size_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class InnerProductProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductProto) */ {
 public:
  InnerProductProto();
  virtual ~InnerProductProto();

  InnerProductProto(const InnerProductProto& from);

  inline InnerProductProto& operator=(const InnerProductProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductProto& default_instance();

  static inline const InnerProductProto* internal_default_instance() {
    return reinterpret_cast<const InnerProductProto*>(
               &_InnerProductProto_default_instance_);
  }

  void Swap(InnerProductProto* other);

  // implements Message ----------------------------------------------

  inline InnerProductProto* New() const PROTOBUF_FINAL { return New(NULL); }

  InnerProductProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InnerProductProto& from);
  void MergeFrom(const InnerProductProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InnerProductProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // repeated .caffe.ParamSpec param = 100;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 100;
  const ::caffe::ParamSpec& param(int index) const;
  ::caffe::ParamSpec* mutable_param(int index);
  ::caffe::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductProto)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_axis();
  void clear_has_axis();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class PoolingProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingProto) */ {
 public:
  PoolingProto();
  virtual ~PoolingProto();

  PoolingProto(const PoolingProto& from);

  inline PoolingProto& operator=(const PoolingProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingProto& default_instance();

  static inline const PoolingProto* internal_default_instance() {
    return reinterpret_cast<const PoolingProto*>(
               &_PoolingProto_default_instance_);
  }

  void Swap(PoolingProto* other);

  // implements Message ----------------------------------------------

  inline PoolingProto* New() const PROTOBUF_FINAL { return New(NULL); }

  PoolingProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoolingProto& from);
  void MergeFrom(const PoolingProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoolingProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PoolingProto_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingProto_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingProto_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingProto_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingProto_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingProto_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingProto_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingProto_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingProto_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingProto_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingProto_PoolMethod_Parse(name, value);
  }

  typedef PoolingProto_Engine Engine;
  static const Engine DEFAULT =
    PoolingProto_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingProto_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingProto_PoolMethod pool() const;
  void set_pool(::caffe::PoolingProto_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingProto_Engine engine() const;
  void set_engine(::caffe::PoolingProto_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.PoolingProto)
 private:
  void set_has_pool();
  void clear_has_pool();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_engine();
  void clear_has_engine();
  void set_has_global_pooling();
  void clear_has_global_pooling();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  ::google::protobuf::uint32 stride_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class ReLUProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUProto) */ {
 public:
  ReLUProto();
  virtual ~ReLUProto();

  ReLUProto(const ReLUProto& from);

  inline ReLUProto& operator=(const ReLUProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUProto& default_instance();

  static inline const ReLUProto* internal_default_instance() {
    return reinterpret_cast<const ReLUProto*>(
               &_ReLUProto_default_instance_);
  }

  void Swap(ReLUProto* other);

  // implements Message ----------------------------------------------

  inline ReLUProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ReLUProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReLUProto& from);
  void MergeFrom(const ReLUProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReLUProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReLUProto_Engine Engine;
  static const Engine DEFAULT =
    ReLUProto_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUProto_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUProto_Engine engine() const;
  void set_engine(::caffe::ReLUProto_Engine value);

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.ReLUProto)
 private:
  void set_has_negative_slope();
  void clear_has_negative_slope();
  void set_has_engine();
  void clear_has_engine();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  float negative_slope_;
  int engine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class LRNProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LRNProto) */ {
 public:
  LRNProto();
  virtual ~LRNProto();

  LRNProto(const LRNProto& from);

  inline LRNProto& operator=(const LRNProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNProto& default_instance();

  static inline const LRNProto* internal_default_instance() {
    return reinterpret_cast<const LRNProto*>(
               &_LRNProto_default_instance_);
  }

  void Swap(LRNProto* other);

  // implements Message ----------------------------------------------

  inline LRNProto* New() const PROTOBUF_FINAL { return New(NULL); }

  LRNProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LRNProto& from);
  void MergeFrom(const LRNProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LRNProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LRNProto_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS =
    LRNProto_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL =
    LRNProto_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNProto_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNProto_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNProto_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNProto_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNProto_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNProto_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNProto_NormRegion_Parse(name, value);
  }

  typedef LRNProto_Engine Engine;
  static const Engine DEFAULT =
    LRNProto_Engine_DEFAULT;
  static const Engine CAFFE =
    LRNProto_Engine_CAFFE;
  static const Engine CUDNN =
    LRNProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 3;
  float beta() const;
  void set_beta(float value);

  // optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  ::caffe::LRNProto_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNProto_NormRegion value);

  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 5;
  float k() const;
  void set_k(float value);

  // optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::LRNProto_Engine engine() const;
  void set_engine(::caffe::LRNProto_Engine value);

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.LRNProto)
 private:
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_norm_region();
  void clear_has_norm_region();
  void set_has_k();
  void clear_has_k();
  void set_has_engine();
  void clear_has_engine();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  int norm_region_;
  int engine_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class SigmoidProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidProto) */ {
 public:
  SigmoidProto();
  virtual ~SigmoidProto();

  SigmoidProto(const SigmoidProto& from);

  inline SigmoidProto& operator=(const SigmoidProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidProto& default_instance();

  static inline const SigmoidProto* internal_default_instance() {
    return reinterpret_cast<const SigmoidProto*>(
               &_SigmoidProto_default_instance_);
  }

  void Swap(SigmoidProto* other);

  // implements Message ----------------------------------------------

  inline SigmoidProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SigmoidProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SigmoidProto& from);
  void MergeFrom(const SigmoidProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SigmoidProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SigmoidProto_Engine Engine;
  static const Engine DEFAULT =
    SigmoidProto_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidProto_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidProto_Engine engine() const;
  void set_engine(::caffe::SigmoidProto_Engine value);

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidProto)
 private:
  void set_has_engine();
  void clear_has_engine();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  int engine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class SoftmaxProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxProto) */ {
 public:
  SoftmaxProto();
  virtual ~SoftmaxProto();

  SoftmaxProto(const SoftmaxProto& from);

  inline SoftmaxProto& operator=(const SoftmaxProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxProto& default_instance();

  static inline const SoftmaxProto* internal_default_instance() {
    return reinterpret_cast<const SoftmaxProto*>(
               &_SoftmaxProto_default_instance_);
  }

  void Swap(SoftmaxProto* other);

  // implements Message ----------------------------------------------

  inline SoftmaxProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftmaxProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftmaxProto& from);
  void MergeFrom(const SoftmaxProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftmaxProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoftmaxProto_Engine Engine;
  static const Engine DEFAULT =
    SoftmaxProto_Engine_DEFAULT;
  static const Engine CAFFE =
    SoftmaxProto_Engine_CAFFE;
  static const Engine CUDNN =
    SoftmaxProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SoftmaxProto_Engine engine() const;
  void set_engine(::caffe::SoftmaxProto_Engine value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxProto)
 private:
  void set_has_engine();
  void clear_has_engine();
  void set_has_axis();
  void clear_has_axis();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class StoreProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.StoreProto) */ {
 public:
  StoreProto();
  virtual ~StoreProto();

  StoreProto(const StoreProto& from);

  inline StoreProto& operator=(const StoreProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreProto& default_instance();

  static inline const StoreProto* internal_default_instance() {
    return reinterpret_cast<const StoreProto*>(
               &_StoreProto_default_instance_);
  }

  void Swap(StoreProto* other);

  // implements Message ----------------------------------------------

  inline StoreProto* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreProto& from);
  void MergeFrom(const StoreProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StoreProto_Engine Engine;
  static const Engine DEFAULT =
    StoreProto_Engine_DEFAULT;
  static const Engine CAFFE =
    StoreProto_Engine_CAFFE;
  static const Engine CUDNN =
    StoreProto_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return StoreProto_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    StoreProto_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    StoreProto_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    StoreProto_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return StoreProto_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return StoreProto_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return StoreProto_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::StoreProto_Engine engine() const;
  void set_engine(::caffe::StoreProto_Engine value);

  // required string in = 120;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 120;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 121;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 121;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // required bool stop = 122 [default = false];
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 122;
  bool stop() const;
  void set_stop(bool value);

  // repeated string store_layer_names = 124;
  int store_layer_names_size() const;
  void clear_store_layer_names();
  static const int kStoreLayerNamesFieldNumber = 124;
  const ::std::string& store_layer_names(int index) const;
  ::std::string* mutable_store_layer_names(int index);
  void set_store_layer_names(int index, const ::std::string& value);
  void set_store_layer_names(int index, const char* value);
  void set_store_layer_names(int index, const char* value, size_t size);
  ::std::string* add_store_layer_names();
  void add_store_layer_names(const ::std::string& value);
  void add_store_layer_names(const char* value);
  void add_store_layer_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& store_layer_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_store_layer_names();

  // repeated int64 store_layer_shapes = 125;
  int store_layer_shapes_size() const;
  void clear_store_layer_shapes();
  static const int kStoreLayerShapesFieldNumber = 125;
  ::google::protobuf::int64 store_layer_shapes(int index) const;
  void set_store_layer_shapes(int index, ::google::protobuf::int64 value);
  void add_store_layer_shapes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      store_layer_shapes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_store_layer_shapes();

  // repeated int64 layer_seek_pos = 126;
  int layer_seek_pos_size() const;
  void clear_layer_seek_pos();
  static const int kLayerSeekPosFieldNumber = 126;
  ::google::protobuf::int64 layer_seek_pos(int index) const;
  void set_layer_seek_pos(int index, ::google::protobuf::int64 value);
  void add_layer_seek_pos(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      layer_seek_pos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_layer_seek_pos();

  // @@protoc_insertion_point(class_scope:caffe.StoreProto)
 private:
  void set_has_engine();
  void clear_has_engine();
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();
  void set_has_stop();
  void clear_has_stop();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> store_layer_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > store_layer_shapes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > layer_seek_pos_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  int engine_;
  bool stop_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class PlaceholderProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PlaceholderProto) */ {
 public:
  PlaceholderProto();
  virtual ~PlaceholderProto();

  PlaceholderProto(const PlaceholderProto& from);

  inline PlaceholderProto& operator=(const PlaceholderProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceholderProto& default_instance();

  static inline const PlaceholderProto* internal_default_instance() {
    return reinterpret_cast<const PlaceholderProto*>(
               &_PlaceholderProto_default_instance_);
  }

  void Swap(PlaceholderProto* other);

  // implements Message ----------------------------------------------

  inline PlaceholderProto* New() const PROTOBUF_FINAL { return New(NULL); }

  PlaceholderProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlaceholderProto& from);
  void MergeFrom(const PlaceholderProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlaceholderProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string in = 100;
  bool has_in() const;
  void clear_in();
  static const int kInFieldNumber = 100;
  const ::std::string& in() const;
  void set_in(const ::std::string& value);
  #if LANG_CXX11
  void set_in(::std::string&& value);
  #endif
  void set_in(const char* value);
  void set_in(const char* value, size_t size);
  ::std::string* mutable_in();
  ::std::string* release_in();
  void set_allocated_in(::std::string* in);

  // required string out = 101;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 101;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // @@protoc_insertion_point(class_scope:caffe.PlaceholderProto)
 private:
  void set_has_in();
  void clear_has_in();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr in_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// -------------------------------------------------------------------

class LoadPartialModelProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LoadPartialModelProto) */ {
 public:
  LoadPartialModelProto();
  virtual ~LoadPartialModelProto();

  LoadPartialModelProto(const LoadPartialModelProto& from);

  inline LoadPartialModelProto& operator=(const LoadPartialModelProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadPartialModelProto& default_instance();

  static inline const LoadPartialModelProto* internal_default_instance() {
    return reinterpret_cast<const LoadPartialModelProto*>(
               &_LoadPartialModelProto_default_instance_);
  }

  void Swap(LoadPartialModelProto* other);

  // implements Message ----------------------------------------------

  inline LoadPartialModelProto* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadPartialModelProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoadPartialModelProto& from);
  void MergeFrom(const LoadPartialModelProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadPartialModelProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string out = 1;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 1;
  const ::std::string& out() const;
  void set_out(const ::std::string& value);
  #if LANG_CXX11
  void set_out(::std::string&& value);
  #endif
  void set_out(const char* value);
  void set_out(const char* value, size_t size);
  ::std::string* mutable_out();
  ::std::string* release_out();
  void set_allocated_out(::std::string* out);

  // repeated string load_layer_names = 124;
  int load_layer_names_size() const;
  void clear_load_layer_names();
  static const int kLoadLayerNamesFieldNumber = 124;
  const ::std::string& load_layer_names(int index) const;
  ::std::string* mutable_load_layer_names(int index);
  void set_load_layer_names(int index, const ::std::string& value);
  void set_load_layer_names(int index, const char* value);
  void set_load_layer_names(int index, const char* value, size_t size);
  ::std::string* add_load_layer_names();
  void add_load_layer_names(const ::std::string& value);
  void add_load_layer_names(const char* value);
  void add_load_layer_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& load_layer_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_load_layer_names();

  // repeated int64 load_layer_shapes = 125;
  int load_layer_shapes_size() const;
  void clear_load_layer_shapes();
  static const int kLoadLayerShapesFieldNumber = 125;
  ::google::protobuf::int64 load_layer_shapes(int index) const;
  void set_load_layer_shapes(int index, ::google::protobuf::int64 value);
  void add_load_layer_shapes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      load_layer_shapes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_load_layer_shapes();

  // @@protoc_insertion_point(class_scope:caffe.LoadPartialModelProto)
 private:
  void set_has_out();
  void clear_has_out();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> load_layer_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > load_layer_shapes_;
  ::google::protobuf::internal::ArenaStringPtr out_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// required int64 shape = 1;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_shape() {
  shape_ = GOOGLE_LONGLONG(0);
  clear_has_shape();
}
inline ::google::protobuf::int64 BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_;
}
inline void BlobProto::set_shape(::google::protobuf::int64 value) {
  set_has_shape();
  shape_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.shape)
}

// optional .caffe.BlobProto.DataType data_type = 2 [default = FLOAT];
inline bool BlobProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::caffe::BlobProto_DataType BlobProto::data_type() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data_type)
  return static_cast< ::caffe::BlobProto_DataType >(data_type_);
}
inline void BlobProto::set_data_type(::caffe::BlobProto_DataType value) {
  assert(::caffe::BlobProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data_type)
}

// repeated float float_data = 3 [packed = true];
inline int BlobProto::float_data_size() const {
  return float_data_.size();
}
inline void BlobProto::clear_float_data() {
  float_data_.Clear();
}
inline float BlobProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.float_data)
  return float_data_.Get(index);
}
inline void BlobProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.float_data)
}
inline void BlobProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 4 [packed = true];
inline int BlobProto::int32_data_size() const {
  return int32_data_.size();
}
inline void BlobProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 BlobProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.int32_data)
  return int32_data_.Get(index);
}
inline void BlobProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.int32_data)
}
inline void BlobProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BlobProto::int32_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BlobProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.int32_data)
  return &int32_data_;
}

// optional bytes byte_data = 5;
inline bool BlobProto::has_byte_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_byte_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_byte_data() {
  byte_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_byte_data();
}
inline const ::std::string& BlobProto::byte_data() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.byte_data)
  return byte_data_.GetNoArena();
}
inline void BlobProto::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.byte_data)
}
#if LANG_CXX11
inline void BlobProto::set_byte_data(::std::string&& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BlobProto.byte_data)
}
#endif
inline void BlobProto::set_byte_data(const char* value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.byte_data)
}
inline void BlobProto::set_byte_data(const void* value, size_t size) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.byte_data)
}
inline ::std::string* BlobProto::mutable_byte_data() {
  set_has_byte_data();
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.byte_data)
  return byte_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobProto::release_byte_data() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.byte_data)
  clear_has_byte_data();
  return byte_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data != NULL) {
    set_has_byte_data();
  } else {
    clear_has_byte_data();
  }
  byte_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_data);
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.byte_data)
}

// repeated bytes string_data = 6;
inline int BlobProto::string_data_size() const {
  return string_data_.size();
}
inline void BlobProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& BlobProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* BlobProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.string_data)
  return string_data_.Mutable(index);
}
inline void BlobProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.BlobProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void BlobProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.string_data)
}
inline void BlobProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.string_data)
}
inline ::std::string* BlobProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:caffe.BlobProto.string_data)
  return string_data_.Add();
}
inline void BlobProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.string_data)
}
inline void BlobProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.BlobProto.string_data)
}
inline void BlobProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.BlobProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlobProto::string_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlobProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.string_data)
  return &string_data_;
}

// repeated double double_data = 9 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated int64 int64_data = 10 [packed = true];
inline int BlobProto::int64_data_size() const {
  return int64_data_.size();
}
inline void BlobProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::google::protobuf::int64 BlobProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.int64_data)
  return int64_data_.Get(index);
}
inline void BlobProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.int64_data)
}
inline void BlobProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.int64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobProto::int64_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.int64_data)
  return int64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.int64_data)
  return &int64_data_;
}

// optional string name = 7;
inline bool BlobProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BlobProto::name() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.name)
  return name_.GetNoArena();
}
inline void BlobProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.name)
}
#if LANG_CXX11
inline void BlobProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BlobProto.name)
}
#endif
inline void BlobProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.name)
}
inline void BlobProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.name)
}
inline ::std::string* BlobProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.name)
}

// -------------------------------------------------------------------

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&FillerParameter::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
inline void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &FillerParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&FillerParameter::_default_type_.get());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&FillerParameter::_default_type_.get());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
inline void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_
                         : *::caffe::NetState::internal_default_instance();
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline ::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerProto layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerProto& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
inline ::caffe::LayerProto* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::caffe::LayerProto* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerProto >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerProto >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// -------------------------------------------------------------------

// DeviceSet

// repeated int32 device_id = 1;
inline int DeviceSet::device_id_size() const {
  return device_id_.size();
}
inline void DeviceSet::clear_device_id() {
  device_id_.Clear();
}
inline ::google::protobuf::int32 DeviceSet::device_id(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DeviceSet.device_id)
  return device_id_.Get(index);
}
inline void DeviceSet::set_device_id(int index, ::google::protobuf::int32 value) {
  device_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DeviceSet.device_id)
}
inline void DeviceSet::add_device_id(::google::protobuf::int32 value) {
  device_id_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DeviceSet.device_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeviceSet::device_id() const {
  // @@protoc_insertion_point(field_list:caffe.DeviceSet.device_id)
  return device_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeviceSet::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DeviceSet.device_id)
  return &device_id_;
}

// -------------------------------------------------------------------

// Machine

// required string name = 1;
inline bool Machine::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Machine::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Machine::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Machine::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Machine::name() const {
  // @@protoc_insertion_point(field_get:caffe.Machine.name)
  return name_.GetNoArena();
}
inline void Machine::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Machine.name)
}
#if LANG_CXX11
inline void Machine::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Machine.name)
}
#endif
inline void Machine::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Machine.name)
}
inline void Machine::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Machine.name)
}
inline ::std::string* Machine::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.Machine.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Machine::release_name() {
  // @@protoc_insertion_point(field_release:caffe.Machine.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.Machine.name)
}

// required string port = 2;
inline bool Machine::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Machine::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Machine::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Machine::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_port();
}
inline const ::std::string& Machine::port() const {
  // @@protoc_insertion_point(field_get:caffe.Machine.port)
  return port_.GetNoArena();
}
inline void Machine::set_port(const ::std::string& value) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Machine.port)
}
#if LANG_CXX11
inline void Machine::set_port(::std::string&& value) {
  set_has_port();
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Machine.port)
}
#endif
inline void Machine::set_port(const char* value) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Machine.port)
}
inline void Machine::set_port(const char* value, size_t size) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Machine.port)
}
inline ::std::string* Machine::mutable_port() {
  set_has_port();
  // @@protoc_insertion_point(field_mutable:caffe.Machine.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Machine::release_port() {
  // @@protoc_insertion_point(field_release:caffe.Machine.port)
  clear_has_port();
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    set_has_port();
  } else {
    clear_has_port();
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:caffe.Machine.port)
}

// optional .caffe.DeviceSet device_set = 3;
inline bool Machine::has_device_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Machine::set_has_device_set() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Machine::clear_has_device_set() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Machine::clear_device_set() {
  if (device_set_ != NULL) device_set_->::caffe::DeviceSet::Clear();
  clear_has_device_set();
}
inline const ::caffe::DeviceSet& Machine::device_set() const {
  // @@protoc_insertion_point(field_get:caffe.Machine.device_set)
  return device_set_ != NULL ? *device_set_
                         : *::caffe::DeviceSet::internal_default_instance();
}
inline ::caffe::DeviceSet* Machine::mutable_device_set() {
  set_has_device_set();
  if (device_set_ == NULL) {
    device_set_ = new ::caffe::DeviceSet;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Machine.device_set)
  return device_set_;
}
inline ::caffe::DeviceSet* Machine::release_device_set() {
  // @@protoc_insertion_point(field_release:caffe.Machine.device_set)
  clear_has_device_set();
  ::caffe::DeviceSet* temp = device_set_;
  device_set_ = NULL;
  return temp;
}
inline void Machine::set_allocated_device_set(::caffe::DeviceSet* device_set) {
  delete device_set_;
  device_set_ = device_set;
  if (device_set) {
    set_has_device_set();
  } else {
    clear_has_device_set();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Machine.device_set)
}

// -------------------------------------------------------------------

// Resource

// repeated .caffe.Machine machine = 1;
inline int Resource::machine_size() const {
  return machine_.size();
}
inline void Resource::clear_machine() {
  machine_.Clear();
}
inline const ::caffe::Machine& Resource::machine(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Resource.machine)
  return machine_.Get(index);
}
inline ::caffe::Machine* Resource::mutable_machine(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.Resource.machine)
  return machine_.Mutable(index);
}
inline ::caffe::Machine* Resource::add_machine() {
  // @@protoc_insertion_point(field_add:caffe.Resource.machine)
  return machine_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Machine >*
Resource::mutable_machine() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Resource.machine)
  return &machine_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Machine >&
Resource::machine() const {
  // @@protoc_insertion_point(field_list:caffe.Resource.machine)
  return machine_;
}

// -------------------------------------------------------------------

// LayerSet

// repeated string name = 1;
inline int LayerSet::name_size() const {
  return name_.size();
}
inline void LayerSet::clear_name() {
  name_.Clear();
}
inline const ::std::string& LayerSet::name(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerSet.name)
  return name_.Get(index);
}
inline ::std::string* LayerSet::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerSet.name)
  return name_.Mutable(index);
}
inline void LayerSet::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerSet.name)
  name_.Mutable(index)->assign(value);
}
inline void LayerSet::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerSet.name)
}
inline void LayerSet::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerSet.name)
}
inline ::std::string* LayerSet::add_name() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerSet.name)
  return name_.Add();
}
inline void LayerSet::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerSet.name)
}
inline void LayerSet::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerSet.name)
}
inline void LayerSet::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerSet.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerSet::name() const {
  // @@protoc_insertion_point(field_list:caffe.LayerSet.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerSet.name)
  return &name_;
}

// -------------------------------------------------------------------

// DeviceGroup

// required int32 begin = 1;
inline bool DeviceGroup::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceGroup::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceGroup::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceGroup::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::google::protobuf::int32 DeviceGroup::begin() const {
  // @@protoc_insertion_point(field_get:caffe.DeviceGroup.begin)
  return begin_;
}
inline void DeviceGroup::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeviceGroup.begin)
}

// required int32 end = 2;
inline bool DeviceGroup::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceGroup::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceGroup::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceGroup::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 DeviceGroup::end() const {
  // @@protoc_insertion_point(field_get:caffe.DeviceGroup.end)
  return end_;
}
inline void DeviceGroup::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:caffe.DeviceGroup.end)
}

// -------------------------------------------------------------------

// MachineGroup

// required int32 begin = 1;
inline bool MachineGroup::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineGroup::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineGroup::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineGroup::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::google::protobuf::int32 MachineGroup::begin() const {
  // @@protoc_insertion_point(field_get:caffe.MachineGroup.begin)
  return begin_;
}
inline void MachineGroup::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:caffe.MachineGroup.begin)
}

// required int32 end = 2;
inline bool MachineGroup::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineGroup::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineGroup::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineGroup::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 MachineGroup::end() const {
  // @@protoc_insertion_point(field_get:caffe.MachineGroup.end)
  return end_;
}
inline void MachineGroup::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:caffe.MachineGroup.end)
}

// -------------------------------------------------------------------

// PlacementGroup

// required string name = 1;
inline bool PlacementGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacementGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlacementGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlacementGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlacementGroup::name() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.name)
  return name_.GetNoArena();
}
inline void PlacementGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PlacementGroup.name)
}
#if LANG_CXX11
inline void PlacementGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PlacementGroup.name)
}
#endif
inline void PlacementGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PlacementGroup.name)
}
inline void PlacementGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PlacementGroup.name)
}
inline ::std::string* PlacementGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlacementGroup::release_name() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacementGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.name)
}

// required .caffe.LayerSet layer_set = 2;
inline bool PlacementGroup::has_layer_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlacementGroup::set_has_layer_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlacementGroup::clear_has_layer_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlacementGroup::clear_layer_set() {
  if (layer_set_ != NULL) layer_set_->::caffe::LayerSet::Clear();
  clear_has_layer_set();
}
inline const ::caffe::LayerSet& PlacementGroup::layer_set() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.layer_set)
  return layer_set_ != NULL ? *layer_set_
                         : *::caffe::LayerSet::internal_default_instance();
}
inline ::caffe::LayerSet* PlacementGroup::mutable_layer_set() {
  set_has_layer_set();
  if (layer_set_ == NULL) {
    layer_set_ = new ::caffe::LayerSet;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.layer_set)
  return layer_set_;
}
inline ::caffe::LayerSet* PlacementGroup::release_layer_set() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.layer_set)
  clear_has_layer_set();
  ::caffe::LayerSet* temp = layer_set_;
  layer_set_ = NULL;
  return temp;
}
inline void PlacementGroup::set_allocated_layer_set(::caffe::LayerSet* layer_set) {
  delete layer_set_;
  layer_set_ = layer_set;
  if (layer_set) {
    set_has_layer_set();
  } else {
    clear_has_layer_set();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.layer_set)
}

// optional .caffe.DeviceGroup device_group = 3;
inline bool PlacementGroup::has_device_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlacementGroup::set_has_device_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlacementGroup::clear_has_device_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlacementGroup::clear_device_group() {
  if (device_group_ != NULL) device_group_->::caffe::DeviceGroup::Clear();
  clear_has_device_group();
}
inline const ::caffe::DeviceGroup& PlacementGroup::device_group() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.device_group)
  return device_group_ != NULL ? *device_group_
                         : *::caffe::DeviceGroup::internal_default_instance();
}
inline ::caffe::DeviceGroup* PlacementGroup::mutable_device_group() {
  set_has_device_group();
  if (device_group_ == NULL) {
    device_group_ = new ::caffe::DeviceGroup;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.device_group)
  return device_group_;
}
inline ::caffe::DeviceGroup* PlacementGroup::release_device_group() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.device_group)
  clear_has_device_group();
  ::caffe::DeviceGroup* temp = device_group_;
  device_group_ = NULL;
  return temp;
}
inline void PlacementGroup::set_allocated_device_group(::caffe::DeviceGroup* device_group) {
  delete device_group_;
  device_group_ = device_group;
  if (device_group) {
    set_has_device_group();
  } else {
    clear_has_device_group();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.device_group)
}

// optional .caffe.MachineGroup machine_group = 4;
inline bool PlacementGroup::has_machine_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlacementGroup::set_has_machine_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlacementGroup::clear_has_machine_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlacementGroup::clear_machine_group() {
  if (machine_group_ != NULL) machine_group_->::caffe::MachineGroup::Clear();
  clear_has_machine_group();
}
inline const ::caffe::MachineGroup& PlacementGroup::machine_group() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.machine_group)
  return machine_group_ != NULL ? *machine_group_
                         : *::caffe::MachineGroup::internal_default_instance();
}
inline ::caffe::MachineGroup* PlacementGroup::mutable_machine_group() {
  set_has_machine_group();
  if (machine_group_ == NULL) {
    machine_group_ = new ::caffe::MachineGroup;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PlacementGroup.machine_group)
  return machine_group_;
}
inline ::caffe::MachineGroup* PlacementGroup::release_machine_group() {
  // @@protoc_insertion_point(field_release:caffe.PlacementGroup.machine_group)
  clear_has_machine_group();
  ::caffe::MachineGroup* temp = machine_group_;
  machine_group_ = NULL;
  return temp;
}
inline void PlacementGroup::set_allocated_machine_group(::caffe::MachineGroup* machine_group) {
  delete machine_group_;
  machine_group_ = machine_group;
  if (machine_group) {
    set_has_machine_group();
  } else {
    clear_has_machine_group();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PlacementGroup.machine_group)
}

// optional .caffe.ParallelPolicy parallel_policy = 5 [default = kUnknownParallel];
inline bool PlacementGroup::has_parallel_policy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlacementGroup::set_has_parallel_policy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlacementGroup::clear_has_parallel_policy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlacementGroup::clear_parallel_policy() {
  parallel_policy_ = 0;
  clear_has_parallel_policy();
}
inline ::caffe::ParallelPolicy PlacementGroup::parallel_policy() const {
  // @@protoc_insertion_point(field_get:caffe.PlacementGroup.parallel_policy)
  return static_cast< ::caffe::ParallelPolicy >(parallel_policy_);
}
inline void PlacementGroup::set_parallel_policy(::caffe::ParallelPolicy value) {
  assert(::caffe::ParallelPolicy_IsValid(value));
  set_has_parallel_policy();
  parallel_policy_ = value;
  // @@protoc_insertion_point(field_set:caffe.PlacementGroup.parallel_policy)
}

// -------------------------------------------------------------------

// Strategy

// repeated .caffe.PlacementGroup placement_group = 1;
inline int Strategy::placement_group_size() const {
  return placement_group_.size();
}
inline void Strategy::clear_placement_group() {
  placement_group_.Clear();
}
inline const ::caffe::PlacementGroup& Strategy::placement_group(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Strategy.placement_group)
  return placement_group_.Get(index);
}
inline ::caffe::PlacementGroup* Strategy::mutable_placement_group(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.Strategy.placement_group)
  return placement_group_.Mutable(index);
}
inline ::caffe::PlacementGroup* Strategy::add_placement_group() {
  // @@protoc_insertion_point(field_add:caffe.Strategy.placement_group)
  return placement_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup >*
Strategy::mutable_placement_group() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Strategy.placement_group)
  return &placement_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::PlacementGroup >&
Strategy::placement_group() const {
  // @@protoc_insertion_point(field_list:caffe.Strategy.placement_group)
  return placement_group_;
}

// -------------------------------------------------------------------

// SolverProto

// required string train_net = 1;
inline bool SolverProto::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverProto::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverProto::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverProto::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
inline const ::std::string& SolverProto::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.train_net)
  return train_net_.GetNoArena();
}
inline void SolverProto::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.train_net)
}
#if LANG_CXX11
inline void SolverProto::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.train_net)
}
#endif
inline void SolverProto::set_train_net(const char* value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.train_net)
}
inline void SolverProto::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.train_net)
}
inline ::std::string* SolverProto::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverProto::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverProto::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.train_net)
}

// repeated string test_net = 2;
inline int SolverProto::test_net_size() const {
  return test_net_.size();
}
inline void SolverProto::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverProto::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverProto::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.test_net)
  return test_net_.Mutable(index);
}
inline void SolverProto::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_net)
  test_net_.Mutable(index)->assign(value);
}
inline void SolverProto::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.test_net)
}
inline void SolverProto::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.test_net)
}
inline ::std::string* SolverProto::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverProto.test_net)
  return test_net_.Add();
}
inline void SolverProto::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverProto.test_net)
}
inline void SolverProto::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverProto.test_net)
}
inline void SolverProto::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverProto.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverProto::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverProto::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.test_net)
  return &test_net_;
}

// required string resource = 3;
inline bool SolverProto::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverProto::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverProto::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverProto::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource();
}
inline const ::std::string& SolverProto::resource() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.resource)
  return resource_.GetNoArena();
}
inline void SolverProto::set_resource(const ::std::string& value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.resource)
}
#if LANG_CXX11
inline void SolverProto::set_resource(::std::string&& value) {
  set_has_resource();
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.resource)
}
#endif
inline void SolverProto::set_resource(const char* value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.resource)
}
inline void SolverProto::set_resource(const char* value, size_t size) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.resource)
}
inline ::std::string* SolverProto::mutable_resource() {
  set_has_resource();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverProto::release_resource() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.resource)
  clear_has_resource();
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverProto::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.resource)
}

// required string strategy = 4;
inline bool SolverProto::has_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverProto::set_has_strategy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverProto::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverProto::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strategy();
}
inline const ::std::string& SolverProto::strategy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.strategy)
  return strategy_.GetNoArena();
}
inline void SolverProto::set_strategy(const ::std::string& value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.strategy)
}
#if LANG_CXX11
inline void SolverProto::set_strategy(::std::string&& value) {
  set_has_strategy();
  strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.strategy)
}
#endif
inline void SolverProto::set_strategy(const char* value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.strategy)
}
inline void SolverProto::set_strategy(const char* value, size_t size) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.strategy)
}
inline ::std::string* SolverProto::mutable_strategy() {
  set_has_strategy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverProto::release_strategy() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.strategy)
  clear_has_strategy();
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverProto::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    set_has_strategy();
  } else {
    clear_has_strategy();
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.strategy)
}

// optional .caffe.NetState train_state = 26;
inline bool SolverProto::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverProto::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverProto::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverProto::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverProto::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.train_state)
  return train_state_ != NULL ? *train_state_
                         : *::caffe::NetState::internal_default_instance();
}
inline ::caffe::NetState* SolverProto::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.train_state)
  return train_state_;
}
inline ::caffe::NetState* SolverProto::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverProto::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverProto::test_state_size() const {
  return test_state_.size();
}
inline void SolverProto::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverProto::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverProto::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.test_state)
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverProto::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverProto.test_state)
  return test_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverProto::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.test_state)
  return &test_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverProto::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.test_state)
  return test_state_;
}

// repeated int32 test_iter = 28;
inline int SolverProto::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverProto::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverProto::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_iter)
  return test_iter_.Get(index);
}
inline void SolverProto::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_iter)
}
inline void SolverProto::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverProto.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverProto::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverProto::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 29 [default = 0];
inline bool SolverProto::has_test_interval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverProto::set_has_test_interval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverProto::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverProto::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverProto::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_interval)
  return test_interval_;
}
inline void SolverProto::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_interval)
}

// optional bool test_compute_loss = 30 [default = false];
inline bool SolverProto::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverProto::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverProto::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverProto::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverProto::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverProto::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverProto::has_test_initialization() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SolverProto::set_has_test_initialization() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SolverProto::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SolverProto::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverProto::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.test_initialization)
  return test_initialization_;
}
inline void SolverProto::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.test_initialization)
}

// optional float base_lr = 33;
inline bool SolverProto::has_base_lr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverProto::set_has_base_lr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverProto::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverProto::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverProto::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.base_lr)
  return base_lr_;
}
inline void SolverProto::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.base_lr)
}

// optional int32 display = 34;
inline bool SolverProto::has_display() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverProto::set_has_display() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverProto::clear_has_display() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverProto::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverProto::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.display)
  return display_;
}
inline void SolverProto::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.display)
}

// optional int32 average_loss = 35 [default = 1];
inline bool SolverProto::has_average_loss() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverProto::set_has_average_loss() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverProto::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverProto::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverProto::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.average_loss)
  return average_loss_;
}
inline void SolverProto::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.average_loss)
}

// optional int32 max_iter = 36;
inline bool SolverProto::has_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverProto::set_has_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverProto::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverProto::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverProto::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.max_iter)
  return max_iter_;
}
inline void SolverProto::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.max_iter)
}

// optional string lr_policy = 37;
inline bool SolverProto::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverProto::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverProto::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverProto::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
inline const ::std::string& SolverProto::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.lr_policy)
  return lr_policy_.GetNoArena();
}
inline void SolverProto::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.lr_policy)
}
#if LANG_CXX11
inline void SolverProto::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.lr_policy)
}
#endif
inline void SolverProto::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.lr_policy)
}
inline void SolverProto::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.lr_policy)
}
inline ::std::string* SolverProto::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverProto::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverProto::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.lr_policy)
}

// optional float gamma = 39;
inline bool SolverProto::has_gamma() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverProto::set_has_gamma() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverProto::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverProto::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverProto::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.gamma)
  return gamma_;
}
inline void SolverProto::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.gamma)
}

// optional float power = 40;
inline bool SolverProto::has_power() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverProto::set_has_power() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverProto::clear_has_power() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverProto::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverProto::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.power)
  return power_;
}
inline void SolverProto::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.power)
}

// optional float momentum = 41;
inline bool SolverProto::has_momentum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverProto::set_has_momentum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverProto::clear_has_momentum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverProto::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverProto::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.momentum)
  return momentum_;
}
inline void SolverProto::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.momentum)
}

// optional float weight_decay = 42;
inline bool SolverProto::has_weight_decay() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverProto::set_has_weight_decay() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverProto::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverProto::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverProto::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.weight_decay)
  return weight_decay_;
}
inline void SolverProto::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.weight_decay)
}

// optional string regularization_type = 43 [default = "L2"];
inline bool SolverProto::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverProto::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverProto::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverProto::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&SolverProto::_default_regularization_type_.get());
  clear_has_regularization_type();
}
inline const ::std::string& SolverProto::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.regularization_type)
  return regularization_type_.GetNoArena();
}
inline void SolverProto::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverProto::_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.regularization_type)
}
#if LANG_CXX11
inline void SolverProto::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &SolverProto::_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.regularization_type)
}
#endif
inline void SolverProto::set_regularization_type(const char* value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverProto::_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.regularization_type)
}
inline void SolverProto::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverProto::_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.regularization_type)
}
inline ::std::string* SolverProto::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.regularization_type)
  return regularization_type_.MutableNoArena(&SolverProto::_default_regularization_type_.get());
}
inline ::std::string* SolverProto::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(&SolverProto::_default_regularization_type_.get());
}
inline void SolverProto::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&SolverProto::_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.regularization_type)
}

// optional int32 stepsize = 44;
inline bool SolverProto::has_stepsize() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverProto::set_has_stepsize() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverProto::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverProto::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverProto::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.stepsize)
  return stepsize_;
}
inline void SolverProto::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.stepsize)
}

// repeated int32 stepvalue = 45;
inline int SolverProto::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverProto::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverProto::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverProto::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.stepvalue)
}
inline void SolverProto::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverProto.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverProto::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverProto.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverProto::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverProto.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 46 [default = -1];
inline bool SolverProto::has_clip_gradients() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverProto::set_has_clip_gradients() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverProto::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverProto::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverProto::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.clip_gradients)
  return clip_gradients_;
}
inline void SolverProto::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.clip_gradients)
}

// optional int32 snapshot = 47 [default = 0];
inline bool SolverProto::has_snapshot() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverProto::set_has_snapshot() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverProto::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverProto::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverProto::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot)
  return snapshot_;
}
inline void SolverProto::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot)
}

// optional string snapshot_prefix = 48;
inline bool SolverProto::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverProto::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverProto::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverProto::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverProto::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
inline void SolverProto::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot_prefix)
}
#if LANG_CXX11
inline void SolverProto::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverProto.snapshot_prefix)
}
#endif
inline void SolverProto::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverProto.snapshot_prefix)
}
inline void SolverProto::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverProto.snapshot_prefix)
}
inline ::std::string* SolverProto::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverProto.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverProto::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverProto.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverProto::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverProto.snapshot_prefix)
}

// optional bool snapshot_diff = 49 [default = false];
inline bool SolverProto::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverProto::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverProto::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverProto::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverProto::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverProto::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot_diff)
}

// optional int64 random_seed = 52 [default = -1];
inline bool SolverProto::has_random_seed() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverProto::set_has_random_seed() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverProto::clear_has_random_seed() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverProto::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverProto::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.random_seed)
  return random_seed_;
}
inline void SolverProto::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.random_seed)
}

// required int32 machine_id = 56 [default = 0];
inline bool SolverProto::has_machine_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverProto::set_has_machine_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverProto::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverProto::clear_machine_id() {
  machine_id_ = 0;
  clear_has_machine_id();
}
inline ::google::protobuf::int32 SolverProto::machine_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.machine_id)
  return machine_id_;
}
inline void SolverProto::set_machine_id(::google::protobuf::int32 value) {
  set_has_machine_id();
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.machine_id)
}

// optional .caffe.SolverProto.SolverType solver_type = 57 [default = SGD];
inline bool SolverProto::has_solver_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverProto::set_has_solver_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverProto::clear_has_solver_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverProto::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverProto_SolverType SolverProto::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.solver_type)
  return static_cast< ::caffe::SolverProto_SolverType >(solver_type_);
}
inline void SolverProto::set_solver_type(::caffe::SolverProto_SolverType value) {
  assert(::caffe::SolverProto_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.solver_type)
}

// optional float delta = 59 [default = 1e-08];
inline bool SolverProto::has_delta() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverProto::set_has_delta() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverProto::clear_has_delta() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverProto::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
inline float SolverProto::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.delta)
  return delta_;
}
inline void SolverProto::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.delta)
}

// optional bool debug_info = 60 [default = false];
inline bool SolverProto::has_debug_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverProto::set_has_debug_info() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverProto::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverProto::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverProto::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.debug_info)
  return debug_info_;
}
inline void SolverProto::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.debug_info)
}

// optional bool snapshot_after_train = 62 [default = true];
inline bool SolverProto::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverProto::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverProto::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverProto::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverProto::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverProto::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.snapshot_after_train)
}

// optional int32 num_data_param_copy = 63 [default = 1];
inline bool SolverProto::has_num_data_param_copy() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverProto::set_has_num_data_param_copy() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverProto::clear_has_num_data_param_copy() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverProto::clear_num_data_param_copy() {
  num_data_param_copy_ = 1;
  clear_has_num_data_param_copy();
}
inline ::google::protobuf::int32 SolverProto::num_data_param_copy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.num_data_param_copy)
  return num_data_param_copy_;
}
inline void SolverProto::set_num_data_param_copy(::google::protobuf::int32 value) {
  set_has_num_data_param_copy();
  num_data_param_copy_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.num_data_param_copy)
}

// optional int32 num_model_param_copy = 64 [default = 1];
inline bool SolverProto::has_num_model_param_copy() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverProto::set_has_num_model_param_copy() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverProto::clear_has_num_model_param_copy() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverProto::clear_num_model_param_copy() {
  num_model_param_copy_ = 1;
  clear_has_num_model_param_copy();
}
inline ::google::protobuf::int32 SolverProto::num_model_param_copy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.num_model_param_copy)
  return num_model_param_copy_;
}
inline void SolverProto::set_num_model_param_copy(::google::protobuf::int32 value) {
  set_has_num_model_param_copy();
  num_model_param_copy_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.num_model_param_copy)
}

// optional int32 num_batch_per_sync = 65 [default = 1];
inline bool SolverProto::has_num_batch_per_sync() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverProto::set_has_num_batch_per_sync() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverProto::clear_has_num_batch_per_sync() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverProto::clear_num_batch_per_sync() {
  num_batch_per_sync_ = 1;
  clear_has_num_batch_per_sync();
}
inline ::google::protobuf::int32 SolverProto::num_batch_per_sync() const {
  // @@protoc_insertion_point(field_get:caffe.SolverProto.num_batch_per_sync)
  return num_batch_per_sync_;
}
inline void SolverProto::set_num_batch_per_sync(::google::protobuf::int32 value) {
  set_has_num_batch_per_sync();
  num_batch_per_sync_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverProto.num_batch_per_sync)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
inline void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
inline void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena();
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
#if LANG_CXX11
inline void ParamSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ParamSpec.name)
}
#endif
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerProto

// optional string name = 1;
inline bool LayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerProto::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.name)
  return name_.GetNoArena();
}
inline void LayerProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerProto.name)
}
#if LANG_CXX11
inline void LayerProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerProto.name)
}
#endif
inline void LayerProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerProto.name)
}
inline void LayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerProto.name)
}
inline ::std::string* LayerProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.name)
}

// optional string type = 2;
inline bool LayerProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerProto::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& LayerProto::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.type)
  return type_.GetNoArena();
}
inline void LayerProto::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerProto.type)
}
#if LANG_CXX11
inline void LayerProto::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerProto.type)
}
#endif
inline void LayerProto::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerProto.type)
}
inline void LayerProto::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerProto.type)
}
inline ::std::string* LayerProto::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerProto::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerProto::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.type)
}

// optional .caffe.ConvolutionProto convolution_proto = 106;
inline bool LayerProto::has_convolution_proto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerProto::set_has_convolution_proto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerProto::clear_has_convolution_proto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerProto::clear_convolution_proto() {
  if (convolution_proto_ != NULL) convolution_proto_->::caffe::ConvolutionProto::Clear();
  clear_has_convolution_proto();
}
inline const ::caffe::ConvolutionProto& LayerProto::convolution_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.convolution_proto)
  return convolution_proto_ != NULL ? *convolution_proto_
                         : *::caffe::ConvolutionProto::internal_default_instance();
}
inline ::caffe::ConvolutionProto* LayerProto::mutable_convolution_proto() {
  set_has_convolution_proto();
  if (convolution_proto_ == NULL) {
    convolution_proto_ = new ::caffe::ConvolutionProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.convolution_proto)
  return convolution_proto_;
}
inline ::caffe::ConvolutionProto* LayerProto::release_convolution_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.convolution_proto)
  clear_has_convolution_proto();
  ::caffe::ConvolutionProto* temp = convolution_proto_;
  convolution_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_convolution_proto(::caffe::ConvolutionProto* convolution_proto) {
  delete convolution_proto_;
  convolution_proto_ = convolution_proto;
  if (convolution_proto) {
    set_has_convolution_proto();
  } else {
    clear_has_convolution_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.convolution_proto)
}

// optional .caffe.LoaderProto loader_proto = 107;
inline bool LayerProto::has_loader_proto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerProto::set_has_loader_proto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerProto::clear_has_loader_proto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerProto::clear_loader_proto() {
  if (loader_proto_ != NULL) loader_proto_->::caffe::LoaderProto::Clear();
  clear_has_loader_proto();
}
inline const ::caffe::LoaderProto& LayerProto::loader_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.loader_proto)
  return loader_proto_ != NULL ? *loader_proto_
                         : *::caffe::LoaderProto::internal_default_instance();
}
inline ::caffe::LoaderProto* LayerProto::mutable_loader_proto() {
  set_has_loader_proto();
  if (loader_proto_ == NULL) {
    loader_proto_ = new ::caffe::LoaderProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.loader_proto)
  return loader_proto_;
}
inline ::caffe::LoaderProto* LayerProto::release_loader_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.loader_proto)
  clear_has_loader_proto();
  ::caffe::LoaderProto* temp = loader_proto_;
  loader_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_loader_proto(::caffe::LoaderProto* loader_proto) {
  delete loader_proto_;
  loader_proto_ = loader_proto;
  if (loader_proto) {
    set_has_loader_proto();
  } else {
    clear_has_loader_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.loader_proto)
}

// optional .caffe.InnerProductProto innerproduct_proto = 117;
inline bool LayerProto::has_innerproduct_proto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerProto::set_has_innerproduct_proto() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerProto::clear_has_innerproduct_proto() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerProto::clear_innerproduct_proto() {
  if (innerproduct_proto_ != NULL) innerproduct_proto_->::caffe::InnerProductProto::Clear();
  clear_has_innerproduct_proto();
}
inline const ::caffe::InnerProductProto& LayerProto::innerproduct_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.innerproduct_proto)
  return innerproduct_proto_ != NULL ? *innerproduct_proto_
                         : *::caffe::InnerProductProto::internal_default_instance();
}
inline ::caffe::InnerProductProto* LayerProto::mutable_innerproduct_proto() {
  set_has_innerproduct_proto();
  if (innerproduct_proto_ == NULL) {
    innerproduct_proto_ = new ::caffe::InnerProductProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.innerproduct_proto)
  return innerproduct_proto_;
}
inline ::caffe::InnerProductProto* LayerProto::release_innerproduct_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.innerproduct_proto)
  clear_has_innerproduct_proto();
  ::caffe::InnerProductProto* temp = innerproduct_proto_;
  innerproduct_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_innerproduct_proto(::caffe::InnerProductProto* innerproduct_proto) {
  delete innerproduct_proto_;
  innerproduct_proto_ = innerproduct_proto;
  if (innerproduct_proto) {
    set_has_innerproduct_proto();
  } else {
    clear_has_innerproduct_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.innerproduct_proto)
}

// optional .caffe.PoolingProto pooling_proto = 121;
inline bool LayerProto::has_pooling_proto() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerProto::set_has_pooling_proto() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerProto::clear_has_pooling_proto() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerProto::clear_pooling_proto() {
  if (pooling_proto_ != NULL) pooling_proto_->::caffe::PoolingProto::Clear();
  clear_has_pooling_proto();
}
inline const ::caffe::PoolingProto& LayerProto::pooling_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.pooling_proto)
  return pooling_proto_ != NULL ? *pooling_proto_
                         : *::caffe::PoolingProto::internal_default_instance();
}
inline ::caffe::PoolingProto* LayerProto::mutable_pooling_proto() {
  set_has_pooling_proto();
  if (pooling_proto_ == NULL) {
    pooling_proto_ = new ::caffe::PoolingProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.pooling_proto)
  return pooling_proto_;
}
inline ::caffe::PoolingProto* LayerProto::release_pooling_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.pooling_proto)
  clear_has_pooling_proto();
  ::caffe::PoolingProto* temp = pooling_proto_;
  pooling_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_pooling_proto(::caffe::PoolingProto* pooling_proto) {
  delete pooling_proto_;
  pooling_proto_ = pooling_proto;
  if (pooling_proto) {
    set_has_pooling_proto();
  } else {
    clear_has_pooling_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.pooling_proto)
}

// optional .caffe.ReLUProto relu_proto = 123;
inline bool LayerProto::has_relu_proto() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerProto::set_has_relu_proto() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerProto::clear_has_relu_proto() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerProto::clear_relu_proto() {
  if (relu_proto_ != NULL) relu_proto_->::caffe::ReLUProto::Clear();
  clear_has_relu_proto();
}
inline const ::caffe::ReLUProto& LayerProto::relu_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.relu_proto)
  return relu_proto_ != NULL ? *relu_proto_
                         : *::caffe::ReLUProto::internal_default_instance();
}
inline ::caffe::ReLUProto* LayerProto::mutable_relu_proto() {
  set_has_relu_proto();
  if (relu_proto_ == NULL) {
    relu_proto_ = new ::caffe::ReLUProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.relu_proto)
  return relu_proto_;
}
inline ::caffe::ReLUProto* LayerProto::release_relu_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.relu_proto)
  clear_has_relu_proto();
  ::caffe::ReLUProto* temp = relu_proto_;
  relu_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_relu_proto(::caffe::ReLUProto* relu_proto) {
  delete relu_proto_;
  relu_proto_ = relu_proto;
  if (relu_proto) {
    set_has_relu_proto();
  } else {
    clear_has_relu_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.relu_proto)
}

// optional .caffe.LRNProto lrn_proto = 118;
inline bool LayerProto::has_lrn_proto() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerProto::set_has_lrn_proto() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerProto::clear_has_lrn_proto() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerProto::clear_lrn_proto() {
  if (lrn_proto_ != NULL) lrn_proto_->::caffe::LRNProto::Clear();
  clear_has_lrn_proto();
}
inline const ::caffe::LRNProto& LayerProto::lrn_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.lrn_proto)
  return lrn_proto_ != NULL ? *lrn_proto_
                         : *::caffe::LRNProto::internal_default_instance();
}
inline ::caffe::LRNProto* LayerProto::mutable_lrn_proto() {
  set_has_lrn_proto();
  if (lrn_proto_ == NULL) {
    lrn_proto_ = new ::caffe::LRNProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.lrn_proto)
  return lrn_proto_;
}
inline ::caffe::LRNProto* LayerProto::release_lrn_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.lrn_proto)
  clear_has_lrn_proto();
  ::caffe::LRNProto* temp = lrn_proto_;
  lrn_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_lrn_proto(::caffe::LRNProto* lrn_proto) {
  delete lrn_proto_;
  lrn_proto_ = lrn_proto;
  if (lrn_proto) {
    set_has_lrn_proto();
  } else {
    clear_has_lrn_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.lrn_proto)
}

// optional .caffe.SigmoidProto sigmoid_proto = 124;
inline bool LayerProto::has_sigmoid_proto() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerProto::set_has_sigmoid_proto() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerProto::clear_has_sigmoid_proto() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerProto::clear_sigmoid_proto() {
  if (sigmoid_proto_ != NULL) sigmoid_proto_->::caffe::SigmoidProto::Clear();
  clear_has_sigmoid_proto();
}
inline const ::caffe::SigmoidProto& LayerProto::sigmoid_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.sigmoid_proto)
  return sigmoid_proto_ != NULL ? *sigmoid_proto_
                         : *::caffe::SigmoidProto::internal_default_instance();
}
inline ::caffe::SigmoidProto* LayerProto::mutable_sigmoid_proto() {
  set_has_sigmoid_proto();
  if (sigmoid_proto_ == NULL) {
    sigmoid_proto_ = new ::caffe::SigmoidProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.sigmoid_proto)
  return sigmoid_proto_;
}
inline ::caffe::SigmoidProto* LayerProto::release_sigmoid_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.sigmoid_proto)
  clear_has_sigmoid_proto();
  ::caffe::SigmoidProto* temp = sigmoid_proto_;
  sigmoid_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_sigmoid_proto(::caffe::SigmoidProto* sigmoid_proto) {
  delete sigmoid_proto_;
  sigmoid_proto_ = sigmoid_proto;
  if (sigmoid_proto) {
    set_has_sigmoid_proto();
  } else {
    clear_has_sigmoid_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.sigmoid_proto)
}

// optional .caffe.SoftmaxProto softmax_proto = 125;
inline bool LayerProto::has_softmax_proto() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerProto::set_has_softmax_proto() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerProto::clear_has_softmax_proto() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerProto::clear_softmax_proto() {
  if (softmax_proto_ != NULL) softmax_proto_->::caffe::SoftmaxProto::Clear();
  clear_has_softmax_proto();
}
inline const ::caffe::SoftmaxProto& LayerProto::softmax_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.softmax_proto)
  return softmax_proto_ != NULL ? *softmax_proto_
                         : *::caffe::SoftmaxProto::internal_default_instance();
}
inline ::caffe::SoftmaxProto* LayerProto::mutable_softmax_proto() {
  set_has_softmax_proto();
  if (softmax_proto_ == NULL) {
    softmax_proto_ = new ::caffe::SoftmaxProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.softmax_proto)
  return softmax_proto_;
}
inline ::caffe::SoftmaxProto* LayerProto::release_softmax_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.softmax_proto)
  clear_has_softmax_proto();
  ::caffe::SoftmaxProto* temp = softmax_proto_;
  softmax_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_softmax_proto(::caffe::SoftmaxProto* softmax_proto) {
  delete softmax_proto_;
  softmax_proto_ = softmax_proto;
  if (softmax_proto) {
    set_has_softmax_proto();
  } else {
    clear_has_softmax_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.softmax_proto)
}

// optional .caffe.MultinomialLogisticLossProto multinomiallogisticloss_proto = 130;
inline bool LayerProto::has_multinomiallogisticloss_proto() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerProto::set_has_multinomiallogisticloss_proto() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerProto::clear_has_multinomiallogisticloss_proto() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerProto::clear_multinomiallogisticloss_proto() {
  if (multinomiallogisticloss_proto_ != NULL) multinomiallogisticloss_proto_->::caffe::MultinomialLogisticLossProto::Clear();
  clear_has_multinomiallogisticloss_proto();
}
inline const ::caffe::MultinomialLogisticLossProto& LayerProto::multinomiallogisticloss_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.multinomiallogisticloss_proto)
  return multinomiallogisticloss_proto_ != NULL ? *multinomiallogisticloss_proto_
                         : *::caffe::MultinomialLogisticLossProto::internal_default_instance();
}
inline ::caffe::MultinomialLogisticLossProto* LayerProto::mutable_multinomiallogisticloss_proto() {
  set_has_multinomiallogisticloss_proto();
  if (multinomiallogisticloss_proto_ == NULL) {
    multinomiallogisticloss_proto_ = new ::caffe::MultinomialLogisticLossProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.multinomiallogisticloss_proto)
  return multinomiallogisticloss_proto_;
}
inline ::caffe::MultinomialLogisticLossProto* LayerProto::release_multinomiallogisticloss_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.multinomiallogisticloss_proto)
  clear_has_multinomiallogisticloss_proto();
  ::caffe::MultinomialLogisticLossProto* temp = multinomiallogisticloss_proto_;
  multinomiallogisticloss_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_multinomiallogisticloss_proto(::caffe::MultinomialLogisticLossProto* multinomiallogisticloss_proto) {
  delete multinomiallogisticloss_proto_;
  multinomiallogisticloss_proto_ = multinomiallogisticloss_proto;
  if (multinomiallogisticloss_proto) {
    set_has_multinomiallogisticloss_proto();
  } else {
    clear_has_multinomiallogisticloss_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.multinomiallogisticloss_proto)
}

// optional .caffe.SplitProto split_proto = 131;
inline bool LayerProto::has_split_proto() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerProto::set_has_split_proto() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerProto::clear_has_split_proto() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerProto::clear_split_proto() {
  if (split_proto_ != NULL) split_proto_->::caffe::SplitProto::Clear();
  clear_has_split_proto();
}
inline const ::caffe::SplitProto& LayerProto::split_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.split_proto)
  return split_proto_ != NULL ? *split_proto_
                         : *::caffe::SplitProto::internal_default_instance();
}
inline ::caffe::SplitProto* LayerProto::mutable_split_proto() {
  set_has_split_proto();
  if (split_proto_ == NULL) {
    split_proto_ = new ::caffe::SplitProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.split_proto)
  return split_proto_;
}
inline ::caffe::SplitProto* LayerProto::release_split_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.split_proto)
  clear_has_split_proto();
  ::caffe::SplitProto* temp = split_proto_;
  split_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_split_proto(::caffe::SplitProto* split_proto) {
  delete split_proto_;
  split_proto_ = split_proto;
  if (split_proto) {
    set_has_split_proto();
  } else {
    clear_has_split_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.split_proto)
}

// optional .caffe.ConcatProto concat_proto = 132;
inline bool LayerProto::has_concat_proto() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerProto::set_has_concat_proto() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerProto::clear_has_concat_proto() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerProto::clear_concat_proto() {
  if (concat_proto_ != NULL) concat_proto_->::caffe::ConcatProto::Clear();
  clear_has_concat_proto();
}
inline const ::caffe::ConcatProto& LayerProto::concat_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.concat_proto)
  return concat_proto_ != NULL ? *concat_proto_
                         : *::caffe::ConcatProto::internal_default_instance();
}
inline ::caffe::ConcatProto* LayerProto::mutable_concat_proto() {
  set_has_concat_proto();
  if (concat_proto_ == NULL) {
    concat_proto_ = new ::caffe::ConcatProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.concat_proto)
  return concat_proto_;
}
inline ::caffe::ConcatProto* LayerProto::release_concat_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.concat_proto)
  clear_has_concat_proto();
  ::caffe::ConcatProto* temp = concat_proto_;
  concat_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_concat_proto(::caffe::ConcatProto* concat_proto) {
  delete concat_proto_;
  concat_proto_ = concat_proto;
  if (concat_proto) {
    set_has_concat_proto();
  } else {
    clear_has_concat_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.concat_proto)
}

// optional .caffe.BatchNormProto batchnorm_proto = 135;
inline bool LayerProto::has_batchnorm_proto() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerProto::set_has_batchnorm_proto() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerProto::clear_has_batchnorm_proto() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerProto::clear_batchnorm_proto() {
  if (batchnorm_proto_ != NULL) batchnorm_proto_->::caffe::BatchNormProto::Clear();
  clear_has_batchnorm_proto();
}
inline const ::caffe::BatchNormProto& LayerProto::batchnorm_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.batchnorm_proto)
  return batchnorm_proto_ != NULL ? *batchnorm_proto_
                         : *::caffe::BatchNormProto::internal_default_instance();
}
inline ::caffe::BatchNormProto* LayerProto::mutable_batchnorm_proto() {
  set_has_batchnorm_proto();
  if (batchnorm_proto_ == NULL) {
    batchnorm_proto_ = new ::caffe::BatchNormProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.batchnorm_proto)
  return batchnorm_proto_;
}
inline ::caffe::BatchNormProto* LayerProto::release_batchnorm_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.batchnorm_proto)
  clear_has_batchnorm_proto();
  ::caffe::BatchNormProto* temp = batchnorm_proto_;
  batchnorm_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_batchnorm_proto(::caffe::BatchNormProto* batchnorm_proto) {
  delete batchnorm_proto_;
  batchnorm_proto_ = batchnorm_proto;
  if (batchnorm_proto) {
    set_has_batchnorm_proto();
  } else {
    clear_has_batchnorm_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.batchnorm_proto)
}

// optional .caffe.ModelUpdateProto modelupdate_proto = 136;
inline bool LayerProto::has_modelupdate_proto() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerProto::set_has_modelupdate_proto() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerProto::clear_has_modelupdate_proto() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerProto::clear_modelupdate_proto() {
  if (modelupdate_proto_ != NULL) modelupdate_proto_->::caffe::ModelUpdateProto::Clear();
  clear_has_modelupdate_proto();
}
inline const ::caffe::ModelUpdateProto& LayerProto::modelupdate_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.modelupdate_proto)
  return modelupdate_proto_ != NULL ? *modelupdate_proto_
                         : *::caffe::ModelUpdateProto::internal_default_instance();
}
inline ::caffe::ModelUpdateProto* LayerProto::mutable_modelupdate_proto() {
  set_has_modelupdate_proto();
  if (modelupdate_proto_ == NULL) {
    modelupdate_proto_ = new ::caffe::ModelUpdateProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.modelupdate_proto)
  return modelupdate_proto_;
}
inline ::caffe::ModelUpdateProto* LayerProto::release_modelupdate_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.modelupdate_proto)
  clear_has_modelupdate_proto();
  ::caffe::ModelUpdateProto* temp = modelupdate_proto_;
  modelupdate_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_modelupdate_proto(::caffe::ModelUpdateProto* modelupdate_proto) {
  delete modelupdate_proto_;
  modelupdate_proto_ = modelupdate_proto;
  if (modelupdate_proto) {
    set_has_modelupdate_proto();
  } else {
    clear_has_modelupdate_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.modelupdate_proto)
}

// optional .caffe.NullUpdateProto nullupdate_proto = 137;
inline bool LayerProto::has_nullupdate_proto() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerProto::set_has_nullupdate_proto() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerProto::clear_has_nullupdate_proto() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerProto::clear_nullupdate_proto() {
  if (nullupdate_proto_ != NULL) nullupdate_proto_->::caffe::NullUpdateProto::Clear();
  clear_has_nullupdate_proto();
}
inline const ::caffe::NullUpdateProto& LayerProto::nullupdate_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.nullupdate_proto)
  return nullupdate_proto_ != NULL ? *nullupdate_proto_
                         : *::caffe::NullUpdateProto::internal_default_instance();
}
inline ::caffe::NullUpdateProto* LayerProto::mutable_nullupdate_proto() {
  set_has_nullupdate_proto();
  if (nullupdate_proto_ == NULL) {
    nullupdate_proto_ = new ::caffe::NullUpdateProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.nullupdate_proto)
  return nullupdate_proto_;
}
inline ::caffe::NullUpdateProto* LayerProto::release_nullupdate_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.nullupdate_proto)
  clear_has_nullupdate_proto();
  ::caffe::NullUpdateProto* temp = nullupdate_proto_;
  nullupdate_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_nullupdate_proto(::caffe::NullUpdateProto* nullupdate_proto) {
  delete nullupdate_proto_;
  nullupdate_proto_ = nullupdate_proto;
  if (nullupdate_proto) {
    set_has_nullupdate_proto();
  } else {
    clear_has_nullupdate_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.nullupdate_proto)
}

// optional .caffe.StoreProto store_proto = 139;
inline bool LayerProto::has_store_proto() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerProto::set_has_store_proto() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerProto::clear_has_store_proto() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerProto::clear_store_proto() {
  if (store_proto_ != NULL) store_proto_->::caffe::StoreProto::Clear();
  clear_has_store_proto();
}
inline const ::caffe::StoreProto& LayerProto::store_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.store_proto)
  return store_proto_ != NULL ? *store_proto_
                         : *::caffe::StoreProto::internal_default_instance();
}
inline ::caffe::StoreProto* LayerProto::mutable_store_proto() {
  set_has_store_proto();
  if (store_proto_ == NULL) {
    store_proto_ = new ::caffe::StoreProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.store_proto)
  return store_proto_;
}
inline ::caffe::StoreProto* LayerProto::release_store_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.store_proto)
  clear_has_store_proto();
  ::caffe::StoreProto* temp = store_proto_;
  store_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_store_proto(::caffe::StoreProto* store_proto) {
  delete store_proto_;
  store_proto_ = store_proto;
  if (store_proto) {
    set_has_store_proto();
  } else {
    clear_has_store_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.store_proto)
}

// optional .caffe.LoadPartialModelProto loadpartialmodel_proto = 140;
inline bool LayerProto::has_loadpartialmodel_proto() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerProto::set_has_loadpartialmodel_proto() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerProto::clear_has_loadpartialmodel_proto() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerProto::clear_loadpartialmodel_proto() {
  if (loadpartialmodel_proto_ != NULL) loadpartialmodel_proto_->::caffe::LoadPartialModelProto::Clear();
  clear_has_loadpartialmodel_proto();
}
inline const ::caffe::LoadPartialModelProto& LayerProto::loadpartialmodel_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.loadpartialmodel_proto)
  return loadpartialmodel_proto_ != NULL ? *loadpartialmodel_proto_
                         : *::caffe::LoadPartialModelProto::internal_default_instance();
}
inline ::caffe::LoadPartialModelProto* LayerProto::mutable_loadpartialmodel_proto() {
  set_has_loadpartialmodel_proto();
  if (loadpartialmodel_proto_ == NULL) {
    loadpartialmodel_proto_ = new ::caffe::LoadPartialModelProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.loadpartialmodel_proto)
  return loadpartialmodel_proto_;
}
inline ::caffe::LoadPartialModelProto* LayerProto::release_loadpartialmodel_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.loadpartialmodel_proto)
  clear_has_loadpartialmodel_proto();
  ::caffe::LoadPartialModelProto* temp = loadpartialmodel_proto_;
  loadpartialmodel_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_loadpartialmodel_proto(::caffe::LoadPartialModelProto* loadpartialmodel_proto) {
  delete loadpartialmodel_proto_;
  loadpartialmodel_proto_ = loadpartialmodel_proto;
  if (loadpartialmodel_proto) {
    set_has_loadpartialmodel_proto();
  } else {
    clear_has_loadpartialmodel_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.loadpartialmodel_proto)
}

// optional .caffe.PlaceholderProto placeholder_proto = 141;
inline bool LayerProto::has_placeholder_proto() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerProto::set_has_placeholder_proto() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerProto::clear_has_placeholder_proto() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerProto::clear_placeholder_proto() {
  if (placeholder_proto_ != NULL) placeholder_proto_->::caffe::PlaceholderProto::Clear();
  clear_has_placeholder_proto();
}
inline const ::caffe::PlaceholderProto& LayerProto::placeholder_proto() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProto.placeholder_proto)
  return placeholder_proto_ != NULL ? *placeholder_proto_
                         : *::caffe::PlaceholderProto::internal_default_instance();
}
inline ::caffe::PlaceholderProto* LayerProto::mutable_placeholder_proto() {
  set_has_placeholder_proto();
  if (placeholder_proto_ == NULL) {
    placeholder_proto_ = new ::caffe::PlaceholderProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerProto.placeholder_proto)
  return placeholder_proto_;
}
inline ::caffe::PlaceholderProto* LayerProto::release_placeholder_proto() {
  // @@protoc_insertion_point(field_release:caffe.LayerProto.placeholder_proto)
  clear_has_placeholder_proto();
  ::caffe::PlaceholderProto* temp = placeholder_proto_;
  placeholder_proto_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_placeholder_proto(::caffe::PlaceholderProto* placeholder_proto) {
  delete placeholder_proto_;
  placeholder_proto_ = placeholder_proto;
  if (placeholder_proto) {
    set_has_placeholder_proto();
  } else {
    clear_has_placeholder_proto();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerProto.placeholder_proto)
}

// -------------------------------------------------------------------

// BatchNormProto

// optional bool use_global_stats = 1;
inline bool BatchNormProto::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormProto::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormProto::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormProto::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormProto::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormProto.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormProto::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormProto.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormProto::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormProto::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormProto::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormProto::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormProto::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormProto.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormProto::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormProto.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormProto::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormProto::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormProto::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormProto::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float BatchNormProto::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormProto.eps)
  return eps_;
}
inline void BatchNormProto::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormProto.eps)
}

// -------------------------------------------------------------------

// MultinomialLogisticLossProto

// required string data = 120;
inline bool MultinomialLogisticLossProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultinomialLogisticLossProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultinomialLogisticLossProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultinomialLogisticLossProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& MultinomialLogisticLossProto::data() const {
  // @@protoc_insertion_point(field_get:caffe.MultinomialLogisticLossProto.data)
  return data_.GetNoArena();
}
inline void MultinomialLogisticLossProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultinomialLogisticLossProto.data)
}
#if LANG_CXX11
inline void MultinomialLogisticLossProto::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MultinomialLogisticLossProto.data)
}
#endif
inline void MultinomialLogisticLossProto::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultinomialLogisticLossProto.data)
}
inline void MultinomialLogisticLossProto::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultinomialLogisticLossProto.data)
}
inline ::std::string* MultinomialLogisticLossProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.MultinomialLogisticLossProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultinomialLogisticLossProto::release_data() {
  // @@protoc_insertion_point(field_release:caffe.MultinomialLogisticLossProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultinomialLogisticLossProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultinomialLogisticLossProto.data)
}

// required string label = 121;
inline bool MultinomialLogisticLossProto::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultinomialLogisticLossProto::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultinomialLogisticLossProto::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultinomialLogisticLossProto::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& MultinomialLogisticLossProto::label() const {
  // @@protoc_insertion_point(field_get:caffe.MultinomialLogisticLossProto.label)
  return label_.GetNoArena();
}
inline void MultinomialLogisticLossProto::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultinomialLogisticLossProto.label)
}
#if LANG_CXX11
inline void MultinomialLogisticLossProto::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MultinomialLogisticLossProto.label)
}
#endif
inline void MultinomialLogisticLossProto::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultinomialLogisticLossProto.label)
}
inline void MultinomialLogisticLossProto::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultinomialLogisticLossProto.label)
}
inline ::std::string* MultinomialLogisticLossProto::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:caffe.MultinomialLogisticLossProto.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultinomialLogisticLossProto::release_label() {
  // @@protoc_insertion_point(field_release:caffe.MultinomialLogisticLossProto.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultinomialLogisticLossProto::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultinomialLogisticLossProto.label)
}

// required string loss = 122;
inline bool MultinomialLogisticLossProto::has_loss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultinomialLogisticLossProto::set_has_loss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultinomialLogisticLossProto::clear_has_loss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultinomialLogisticLossProto::clear_loss() {
  loss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loss();
}
inline const ::std::string& MultinomialLogisticLossProto::loss() const {
  // @@protoc_insertion_point(field_get:caffe.MultinomialLogisticLossProto.loss)
  return loss_.GetNoArena();
}
inline void MultinomialLogisticLossProto::set_loss(const ::std::string& value) {
  set_has_loss();
  loss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultinomialLogisticLossProto.loss)
}
#if LANG_CXX11
inline void MultinomialLogisticLossProto::set_loss(::std::string&& value) {
  set_has_loss();
  loss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MultinomialLogisticLossProto.loss)
}
#endif
inline void MultinomialLogisticLossProto::set_loss(const char* value) {
  set_has_loss();
  loss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultinomialLogisticLossProto.loss)
}
inline void MultinomialLogisticLossProto::set_loss(const char* value, size_t size) {
  set_has_loss();
  loss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultinomialLogisticLossProto.loss)
}
inline ::std::string* MultinomialLogisticLossProto::mutable_loss() {
  set_has_loss();
  // @@protoc_insertion_point(field_mutable:caffe.MultinomialLogisticLossProto.loss)
  return loss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultinomialLogisticLossProto::release_loss() {
  // @@protoc_insertion_point(field_release:caffe.MultinomialLogisticLossProto.loss)
  clear_has_loss();
  return loss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultinomialLogisticLossProto::set_allocated_loss(::std::string* loss) {
  if (loss != NULL) {
    set_has_loss();
  } else {
    clear_has_loss();
  }
  loss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loss);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultinomialLogisticLossProto.loss)
}

// -------------------------------------------------------------------

// CopyProto

// required uint32 num = 1;
inline bool CopyProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopyProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopyProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopyProto::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 CopyProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.num)
  return num_;
}
inline void CopyProto::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.CopyProto.num)
}

// required .caffe.CopyType copy_type = 2;
inline bool CopyProto::has_copy_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CopyProto::set_has_copy_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CopyProto::clear_has_copy_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CopyProto::clear_copy_type() {
  copy_type_ = 0;
  clear_has_copy_type();
}
inline ::caffe::CopyType CopyProto::copy_type() const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.copy_type)
  return static_cast< ::caffe::CopyType >(copy_type_);
}
inline void CopyProto::set_copy_type(::caffe::CopyType value) {
  assert(::caffe::CopyType_IsValid(value));
  set_has_copy_type();
  copy_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.CopyProto.copy_type)
}

// repeated string in = 3;
inline int CopyProto::in_size() const {
  return in_.size();
}
inline void CopyProto::clear_in() {
  in_.Clear();
}
inline const ::std::string& CopyProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.in)
  return in_.Get(index);
}
inline ::std::string* CopyProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.CopyProto.in)
  return in_.Mutable(index);
}
inline void CopyProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.CopyProto.in)
  in_.Mutable(index)->assign(value);
}
inline void CopyProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.CopyProto.in)
}
inline void CopyProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.CopyProto.in)
}
inline ::std::string* CopyProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.CopyProto.in)
  return in_.Add();
}
inline void CopyProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.CopyProto.in)
}
inline void CopyProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.CopyProto.in)
}
inline void CopyProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.CopyProto.in)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopyProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.CopyProto.in)
  return in_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CopyProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CopyProto.in)
  return &in_;
}

// repeated string out = 4;
inline int CopyProto::out_size() const {
  return out_.size();
}
inline void CopyProto::clear_out() {
  out_.Clear();
}
inline const ::std::string& CopyProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CopyProto.out)
  return out_.Get(index);
}
inline ::std::string* CopyProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.CopyProto.out)
  return out_.Mutable(index);
}
inline void CopyProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.CopyProto.out)
  out_.Mutable(index)->assign(value);
}
inline void CopyProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.CopyProto.out)
}
inline void CopyProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.CopyProto.out)
}
inline ::std::string* CopyProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.CopyProto.out)
  return out_.Add();
}
inline void CopyProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.CopyProto.out)
}
inline void CopyProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.CopyProto.out)
}
inline void CopyProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.CopyProto.out)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopyProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.CopyProto.out)
  return out_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CopyProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CopyProto.out)
  return &out_;
}

// -------------------------------------------------------------------

// BoxingProto

// required uint32 in_num = 1;
inline bool BoxingProto::has_in_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxingProto::set_has_in_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxingProto::clear_has_in_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxingProto::clear_in_num() {
  in_num_ = 0u;
  clear_has_in_num();
}
inline ::google::protobuf::uint32 BoxingProto::in_num() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in_num)
  return in_num_;
}
inline void BoxingProto::set_in_num(::google::protobuf::uint32 value) {
  set_has_in_num();
  in_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in_num)
}

// repeated string in = 2;
inline int BoxingProto::in_size() const {
  return in_.size();
}
inline void BoxingProto::clear_in() {
  in_.Clear();
}
inline const ::std::string& BoxingProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in)
  return in_.Get(index);
}
inline ::std::string* BoxingProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BoxingProto.in)
  return in_.Mutable(index);
}
inline void BoxingProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in)
  in_.Mutable(index)->assign(value);
}
inline void BoxingProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BoxingProto.in)
}
inline void BoxingProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BoxingProto.in)
}
inline ::std::string* BoxingProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.BoxingProto.in)
  return in_.Add();
}
inline void BoxingProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.BoxingProto.in)
}
inline void BoxingProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.BoxingProto.in)
}
inline void BoxingProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.BoxingProto.in)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoxingProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.BoxingProto.in)
  return in_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BoxingProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BoxingProto.in)
  return &in_;
}

// required .caffe.BoxingOp in_op = 3 [default = CONCAT];
inline bool BoxingProto::has_in_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoxingProto::set_has_in_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoxingProto::clear_has_in_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoxingProto::clear_in_op() {
  in_op_ = 0;
  clear_has_in_op();
}
inline ::caffe::BoxingOp BoxingProto::in_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in_op)
  return static_cast< ::caffe::BoxingOp >(in_op_);
}
inline void BoxingProto::set_in_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_in_op();
  in_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in_op)
}

// required int32 in_axis = 4 [default = 0];
inline bool BoxingProto::has_in_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoxingProto::set_has_in_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoxingProto::clear_has_in_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoxingProto::clear_in_axis() {
  in_axis_ = 0;
  clear_has_in_axis();
}
inline ::google::protobuf::int32 BoxingProto::in_axis() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.in_axis)
  return in_axis_;
}
inline void BoxingProto::set_in_axis(::google::protobuf::int32 value) {
  set_has_in_axis();
  in_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.in_axis)
}

// required .caffe.BoxingOp backward_in_op = 5 [default = SPLIT];
inline bool BoxingProto::has_backward_in_op() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BoxingProto::set_has_backward_in_op() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BoxingProto::clear_has_backward_in_op() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BoxingProto::clear_backward_in_op() {
  backward_in_op_ = 3;
  clear_has_backward_in_op();
}
inline ::caffe::BoxingOp BoxingProto::backward_in_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.backward_in_op)
  return static_cast< ::caffe::BoxingOp >(backward_in_op_);
}
inline void BoxingProto::set_backward_in_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_backward_in_op();
  backward_in_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.backward_in_op)
}

// required uint32 out_num = 110;
inline bool BoxingProto::has_out_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoxingProto::set_has_out_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoxingProto::clear_has_out_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoxingProto::clear_out_num() {
  out_num_ = 0u;
  clear_has_out_num();
}
inline ::google::protobuf::uint32 BoxingProto::out_num() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out_num)
  return out_num_;
}
inline void BoxingProto::set_out_num(::google::protobuf::uint32 value) {
  set_has_out_num();
  out_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out_num)
}

// repeated string out = 12;
inline int BoxingProto::out_size() const {
  return out_.size();
}
inline void BoxingProto::clear_out() {
  out_.Clear();
}
inline const ::std::string& BoxingProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out)
  return out_.Get(index);
}
inline ::std::string* BoxingProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BoxingProto.out)
  return out_.Mutable(index);
}
inline void BoxingProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out)
  out_.Mutable(index)->assign(value);
}
inline void BoxingProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BoxingProto.out)
}
inline void BoxingProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BoxingProto.out)
}
inline ::std::string* BoxingProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.BoxingProto.out)
  return out_.Add();
}
inline void BoxingProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.BoxingProto.out)
}
inline void BoxingProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.BoxingProto.out)
}
inline void BoxingProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.BoxingProto.out)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoxingProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.BoxingProto.out)
  return out_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BoxingProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BoxingProto.out)
  return &out_;
}

// required .caffe.BoxingOp out_op = 13 [default = COPY];
inline bool BoxingProto::has_out_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BoxingProto::set_has_out_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BoxingProto::clear_has_out_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BoxingProto::clear_out_op() {
  out_op_ = 2;
  clear_has_out_op();
}
inline ::caffe::BoxingOp BoxingProto::out_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out_op)
  return static_cast< ::caffe::BoxingOp >(out_op_);
}
inline void BoxingProto::set_out_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_out_op();
  out_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out_op)
}

// required int32 out_axis = 14 [default = 0];
inline bool BoxingProto::has_out_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BoxingProto::set_has_out_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BoxingProto::clear_has_out_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BoxingProto::clear_out_axis() {
  out_axis_ = 0;
  clear_has_out_axis();
}
inline ::google::protobuf::int32 BoxingProto::out_axis() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.out_axis)
  return out_axis_;
}
inline void BoxingProto::set_out_axis(::google::protobuf::int32 value) {
  set_has_out_axis();
  out_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.out_axis)
}

// required .caffe.BoxingOp backward_out_op = 15 [default = ADD];
inline bool BoxingProto::has_backward_out_op() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BoxingProto::set_has_backward_out_op() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BoxingProto::clear_has_backward_out_op() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BoxingProto::clear_backward_out_op() {
  backward_out_op_ = 1;
  clear_has_backward_out_op();
}
inline ::caffe::BoxingOp BoxingProto::backward_out_op() const {
  // @@protoc_insertion_point(field_get:caffe.BoxingProto.backward_out_op)
  return static_cast< ::caffe::BoxingOp >(backward_out_op_);
}
inline void BoxingProto::set_backward_out_op(::caffe::BoxingOp value) {
  assert(::caffe::BoxingOp_IsValid(value));
  set_has_backward_out_op();
  backward_out_op_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxingProto.backward_out_op)
}

// -------------------------------------------------------------------

// ModelUpdateProto

// required string gradient = 1;
inline bool ModelUpdateProto::has_gradient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelUpdateProto::set_has_gradient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelUpdateProto::clear_has_gradient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelUpdateProto::clear_gradient() {
  gradient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gradient();
}
inline const ::std::string& ModelUpdateProto::gradient() const {
  // @@protoc_insertion_point(field_get:caffe.ModelUpdateProto.gradient)
  return gradient_.GetNoArena();
}
inline void ModelUpdateProto::set_gradient(const ::std::string& value) {
  set_has_gradient();
  gradient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ModelUpdateProto.gradient)
}
#if LANG_CXX11
inline void ModelUpdateProto::set_gradient(::std::string&& value) {
  set_has_gradient();
  gradient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ModelUpdateProto.gradient)
}
#endif
inline void ModelUpdateProto::set_gradient(const char* value) {
  set_has_gradient();
  gradient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ModelUpdateProto.gradient)
}
inline void ModelUpdateProto::set_gradient(const char* value, size_t size) {
  set_has_gradient();
  gradient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ModelUpdateProto.gradient)
}
inline ::std::string* ModelUpdateProto::mutable_gradient() {
  set_has_gradient();
  // @@protoc_insertion_point(field_mutable:caffe.ModelUpdateProto.gradient)
  return gradient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelUpdateProto::release_gradient() {
  // @@protoc_insertion_point(field_release:caffe.ModelUpdateProto.gradient)
  clear_has_gradient();
  return gradient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelUpdateProto::set_allocated_gradient(::std::string* gradient) {
  if (gradient != NULL) {
    set_has_gradient();
  } else {
    clear_has_gradient();
  }
  gradient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gradient);
  // @@protoc_insertion_point(field_set_allocated:caffe.ModelUpdateProto.gradient)
}

// required string old_weight = 2;
inline bool ModelUpdateProto::has_old_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelUpdateProto::set_has_old_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelUpdateProto::clear_has_old_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelUpdateProto::clear_old_weight() {
  old_weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_weight();
}
inline const ::std::string& ModelUpdateProto::old_weight() const {
  // @@protoc_insertion_point(field_get:caffe.ModelUpdateProto.old_weight)
  return old_weight_.GetNoArena();
}
inline void ModelUpdateProto::set_old_weight(const ::std::string& value) {
  set_has_old_weight();
  old_weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ModelUpdateProto.old_weight)
}
#if LANG_CXX11
inline void ModelUpdateProto::set_old_weight(::std::string&& value) {
  set_has_old_weight();
  old_weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ModelUpdateProto.old_weight)
}
#endif
inline void ModelUpdateProto::set_old_weight(const char* value) {
  set_has_old_weight();
  old_weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ModelUpdateProto.old_weight)
}
inline void ModelUpdateProto::set_old_weight(const char* value, size_t size) {
  set_has_old_weight();
  old_weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ModelUpdateProto.old_weight)
}
inline ::std::string* ModelUpdateProto::mutable_old_weight() {
  set_has_old_weight();
  // @@protoc_insertion_point(field_mutable:caffe.ModelUpdateProto.old_weight)
  return old_weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelUpdateProto::release_old_weight() {
  // @@protoc_insertion_point(field_release:caffe.ModelUpdateProto.old_weight)
  clear_has_old_weight();
  return old_weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelUpdateProto::set_allocated_old_weight(::std::string* old_weight) {
  if (old_weight != NULL) {
    set_has_old_weight();
  } else {
    clear_has_old_weight();
  }
  old_weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_weight);
  // @@protoc_insertion_point(field_set_allocated:caffe.ModelUpdateProto.old_weight)
}

// required string weight = 3;
inline bool ModelUpdateProto::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelUpdateProto::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelUpdateProto::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelUpdateProto::clear_weight() {
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight();
}
inline const ::std::string& ModelUpdateProto::weight() const {
  // @@protoc_insertion_point(field_get:caffe.ModelUpdateProto.weight)
  return weight_.GetNoArena();
}
inline void ModelUpdateProto::set_weight(const ::std::string& value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ModelUpdateProto.weight)
}
#if LANG_CXX11
inline void ModelUpdateProto::set_weight(::std::string&& value) {
  set_has_weight();
  weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ModelUpdateProto.weight)
}
#endif
inline void ModelUpdateProto::set_weight(const char* value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ModelUpdateProto.weight)
}
inline void ModelUpdateProto::set_weight(const char* value, size_t size) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ModelUpdateProto.weight)
}
inline ::std::string* ModelUpdateProto::mutable_weight() {
  set_has_weight();
  // @@protoc_insertion_point(field_mutable:caffe.ModelUpdateProto.weight)
  return weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelUpdateProto::release_weight() {
  // @@protoc_insertion_point(field_release:caffe.ModelUpdateProto.weight)
  clear_has_weight();
  return weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelUpdateProto::set_allocated_weight(::std::string* weight) {
  if (weight != NULL) {
    set_has_weight();
  } else {
    clear_has_weight();
  }
  weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight);
  // @@protoc_insertion_point(field_set_allocated:caffe.ModelUpdateProto.weight)
}

// -------------------------------------------------------------------

// NullUpdateProto

// required string weight = 1;
inline bool NullUpdateProto::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NullUpdateProto::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NullUpdateProto::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NullUpdateProto::clear_weight() {
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight();
}
inline const ::std::string& NullUpdateProto::weight() const {
  // @@protoc_insertion_point(field_get:caffe.NullUpdateProto.weight)
  return weight_.GetNoArena();
}
inline void NullUpdateProto::set_weight(const ::std::string& value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NullUpdateProto.weight)
}
#if LANG_CXX11
inline void NullUpdateProto::set_weight(::std::string&& value) {
  set_has_weight();
  weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NullUpdateProto.weight)
}
#endif
inline void NullUpdateProto::set_weight(const char* value) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NullUpdateProto.weight)
}
inline void NullUpdateProto::set_weight(const char* value, size_t size) {
  set_has_weight();
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NullUpdateProto.weight)
}
inline ::std::string* NullUpdateProto::mutable_weight() {
  set_has_weight();
  // @@protoc_insertion_point(field_mutable:caffe.NullUpdateProto.weight)
  return weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NullUpdateProto::release_weight() {
  // @@protoc_insertion_point(field_release:caffe.NullUpdateProto.weight)
  clear_has_weight();
  return weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NullUpdateProto::set_allocated_weight(::std::string* weight) {
  if (weight != NULL) {
    set_has_weight();
  } else {
    clear_has_weight();
  }
  weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight);
  // @@protoc_insertion_point(field_set_allocated:caffe.NullUpdateProto.weight)
}

// -------------------------------------------------------------------

// NetProto

// required string in_envelope = 1;
inline bool NetProto::has_in_envelope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto::set_has_in_envelope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto::clear_has_in_envelope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto::clear_in_envelope() {
  in_envelope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in_envelope();
}
inline const ::std::string& NetProto::in_envelope() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.in_envelope)
  return in_envelope_.GetNoArena();
}
inline void NetProto::set_in_envelope(const ::std::string& value) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetProto.in_envelope)
}
#if LANG_CXX11
inline void NetProto::set_in_envelope(::std::string&& value) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetProto.in_envelope)
}
#endif
inline void NetProto::set_in_envelope(const char* value) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.in_envelope)
}
inline void NetProto::set_in_envelope(const char* value, size_t size) {
  set_has_in_envelope();
  in_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.in_envelope)
}
inline ::std::string* NetProto::mutable_in_envelope() {
  set_has_in_envelope();
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.in_envelope)
  return in_envelope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetProto::release_in_envelope() {
  // @@protoc_insertion_point(field_release:caffe.NetProto.in_envelope)
  clear_has_in_envelope();
  return in_envelope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetProto::set_allocated_in_envelope(::std::string* in_envelope) {
  if (in_envelope != NULL) {
    set_has_in_envelope();
  } else {
    clear_has_in_envelope();
  }
  in_envelope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_envelope);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetProto.in_envelope)
}

// required uint32 in_num = 2;
inline bool NetProto::has_in_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto::set_has_in_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto::clear_has_in_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto::clear_in_num() {
  in_num_ = 0u;
  clear_has_in_num();
}
inline ::google::protobuf::uint32 NetProto::in_num() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.in_num)
  return in_num_;
}
inline void NetProto::set_in_num(::google::protobuf::uint32 value) {
  set_has_in_num();
  in_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetProto.in_num)
}

// repeated string in = 3;
inline int NetProto::in_size() const {
  return in_.size();
}
inline void NetProto::clear_in() {
  in_.Clear();
}
inline const ::std::string& NetProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.in)
  return in_.Get(index);
}
inline ::std::string* NetProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.in)
  return in_.Mutable(index);
}
inline void NetProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetProto.in)
  in_.Mutable(index)->assign(value);
}
inline void NetProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.in)
}
inline void NetProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.in)
}
inline ::std::string* NetProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetProto.in)
  return in_.Add();
}
inline void NetProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetProto.in)
}
inline void NetProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetProto.in)
}
inline void NetProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetProto.in)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.NetProto.in)
  return in_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetProto.in)
  return &in_;
}

// required string out_envelope = 4;
inline bool NetProto::has_out_envelope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto::set_has_out_envelope() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto::clear_has_out_envelope() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto::clear_out_envelope() {
  out_envelope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out_envelope();
}
inline const ::std::string& NetProto::out_envelope() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.out_envelope)
  return out_envelope_.GetNoArena();
}
inline void NetProto::set_out_envelope(const ::std::string& value) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetProto.out_envelope)
}
#if LANG_CXX11
inline void NetProto::set_out_envelope(::std::string&& value) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetProto.out_envelope)
}
#endif
inline void NetProto::set_out_envelope(const char* value) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.out_envelope)
}
inline void NetProto::set_out_envelope(const char* value, size_t size) {
  set_has_out_envelope();
  out_envelope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.out_envelope)
}
inline ::std::string* NetProto::mutable_out_envelope() {
  set_has_out_envelope();
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.out_envelope)
  return out_envelope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetProto::release_out_envelope() {
  // @@protoc_insertion_point(field_release:caffe.NetProto.out_envelope)
  clear_has_out_envelope();
  return out_envelope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetProto::set_allocated_out_envelope(::std::string* out_envelope) {
  if (out_envelope != NULL) {
    set_has_out_envelope();
  } else {
    clear_has_out_envelope();
  }
  out_envelope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_envelope);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetProto.out_envelope)
}

// required uint32 out_num = 5;
inline bool NetProto::has_out_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto::set_has_out_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto::clear_has_out_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto::clear_out_num() {
  out_num_ = 0u;
  clear_has_out_num();
}
inline ::google::protobuf::uint32 NetProto::out_num() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.out_num)
  return out_num_;
}
inline void NetProto::set_out_num(::google::protobuf::uint32 value) {
  set_has_out_num();
  out_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetProto.out_num)
}

// repeated string out = 6;
inline int NetProto::out_size() const {
  return out_.size();
}
inline void NetProto::clear_out() {
  out_.Clear();
}
inline const ::std::string& NetProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.out)
  return out_.Get(index);
}
inline ::std::string* NetProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetProto.out)
  return out_.Mutable(index);
}
inline void NetProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetProto.out)
  out_.Mutable(index)->assign(value);
}
inline void NetProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetProto.out)
}
inline void NetProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetProto.out)
}
inline ::std::string* NetProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetProto.out)
  return out_.Add();
}
inline void NetProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetProto.out)
}
inline void NetProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetProto.out)
}
inline void NetProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetProto.out)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.NetProto.out)
  return out_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetProto.out)
  return &out_;
}

// required bool forward_is_sender = 7 [default = true];
inline bool NetProto::has_forward_is_sender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto::set_has_forward_is_sender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto::clear_has_forward_is_sender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto::clear_forward_is_sender() {
  forward_is_sender_ = true;
  clear_has_forward_is_sender();
}
inline bool NetProto::forward_is_sender() const {
  // @@protoc_insertion_point(field_get:caffe.NetProto.forward_is_sender)
  return forward_is_sender_;
}
inline void NetProto::set_forward_is_sender(bool value) {
  set_has_forward_is_sender();
  forward_is_sender_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetProto.forward_is_sender)
}

// -------------------------------------------------------------------

// SplitProto

// required uint32 out_num = 1;
inline bool SplitProto::has_out_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitProto::set_has_out_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitProto::clear_has_out_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitProto::clear_out_num() {
  out_num_ = 0u;
  clear_has_out_num();
}
inline ::google::protobuf::uint32 SplitProto::out_num() const {
  // @@protoc_insertion_point(field_get:caffe.SplitProto.out_num)
  return out_num_;
}
inline void SplitProto::set_out_num(::google::protobuf::uint32 value) {
  set_has_out_num();
  out_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.SplitProto.out_num)
}

// required string in = 2;
inline bool SplitProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& SplitProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.SplitProto.in)
  return in_.GetNoArena();
}
inline void SplitProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SplitProto.in)
}
#if LANG_CXX11
inline void SplitProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SplitProto.in)
}
#endif
inline void SplitProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SplitProto.in)
}
inline void SplitProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SplitProto.in)
}
inline ::std::string* SplitProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.SplitProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SplitProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.SplitProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplitProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.SplitProto.in)
}

// repeated string out = 3;
inline int SplitProto::out_size() const {
  return out_.size();
}
inline void SplitProto::clear_out() {
  out_.Clear();
}
inline const ::std::string& SplitProto::out(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SplitProto.out)
  return out_.Get(index);
}
inline ::std::string* SplitProto::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SplitProto.out)
  return out_.Mutable(index);
}
inline void SplitProto::set_out(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SplitProto.out)
  out_.Mutable(index)->assign(value);
}
inline void SplitProto::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SplitProto.out)
}
inline void SplitProto::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SplitProto.out)
}
inline ::std::string* SplitProto::add_out() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SplitProto.out)
  return out_.Add();
}
inline void SplitProto::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SplitProto.out)
}
inline void SplitProto::add_out(const char* value) {
  out_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SplitProto.out)
}
inline void SplitProto::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SplitProto.out)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SplitProto::out() const {
  // @@protoc_insertion_point(field_list:caffe.SplitProto.out)
  return out_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SplitProto::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SplitProto.out)
  return &out_;
}

// -------------------------------------------------------------------

// ConcatProto

// required uint32 in_num = 1;
inline bool ConcatProto::has_in_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatProto::set_has_in_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatProto::clear_has_in_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatProto::clear_in_num() {
  in_num_ = 0u;
  clear_has_in_num();
}
inline ::google::protobuf::uint32 ConcatProto::in_num() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.in_num)
  return in_num_;
}
inline void ConcatProto::set_in_num(::google::protobuf::uint32 value) {
  set_has_in_num();
  in_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.in_num)
}

// repeated string in = 2;
inline int ConcatProto::in_size() const {
  return in_.size();
}
inline void ConcatProto::clear_in() {
  in_.Clear();
}
inline const ::std::string& ConcatProto::in(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.in)
  return in_.Get(index);
}
inline ::std::string* ConcatProto::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ConcatProto.in)
  return in_.Mutable(index);
}
inline void ConcatProto::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.in)
  in_.Mutable(index)->assign(value);
}
inline void ConcatProto::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ConcatProto.in)
}
inline void ConcatProto::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ConcatProto.in)
}
inline ::std::string* ConcatProto::add_in() {
  // @@protoc_insertion_point(field_add_mutable:caffe.ConcatProto.in)
  return in_.Add();
}
inline void ConcatProto::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.ConcatProto.in)
}
inline void ConcatProto::add_in(const char* value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.ConcatProto.in)
}
inline void ConcatProto::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.ConcatProto.in)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConcatProto::in() const {
  // @@protoc_insertion_point(field_list:caffe.ConcatProto.in)
  return in_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConcatProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConcatProto.in)
  return &in_;
}

// required string out = 3;
inline bool ConcatProto::has_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatProto::set_has_out() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& ConcatProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.out)
  return out_.GetNoArena();
}
inline void ConcatProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.out)
}
#if LANG_CXX11
inline void ConcatProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConcatProto.out)
}
#endif
inline void ConcatProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConcatProto.out)
}
inline void ConcatProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConcatProto.out)
}
inline ::std::string* ConcatProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.ConcatProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConcatProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.ConcatProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConcatProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConcatProto.out)
}

// required int32 axis = 4 [default = 1];
inline bool ConcatProto::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConcatProto::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConcatProto::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConcatProto::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatProto::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatProto.axis)
  return axis_;
}
inline void ConcatProto::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatProto.axis)
}

// -------------------------------------------------------------------

// ConvolutionProto

// optional uint32 num_output = 1;
inline bool ConvolutionProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionProto::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionProto::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.num_output)
  return num_output_;
}
inline void ConvolutionProto::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionProto::has_bias_term() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionProto::set_has_bias_term() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionProto::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionProto::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionProto::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.bias_term)
  return bias_term_;
}
inline void ConvolutionProto::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.bias_term)
}

// optional uint32 pad = 3 [default = 0];
inline bool ConvolutionProto::has_pad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionProto::set_has_pad() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionProto::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 ConvolutionProto::pad() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.pad)
  return pad_;
}
inline void ConvolutionProto::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionProto::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionProto::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionProto::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionProto::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionProto::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.pad_h)
  return pad_h_;
}
inline void ConvolutionProto::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionProto::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionProto::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionProto::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionProto::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionProto::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.pad_w)
  return pad_w_;
}
inline void ConvolutionProto::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.pad_w)
}

// optional uint32 kernel_size = 4;
inline bool ConvolutionProto::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionProto::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionProto::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionProto::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 ConvolutionProto::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.kernel_size)
  return kernel_size_;
}
inline void ConvolutionProto::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.kernel_size)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionProto::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionProto::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionProto::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionProto::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionProto::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.kernel_h)
  return kernel_h_;
}
inline void ConvolutionProto::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionProto::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionProto::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionProto::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionProto::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionProto::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.kernel_w)
  return kernel_w_;
}
inline void ConvolutionProto::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.kernel_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionProto::has_group() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionProto::set_has_group() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionProto::clear_has_group() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionProto::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionProto::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.group)
  return group_;
}
inline void ConvolutionProto::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.group)
}

// optional uint32 stride = 6 [default = 1];
inline bool ConvolutionProto::has_stride() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionProto::set_has_stride() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionProto::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 ConvolutionProto::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.stride)
  return stride_;
}
inline void ConvolutionProto::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.stride)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionProto::has_stride_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionProto::set_has_stride_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionProto::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionProto::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionProto::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.stride_h)
  return stride_h_;
}
inline void ConvolutionProto::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionProto::has_stride_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionProto::set_has_stride_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionProto::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionProto::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionProto::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.stride_w)
  return stride_w_;
}
inline void ConvolutionProto::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.stride_w)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionProto::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionProto::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionProto::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionProto::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionProto::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ConvolutionProto::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionProto::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionProto::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionProto::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionProto::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionProto::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionProto::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionProto::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ConvolutionProto::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionProto::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionProto::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.bias_filler)
}

// optional .caffe.ConvolutionProto.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionProto::has_engine() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionProto::set_has_engine() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionProto_Engine ConvolutionProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.engine)
  return static_cast< ::caffe::ConvolutionProto_Engine >(engine_);
}
inline void ConvolutionProto::set_engine(::caffe::ConvolutionProto_Engine value) {
  assert(::caffe::ConvolutionProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.engine)
}

// repeated .caffe.ParamSpec param = 100;
inline int ConvolutionProto::param_size() const {
  return param_.size();
}
inline void ConvolutionProto::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& ConvolutionProto::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* ConvolutionProto::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* ConvolutionProto::add_param() {
  // @@protoc_insertion_point(field_add:caffe.ConvolutionProto.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
ConvolutionProto::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionProto.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
ConvolutionProto::param() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionProto.param)
  return param_;
}

// required string in = 120;
inline bool ConvolutionProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& ConvolutionProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.in)
  return in_.GetNoArena();
}
inline void ConvolutionProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.in)
}
#if LANG_CXX11
inline void ConvolutionProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConvolutionProto.in)
}
#endif
inline void ConvolutionProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConvolutionProto.in)
}
inline void ConvolutionProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConvolutionProto.in)
}
inline ::std::string* ConvolutionProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvolutionProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvolutionProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.in)
}

// required string out = 121;
inline bool ConvolutionProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& ConvolutionProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionProto.out)
  return out_.GetNoArena();
}
inline void ConvolutionProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionProto.out)
}
#if LANG_CXX11
inline void ConvolutionProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConvolutionProto.out)
}
#endif
inline void ConvolutionProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConvolutionProto.out)
}
inline void ConvolutionProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConvolutionProto.out)
}
inline ::std::string* ConvolutionProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvolutionProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvolutionProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionProto.out)
}

// -------------------------------------------------------------------

// LoaderProto

// optional string source = 1;
inline bool LoaderProto::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoaderProto::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoaderProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoaderProto::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& LoaderProto::source() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.source)
  return source_.GetNoArena();
}
inline void LoaderProto::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.source)
}
#if LANG_CXX11
inline void LoaderProto::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoaderProto.source)
}
#endif
inline void LoaderProto::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoaderProto.source)
}
inline void LoaderProto::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoaderProto.source)
}
inline ::std::string* LoaderProto::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.LoaderProto.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoaderProto::release_source() {
  // @@protoc_insertion_point(field_release:caffe.LoaderProto.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoaderProto::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoaderProto.source)
}

// optional uint32 piece_size = 4;
inline bool LoaderProto::has_piece_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoaderProto::set_has_piece_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoaderProto::clear_has_piece_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoaderProto::clear_piece_size() {
  piece_size_ = 0u;
  clear_has_piece_size();
}
inline ::google::protobuf::uint32 LoaderProto::piece_size() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.piece_size)
  return piece_size_;
}
inline void LoaderProto::set_piece_size(::google::protobuf::uint32 value) {
  set_has_piece_size();
  piece_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.piece_size)
}

// required string data = 120;
inline bool LoaderProto::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoaderProto::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoaderProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoaderProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& LoaderProto::data() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.data)
  return data_.GetNoArena();
}
inline void LoaderProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.data)
}
#if LANG_CXX11
inline void LoaderProto::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoaderProto.data)
}
#endif
inline void LoaderProto::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoaderProto.data)
}
inline void LoaderProto::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoaderProto.data)
}
inline ::std::string* LoaderProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.LoaderProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoaderProto::release_data() {
  // @@protoc_insertion_point(field_release:caffe.LoaderProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoaderProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoaderProto.data)
}

// required string label = 121;
inline bool LoaderProto::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoaderProto::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoaderProto::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoaderProto::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& LoaderProto::label() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.label)
  return label_.GetNoArena();
}
inline void LoaderProto::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.label)
}
#if LANG_CXX11
inline void LoaderProto::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoaderProto.label)
}
#endif
inline void LoaderProto::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoaderProto.label)
}
inline void LoaderProto::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoaderProto.label)
}
inline ::std::string* LoaderProto::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:caffe.LoaderProto.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoaderProto::release_label() {
  // @@protoc_insertion_point(field_release:caffe.LoaderProto.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoaderProto::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoaderProto.label)
}

// required uint32 channel = 122;
inline bool LoaderProto::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoaderProto::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoaderProto::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoaderProto::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 LoaderProto::channel() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.channel)
  return channel_;
}
inline void LoaderProto::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.channel)
}

// required uint32 height = 123;
inline bool LoaderProto::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoaderProto::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoaderProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoaderProto::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 LoaderProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.height)
  return height_;
}
inline void LoaderProto::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.height)
}

// required uint32 width = 124;
inline bool LoaderProto::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoaderProto::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoaderProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoaderProto::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 LoaderProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.LoaderProto.width)
  return width_;
}
inline void LoaderProto::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.LoaderProto.width)
}

// -------------------------------------------------------------------

// InnerProductProto

// optional uint32 num_output = 1;
inline bool InnerProductProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductProto::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductProto::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.num_output)
  return num_output_;
}
inline void InnerProductProto::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductProto::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductProto::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductProto::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductProto::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductProto::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.bias_term)
  return bias_term_;
}
inline void InnerProductProto::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductProto::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductProto::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductProto::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductProto::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductProto::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InnerProductProto::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductProto::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductProto::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductProto::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductProto::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductProto::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductProto::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductProto::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InnerProductProto::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductProto::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductProto::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductProto::has_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerProductProto::set_has_axis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerProductProto::clear_has_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerProductProto::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductProto::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.axis)
  return axis_;
}
inline void InnerProductProto::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.axis)
}

// repeated .caffe.ParamSpec param = 100;
inline int InnerProductProto::param_size() const {
  return param_.size();
}
inline void InnerProductProto::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& InnerProductProto::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* InnerProductProto::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* InnerProductProto::add_param() {
  // @@protoc_insertion_point(field_add:caffe.InnerProductProto.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
InnerProductProto::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InnerProductProto.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
InnerProductProto::param() const {
  // @@protoc_insertion_point(field_list:caffe.InnerProductProto.param)
  return param_;
}

// required string in = 120;
inline bool InnerProductProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& InnerProductProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.in)
  return in_.GetNoArena();
}
inline void InnerProductProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.in)
}
#if LANG_CXX11
inline void InnerProductProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InnerProductProto.in)
}
#endif
inline void InnerProductProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InnerProductProto.in)
}
inline void InnerProductProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InnerProductProto.in)
}
inline ::std::string* InnerProductProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerProductProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerProductProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.in)
}

// required string out = 121;
inline bool InnerProductProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& InnerProductProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductProto.out)
  return out_.GetNoArena();
}
inline void InnerProductProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InnerProductProto.out)
}
#if LANG_CXX11
inline void InnerProductProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InnerProductProto.out)
}
#endif
inline void InnerProductProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InnerProductProto.out)
}
inline void InnerProductProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InnerProductProto.out)
}
inline ::std::string* InnerProductProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerProductProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerProductProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductProto.out)
}

// -------------------------------------------------------------------

// PoolingProto

// optional .caffe.PoolingProto.PoolMethod pool = 1 [default = MAX];
inline bool PoolingProto::has_pool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingProto::set_has_pool() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingProto::clear_has_pool() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingProto::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingProto_PoolMethod PoolingProto::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pool)
  return static_cast< ::caffe::PoolingProto_PoolMethod >(pool_);
}
inline void PoolingProto::set_pool(::caffe::PoolingProto_PoolMethod value) {
  assert(::caffe::PoolingProto_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingProto::has_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingProto::set_has_pad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingProto::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingProto::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pad)
  return pad_;
}
inline void PoolingProto::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingProto::has_pad_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingProto::set_has_pad_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingProto::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingProto::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingProto::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pad_h)
  return pad_h_;
}
inline void PoolingProto::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingProto::has_pad_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingProto::set_has_pad_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingProto::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingProto::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingProto::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.pad_w)
  return pad_w_;
}
inline void PoolingProto::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingProto::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingProto::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingProto::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingProto::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingProto::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.kernel_size)
  return kernel_size_;
}
inline void PoolingProto::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingProto::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingProto::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingProto::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingProto::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingProto::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.kernel_h)
  return kernel_h_;
}
inline void PoolingProto::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingProto::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingProto::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingProto::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingProto::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingProto::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.kernel_w)
  return kernel_w_;
}
inline void PoolingProto::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingProto::has_stride() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PoolingProto::set_has_stride() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PoolingProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PoolingProto::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingProto::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.stride)
  return stride_;
}
inline void PoolingProto::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingProto::has_stride_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingProto::set_has_stride_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingProto::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingProto::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingProto::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.stride_h)
  return stride_h_;
}
inline void PoolingProto::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingProto::has_stride_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingProto::set_has_stride_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingProto::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingProto::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingProto::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.stride_w)
  return stride_w_;
}
inline void PoolingProto::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.stride_w)
}

// optional .caffe.PoolingProto.Engine engine = 11 [default = DEFAULT];
inline bool PoolingProto::has_engine() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingProto::set_has_engine() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingProto_Engine PoolingProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.engine)
  return static_cast< ::caffe::PoolingProto_Engine >(engine_);
}
inline void PoolingProto::set_engine(::caffe::PoolingProto_Engine value) {
  assert(::caffe::PoolingProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingProto::has_global_pooling() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PoolingProto::set_has_global_pooling() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PoolingProto::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PoolingProto::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingProto::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.global_pooling)
  return global_pooling_;
}
inline void PoolingProto::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.global_pooling)
}

// required string in = 120;
inline bool PoolingProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& PoolingProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.in)
  return in_.GetNoArena();
}
inline void PoolingProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.in)
}
#if LANG_CXX11
inline void PoolingProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PoolingProto.in)
}
#endif
inline void PoolingProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoolingProto.in)
}
inline void PoolingProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoolingProto.in)
}
inline ::std::string* PoolingProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.PoolingProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoolingProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.PoolingProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoolingProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoolingProto.in)
}

// required string out = 121;
inline bool PoolingProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& PoolingProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingProto.out)
  return out_.GetNoArena();
}
inline void PoolingProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoolingProto.out)
}
#if LANG_CXX11
inline void PoolingProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PoolingProto.out)
}
#endif
inline void PoolingProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoolingProto.out)
}
inline void PoolingProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoolingProto.out)
}
inline ::std::string* PoolingProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.PoolingProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoolingProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.PoolingProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoolingProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoolingProto.out)
}

// -------------------------------------------------------------------

// ReLUProto

// optional float negative_slope = 1 [default = 0];
inline bool ReLUProto::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReLUProto::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReLUProto::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReLUProto::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUProto::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.negative_slope)
  return negative_slope_;
}
inline void ReLUProto::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.negative_slope)
}

// optional .caffe.ReLUProto.Engine engine = 2 [default = DEFAULT];
inline bool ReLUProto::has_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReLUProto::set_has_engine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReLUProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReLUProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUProto_Engine ReLUProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.engine)
  return static_cast< ::caffe::ReLUProto_Engine >(engine_);
}
inline void ReLUProto::set_engine(::caffe::ReLUProto_Engine value) {
  assert(::caffe::ReLUProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.engine)
}

// required string in = 120;
inline bool ReLUProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& ReLUProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.in)
  return in_.GetNoArena();
}
inline void ReLUProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.in)
}
#if LANG_CXX11
inline void ReLUProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ReLUProto.in)
}
#endif
inline void ReLUProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReLUProto.in)
}
inline void ReLUProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReLUProto.in)
}
inline ::std::string* ReLUProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.ReLUProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReLUProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.ReLUProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReLUProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReLUProto.in)
}

// required string out = 121;
inline bool ReLUProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& ReLUProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUProto.out)
  return out_.GetNoArena();
}
inline void ReLUProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReLUProto.out)
}
#if LANG_CXX11
inline void ReLUProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ReLUProto.out)
}
#endif
inline void ReLUProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReLUProto.out)
}
inline void ReLUProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReLUProto.out)
}
inline ::std::string* ReLUProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.ReLUProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReLUProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.ReLUProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReLUProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReLUProto.out)
}

// -------------------------------------------------------------------

// LRNProto

// optional uint32 local_size = 1 [default = 5];
inline bool LRNProto::has_local_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNProto::set_has_local_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNProto::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNProto::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNProto::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.local_size)
  return local_size_;
}
inline void LRNProto::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNProto::has_alpha() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNProto::set_has_alpha() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNProto::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNProto::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNProto::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.alpha)
  return alpha_;
}
inline void LRNProto::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNProto::has_beta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LRNProto::set_has_beta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LRNProto::clear_has_beta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LRNProto::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNProto::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.beta)
  return beta_;
}
inline void LRNProto::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.beta)
}

// optional .caffe.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNProto::has_norm_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNProto::set_has_norm_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNProto::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNProto::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNProto_NormRegion LRNProto::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.norm_region)
  return static_cast< ::caffe::LRNProto_NormRegion >(norm_region_);
}
inline void LRNProto::set_norm_region(::caffe::LRNProto_NormRegion value) {
  assert(::caffe::LRNProto_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNProto::has_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LRNProto::set_has_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LRNProto::clear_has_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LRNProto::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNProto::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.k)
  return k_;
}
inline void LRNProto::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.k)
}

// optional .caffe.LRNProto.Engine engine = 6 [default = DEFAULT];
inline bool LRNProto::has_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNProto::set_has_engine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNProto_Engine LRNProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.engine)
  return static_cast< ::caffe::LRNProto_Engine >(engine_);
}
inline void LRNProto::set_engine(::caffe::LRNProto_Engine value) {
  assert(::caffe::LRNProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNProto.engine)
}

// required string in = 120;
inline bool LRNProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& LRNProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.in)
  return in_.GetNoArena();
}
inline void LRNProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LRNProto.in)
}
#if LANG_CXX11
inline void LRNProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LRNProto.in)
}
#endif
inline void LRNProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LRNProto.in)
}
inline void LRNProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LRNProto.in)
}
inline ::std::string* LRNProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.LRNProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRNProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.LRNProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRNProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.LRNProto.in)
}

// required string out = 121;
inline bool LRNProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& LRNProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.LRNProto.out)
  return out_.GetNoArena();
}
inline void LRNProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LRNProto.out)
}
#if LANG_CXX11
inline void LRNProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LRNProto.out)
}
#endif
inline void LRNProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LRNProto.out)
}
inline void LRNProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LRNProto.out)
}
inline ::std::string* LRNProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.LRNProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRNProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.LRNProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRNProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.LRNProto.out)
}

// -------------------------------------------------------------------

// SigmoidProto

// optional .caffe.SigmoidProto.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidProto::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SigmoidProto::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SigmoidProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SigmoidProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidProto_Engine SigmoidProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidProto.engine)
  return static_cast< ::caffe::SigmoidProto_Engine >(engine_);
}
inline void SigmoidProto::set_engine(::caffe::SigmoidProto_Engine value) {
  assert(::caffe::SigmoidProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidProto.engine)
}

// required string in = 120;
inline bool SigmoidProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& SigmoidProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidProto.in)
  return in_.GetNoArena();
}
inline void SigmoidProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SigmoidProto.in)
}
#if LANG_CXX11
inline void SigmoidProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SigmoidProto.in)
}
#endif
inline void SigmoidProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SigmoidProto.in)
}
inline void SigmoidProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SigmoidProto.in)
}
inline ::std::string* SigmoidProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.SigmoidProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SigmoidProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.SigmoidProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigmoidProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.SigmoidProto.in)
}

// required string out = 121;
inline bool SigmoidProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SigmoidProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SigmoidProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SigmoidProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& SigmoidProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidProto.out)
  return out_.GetNoArena();
}
inline void SigmoidProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SigmoidProto.out)
}
#if LANG_CXX11
inline void SigmoidProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SigmoidProto.out)
}
#endif
inline void SigmoidProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SigmoidProto.out)
}
inline void SigmoidProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SigmoidProto.out)
}
inline ::std::string* SigmoidProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.SigmoidProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SigmoidProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.SigmoidProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigmoidProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.SigmoidProto.out)
}

// -------------------------------------------------------------------

// SoftmaxProto

// optional .caffe.SoftmaxProto.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxProto::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoftmaxProto::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoftmaxProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoftmaxProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxProto_Engine SoftmaxProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.engine)
  return static_cast< ::caffe::SoftmaxProto_Engine >(engine_);
}
inline void SoftmaxProto::set_engine(::caffe::SoftmaxProto_Engine value) {
  assert(::caffe::SoftmaxProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxProto::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoftmaxProto::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoftmaxProto::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoftmaxProto::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxProto::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.axis)
  return axis_;
}
inline void SoftmaxProto::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.axis)
}

// required string in = 120;
inline bool SoftmaxProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& SoftmaxProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.in)
  return in_.GetNoArena();
}
inline void SoftmaxProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.in)
}
#if LANG_CXX11
inline void SoftmaxProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SoftmaxProto.in)
}
#endif
inline void SoftmaxProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxProto.in)
}
inline void SoftmaxProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxProto.in)
}
inline ::std::string* SoftmaxProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftmaxProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftmaxProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxProto.in)
}

// required string out = 121;
inline bool SoftmaxProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& SoftmaxProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxProto.out)
  return out_.GetNoArena();
}
inline void SoftmaxProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxProto.out)
}
#if LANG_CXX11
inline void SoftmaxProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SoftmaxProto.out)
}
#endif
inline void SoftmaxProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxProto.out)
}
inline void SoftmaxProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxProto.out)
}
inline ::std::string* SoftmaxProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftmaxProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftmaxProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxProto.out)
}

// -------------------------------------------------------------------

// StoreProto

// optional .caffe.StoreProto.Engine engine = 1 [default = DEFAULT];
inline bool StoreProto::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreProto::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreProto::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreProto::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::StoreProto_Engine StoreProto::engine() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.engine)
  return static_cast< ::caffe::StoreProto_Engine >(engine_);
}
inline void StoreProto::set_engine(::caffe::StoreProto_Engine value) {
  assert(::caffe::StoreProto_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.StoreProto.engine)
}

// required string in = 120;
inline bool StoreProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& StoreProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.in)
  return in_.GetNoArena();
}
inline void StoreProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.in)
}
#if LANG_CXX11
inline void StoreProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.StoreProto.in)
}
#endif
inline void StoreProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.StoreProto.in)
}
inline void StoreProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.StoreProto.in)
}
inline ::std::string* StoreProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.StoreProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.StoreProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.StoreProto.in)
}

// required string out = 121;
inline bool StoreProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& StoreProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.out)
  return out_.GetNoArena();
}
inline void StoreProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.out)
}
#if LANG_CXX11
inline void StoreProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.StoreProto.out)
}
#endif
inline void StoreProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.StoreProto.out)
}
inline void StoreProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.StoreProto.out)
}
inline ::std::string* StoreProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.StoreProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.StoreProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.StoreProto.out)
}

// required bool stop = 122 [default = false];
inline bool StoreProto::has_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreProto::set_has_stop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreProto::clear_has_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreProto::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
inline bool StoreProto::stop() const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.stop)
  return stop_;
}
inline void StoreProto::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
  // @@protoc_insertion_point(field_set:caffe.StoreProto.stop)
}

// repeated string store_layer_names = 124;
inline int StoreProto::store_layer_names_size() const {
  return store_layer_names_.size();
}
inline void StoreProto::clear_store_layer_names() {
  store_layer_names_.Clear();
}
inline const ::std::string& StoreProto::store_layer_names(int index) const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.store_layer_names)
  return store_layer_names_.Get(index);
}
inline ::std::string* StoreProto::mutable_store_layer_names(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.StoreProto.store_layer_names)
  return store_layer_names_.Mutable(index);
}
inline void StoreProto::set_store_layer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.StoreProto.store_layer_names)
  store_layer_names_.Mutable(index)->assign(value);
}
inline void StoreProto::set_store_layer_names(int index, const char* value) {
  store_layer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.StoreProto.store_layer_names)
}
inline void StoreProto::set_store_layer_names(int index, const char* value, size_t size) {
  store_layer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.StoreProto.store_layer_names)
}
inline ::std::string* StoreProto::add_store_layer_names() {
  // @@protoc_insertion_point(field_add_mutable:caffe.StoreProto.store_layer_names)
  return store_layer_names_.Add();
}
inline void StoreProto::add_store_layer_names(const ::std::string& value) {
  store_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.StoreProto.store_layer_names)
}
inline void StoreProto::add_store_layer_names(const char* value) {
  store_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.StoreProto.store_layer_names)
}
inline void StoreProto::add_store_layer_names(const char* value, size_t size) {
  store_layer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.StoreProto.store_layer_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StoreProto::store_layer_names() const {
  // @@protoc_insertion_point(field_list:caffe.StoreProto.store_layer_names)
  return store_layer_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StoreProto::mutable_store_layer_names() {
  // @@protoc_insertion_point(field_mutable_list:caffe.StoreProto.store_layer_names)
  return &store_layer_names_;
}

// repeated int64 store_layer_shapes = 125;
inline int StoreProto::store_layer_shapes_size() const {
  return store_layer_shapes_.size();
}
inline void StoreProto::clear_store_layer_shapes() {
  store_layer_shapes_.Clear();
}
inline ::google::protobuf::int64 StoreProto::store_layer_shapes(int index) const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.store_layer_shapes)
  return store_layer_shapes_.Get(index);
}
inline void StoreProto::set_store_layer_shapes(int index, ::google::protobuf::int64 value) {
  store_layer_shapes_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.store_layer_shapes)
}
inline void StoreProto::add_store_layer_shapes(::google::protobuf::int64 value) {
  store_layer_shapes_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.StoreProto.store_layer_shapes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
StoreProto::store_layer_shapes() const {
  // @@protoc_insertion_point(field_list:caffe.StoreProto.store_layer_shapes)
  return store_layer_shapes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
StoreProto::mutable_store_layer_shapes() {
  // @@protoc_insertion_point(field_mutable_list:caffe.StoreProto.store_layer_shapes)
  return &store_layer_shapes_;
}

// repeated int64 layer_seek_pos = 126;
inline int StoreProto::layer_seek_pos_size() const {
  return layer_seek_pos_.size();
}
inline void StoreProto::clear_layer_seek_pos() {
  layer_seek_pos_.Clear();
}
inline ::google::protobuf::int64 StoreProto::layer_seek_pos(int index) const {
  // @@protoc_insertion_point(field_get:caffe.StoreProto.layer_seek_pos)
  return layer_seek_pos_.Get(index);
}
inline void StoreProto::set_layer_seek_pos(int index, ::google::protobuf::int64 value) {
  layer_seek_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.StoreProto.layer_seek_pos)
}
inline void StoreProto::add_layer_seek_pos(::google::protobuf::int64 value) {
  layer_seek_pos_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.StoreProto.layer_seek_pos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
StoreProto::layer_seek_pos() const {
  // @@protoc_insertion_point(field_list:caffe.StoreProto.layer_seek_pos)
  return layer_seek_pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
StoreProto::mutable_layer_seek_pos() {
  // @@protoc_insertion_point(field_mutable_list:caffe.StoreProto.layer_seek_pos)
  return &layer_seek_pos_;
}

// -------------------------------------------------------------------

// PlaceholderProto

// required string in = 100;
inline bool PlaceholderProto::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceholderProto::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceholderProto::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceholderProto::clear_in() {
  in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_in();
}
inline const ::std::string& PlaceholderProto::in() const {
  // @@protoc_insertion_point(field_get:caffe.PlaceholderProto.in)
  return in_.GetNoArena();
}
inline void PlaceholderProto::set_in(const ::std::string& value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PlaceholderProto.in)
}
#if LANG_CXX11
inline void PlaceholderProto::set_in(::std::string&& value) {
  set_has_in();
  in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PlaceholderProto.in)
}
#endif
inline void PlaceholderProto::set_in(const char* value) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PlaceholderProto.in)
}
inline void PlaceholderProto::set_in(const char* value, size_t size) {
  set_has_in();
  in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PlaceholderProto.in)
}
inline ::std::string* PlaceholderProto::mutable_in() {
  set_has_in();
  // @@protoc_insertion_point(field_mutable:caffe.PlaceholderProto.in)
  return in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceholderProto::release_in() {
  // @@protoc_insertion_point(field_release:caffe.PlaceholderProto.in)
  clear_has_in();
  return in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceholderProto::set_allocated_in(::std::string* in) {
  if (in != NULL) {
    set_has_in();
  } else {
    clear_has_in();
  }
  in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in);
  // @@protoc_insertion_point(field_set_allocated:caffe.PlaceholderProto.in)
}

// required string out = 101;
inline bool PlaceholderProto::has_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaceholderProto::set_has_out() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaceholderProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaceholderProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& PlaceholderProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.PlaceholderProto.out)
  return out_.GetNoArena();
}
inline void PlaceholderProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PlaceholderProto.out)
}
#if LANG_CXX11
inline void PlaceholderProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PlaceholderProto.out)
}
#endif
inline void PlaceholderProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PlaceholderProto.out)
}
inline void PlaceholderProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PlaceholderProto.out)
}
inline ::std::string* PlaceholderProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.PlaceholderProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceholderProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.PlaceholderProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceholderProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.PlaceholderProto.out)
}

// -------------------------------------------------------------------

// LoadPartialModelProto

// required string out = 1;
inline bool LoadPartialModelProto::has_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadPartialModelProto::set_has_out() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadPartialModelProto::clear_has_out() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadPartialModelProto::clear_out() {
  out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_out();
}
inline const ::std::string& LoadPartialModelProto::out() const {
  // @@protoc_insertion_point(field_get:caffe.LoadPartialModelProto.out)
  return out_.GetNoArena();
}
inline void LoadPartialModelProto::set_out(const ::std::string& value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LoadPartialModelProto.out)
}
#if LANG_CXX11
inline void LoadPartialModelProto::set_out(::std::string&& value) {
  set_has_out();
  out_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LoadPartialModelProto.out)
}
#endif
inline void LoadPartialModelProto::set_out(const char* value) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LoadPartialModelProto.out)
}
inline void LoadPartialModelProto::set_out(const char* value, size_t size) {
  set_has_out();
  out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LoadPartialModelProto.out)
}
inline ::std::string* LoadPartialModelProto::mutable_out() {
  set_has_out();
  // @@protoc_insertion_point(field_mutable:caffe.LoadPartialModelProto.out)
  return out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadPartialModelProto::release_out() {
  // @@protoc_insertion_point(field_release:caffe.LoadPartialModelProto.out)
  clear_has_out();
  return out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPartialModelProto::set_allocated_out(::std::string* out) {
  if (out != NULL) {
    set_has_out();
  } else {
    clear_has_out();
  }
  out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out);
  // @@protoc_insertion_point(field_set_allocated:caffe.LoadPartialModelProto.out)
}

// repeated string load_layer_names = 124;
inline int LoadPartialModelProto::load_layer_names_size() const {
  return load_layer_names_.size();
}
inline void LoadPartialModelProto::clear_load_layer_names() {
  load_layer_names_.Clear();
}
inline const ::std::string& LoadPartialModelProto::load_layer_names(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_.Get(index);
}
inline ::std::string* LoadPartialModelProto::mutable_load_layer_names(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_.Mutable(index);
}
inline void LoadPartialModelProto::set_load_layer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LoadPartialModelProto.load_layer_names)
  load_layer_names_.Mutable(index)->assign(value);
}
inline void LoadPartialModelProto::set_load_layer_names(int index, const char* value) {
  load_layer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LoadPartialModelProto.load_layer_names)
}
inline void LoadPartialModelProto::set_load_layer_names(int index, const char* value, size_t size) {
  load_layer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LoadPartialModelProto.load_layer_names)
}
inline ::std::string* LoadPartialModelProto::add_load_layer_names() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_.Add();
}
inline void LoadPartialModelProto::add_load_layer_names(const ::std::string& value) {
  load_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LoadPartialModelProto.load_layer_names)
}
inline void LoadPartialModelProto::add_load_layer_names(const char* value) {
  load_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LoadPartialModelProto.load_layer_names)
}
inline void LoadPartialModelProto::add_load_layer_names(const char* value, size_t size) {
  load_layer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LoadPartialModelProto.load_layer_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoadPartialModelProto::load_layer_names() const {
  // @@protoc_insertion_point(field_list:caffe.LoadPartialModelProto.load_layer_names)
  return load_layer_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoadPartialModelProto::mutable_load_layer_names() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LoadPartialModelProto.load_layer_names)
  return &load_layer_names_;
}

// repeated int64 load_layer_shapes = 125;
inline int LoadPartialModelProto::load_layer_shapes_size() const {
  return load_layer_shapes_.size();
}
inline void LoadPartialModelProto::clear_load_layer_shapes() {
  load_layer_shapes_.Clear();
}
inline ::google::protobuf::int64 LoadPartialModelProto::load_layer_shapes(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LoadPartialModelProto.load_layer_shapes)
  return load_layer_shapes_.Get(index);
}
inline void LoadPartialModelProto::set_load_layer_shapes(int index, ::google::protobuf::int64 value) {
  load_layer_shapes_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LoadPartialModelProto.load_layer_shapes)
}
inline void LoadPartialModelProto::add_load_layer_shapes(::google::protobuf::int64 value) {
  load_layer_shapes_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LoadPartialModelProto.load_layer_shapes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LoadPartialModelProto::load_layer_shapes() const {
  // @@protoc_insertion_point(field_list:caffe.LoadPartialModelProto.load_layer_shapes)
  return load_layer_shapes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LoadPartialModelProto::mutable_load_layer_shapes() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LoadPartialModelProto.load_layer_shapes)
  return &load_layer_shapes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace caffe

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::BlobProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BlobProto_DataType>() {
  return ::caffe::BlobProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverProto_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverProto_SolverMode>() {
  return ::caffe::SolverProto_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverProto_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverProto_SolverType>() {
  return ::caffe::SolverProto_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionProto_Engine>() {
  return ::caffe::ConvolutionProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingProto_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingProto_PoolMethod>() {
  return ::caffe::PoolingProto_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingProto_Engine>() {
  return ::caffe::PoolingProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUProto_Engine>() {
  return ::caffe::ReLUProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNProto_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNProto_NormRegion>() {
  return ::caffe::LRNProto_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNProto_Engine>() {
  return ::caffe::LRNProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidProto_Engine>() {
  return ::caffe::SigmoidProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxProto_Engine>() {
  return ::caffe::SoftmaxProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::StoreProto_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::StoreProto_Engine>() {
  return ::caffe::StoreProto_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParallelPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParallelPolicy>() {
  return ::caffe::ParallelPolicy_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}
template <> struct is_proto_enum< ::caffe::CopyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::CopyType>() {
  return ::caffe::CopyType_descriptor();
}
template <> struct is_proto_enum< ::caffe::BoxingOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BoxingOp>() {
  return ::caffe::BoxingOp_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
