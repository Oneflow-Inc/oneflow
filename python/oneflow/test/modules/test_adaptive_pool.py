"""
Copyright 2020 The OneFlow Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import unittest
from collections import OrderedDict

import numpy as np
from test_util import GenArgList

import oneflow as flow
import oneflow.unittest


def _test_adaptive_avgpool1d_forward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        0.05580734834074974,
                        -0.6875145435333252,
                        -1.654430866241455,
                        -0.6225992441177368,
                        0.10183599591255188,
                        0.05019790679216385,
                        -1.2537643909454346,
                        0.14907236397266388,
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
    )
    m = flow.nn.AdaptiveAvgPool1d(4)
    m.to(device)
    of_out_1 = m(input)
    of_out_2 = flow.adaptive_avg_pool1d(input, 4)
    np_out = np.array(
        [
            [
                [
                    -0.3158535957336426,
                    -1.1385149955749512,
                    0.07601694762706757,
                    -0.5523459911346436,
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(of_out_1.numpy(), np_out, 1e-05, 1e-05))
    test_case.assertTrue(np.allclose(of_out_2.numpy(), np_out, 1e-05, 1e-05))


def _test_adaptive_avgpool1d_backward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        0.05580734834074974,
                        -0.6875145435333252,
                        -1.654430866241455,
                        -0.6225992441177368,
                        0.10183599591255188,
                        0.05019790679216385,
                        -1.2537643909454346,
                        0.14907236397266388,
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
        requires_grad=True,
    )
    m = flow.nn.AdaptiveAvgPool1d(4)
    of_out = m(input)
    of_out = of_out.sum()
    of_out.backward()
    np_grad = np.array([[[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]])
    test_case.assertTrue(np.allclose(input.grad.numpy(), np_grad, 1e-05, 1e-05))


@unittest.skipIf(
    not flow.unittest.env.eager_execution_enabled(),
    ".numpy() doesn't work in lazy mode",
)
def _test_adaptive_avgpool2d_forward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [
                            0.10039155930280685,
                            0.04879157617688179,
                            -1.0515470504760742,
                            0.9466001987457275,
                        ],
                        [
                            0.45375481247901917,
                            0.23611211776733398,
                            1.343685269355774,
                            0.3979687988758087,
                        ],
                        [
                            0.05580734834074974,
                            -0.6875145435333252,
                            -1.654430866241455,
                            -0.6225992441177368,
                        ],
                        [
                            0.10183599591255188,
                            0.05019790679216385,
                            -1.2537643909454346,
                            0.14907236397266388,
                        ],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
    )
    m = flow.nn.AdaptiveAvgPool2d((2, 2))
    m.to(device)
    of_out_1 = m(input)
    of_out_2 = flow.adaptive_avg_pool2d(input, (2, 2))
    np_out = np.array(
        [
            [
                [
                    [0.20976251363754272, 0.4091767966747284],
                    [-0.1199183315038681, -0.8454304933547974],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(of_out_1.numpy(), np_out, 1e-05, 1e-05))
    test_case.assertTrue(np.allclose(of_out_2.numpy(), np_out, 1e-05, 1e-05))


def _test_adaptive_avgpool2d_backward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [
                            0.10039155930280685,
                            0.04879157617688179,
                            -1.0515470504760742,
                            0.9466001987457275,
                        ],
                        [
                            0.45375481247901917,
                            0.23611211776733398,
                            1.343685269355774,
                            0.3979687988758087,
                        ],
                        [
                            0.05580734834074974,
                            -0.6875145435333252,
                            -1.654430866241455,
                            -0.6225992441177368,
                        ],
                        [
                            0.10183599591255188,
                            0.05019790679216385,
                            -1.2537643909454346,
                            0.14907236397266388,
                        ],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
        requires_grad=True,
    )
    m = flow.nn.AdaptiveAvgPool2d((2, 2))
    of_out = m(input)
    of_out = of_out.sum()
    of_out.backward()
    np_grad = np.array(
        [
            [
                [
                    [0.25, 0.25, 0.25, 0.25],
                    [0.25, 0.25, 0.25, 0.25],
                    [0.25, 0.25, 0.25, 0.25],
                    [0.25, 0.25, 0.25, 0.25],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(input.grad.numpy(), np_grad, 1e-05, 1e-05))


def _test_adaptive_avgpool2d_hw_forward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [0.28242185711860657, -0.7742040753364563, -0.5439430475234985],
                        [-0.1706847995519638, 0.0430854931473732, 0.34247592091560364],
                        [-1.036131501197815, -1.033642292022705, 0.3455536365509033],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
    )
    m = flow.nn.AdaptiveAvgPool2d((1, 2))
    m.to(device)
    of_out = m(input)
    np_out = np.array([[[[-0.4481925666332245, -0.27011242508888245]]]])
    test_case.assertTrue(np.allclose(of_out.numpy(), np_out, 1e-05, 1e-05))


def _test_adaptive_avgpool2d_hw_backward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [0.28242185711860657, -0.7742040753364563, -0.5439430475234985],
                        [-0.1706847995519638, 0.0430854931473732, 0.34247592091560364],
                        [-1.036131501197815, -1.033642292022705, 0.3455536365509033],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
        requires_grad=True,
    )
    m = flow.nn.AdaptiveAvgPool2d((1, 2))
    of_out = m(input)
    of_out = of_out.sum()
    of_out.backward()
    np_grad = np.array(
        [
            [
                [
                    [0.1666666716337204, 0.3333333432674408, 0.1666666716337204],
                    [0.1666666716337204, 0.3333333432674408, 0.1666666716337204],
                    [0.1666666716337204, 0.3333333432674408, 0.1666666716337204],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(input.grad.numpy(), np_grad, 1e-05, 1e-05))


def _test_adaptive_avgpool3d_forward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [
                            [
                                -1.077571799600885,
                                -0.7804538890365837,
                                -1.2627538752119443,
                                0.9993507145120477,
                            ],
                            [
                                2.0222532489157516,
                                1.103451377699465,
                                -0.4377324754879578,
                                1.890491810587517,
                            ],
                            [
                                -0.5593861899064654,
                                -0.4949520241526519,
                                -0.18536721363519787,
                                -0.6098969866775772,
                            ],
                            [
                                -1.6536215260171816,
                                -1.0392583540436786,
                                0.3686776597613967,
                                -0.5356882834951805,
                            ],
                        ],
                        [
                            [
                                -1.2617900664449953,
                                -1.4390921091631532,
                                0.20654399652431357,
                                0.8186472101906713,
                            ],
                            [
                                -0.3033378863400014,
                                -0.8173269764076293,
                                -0.3767515097625614,
                                -0.11021655039337777,
                            ],
                            [
                                -0.22977043608192885,
                                1.2717196366649905,
                                -0.4790851297878291,
                                -1.4495369404727856,
                            ],
                            [
                                -1.2802093286977783,
                                -0.11184514806663474,
                                1.7022167087210984,
                                -1.7354837287725355,
                            ],
                        ],
                        [
                            [
                                2.4706497991773606,
                                -0.6549702631973298,
                                -0.9318107079571676,
                                1.4652904271682428,
                            ],
                            [
                                1.1419864234341397,
                                1.389909081086008,
                                0.9657841900525568,
                                -0.8563114264976619,
                            ],
                            [
                                0.19515087084250754,
                                -0.37808457398571094,
                                0.2938625398496183,
                                0.9279930510353327,
                            ],
                            [
                                -0.9374118277994007,
                                0.3341831730452431,
                                -0.2792542765303833,
                                0.38029090707066726,
                            ],
                        ],
                        [
                            [
                                0.5918686659736041,
                                -0.7870631089938902,
                                -0.9534344874245392,
                                0.31341612954718795,
                            ],
                            [
                                0.7509029444145228,
                                -0.9299288398562323,
                                -0.7343054052782476,
                                -0.8806481590696694,
                            ],
                            [
                                -0.4707853016353985,
                                0.12253641652645629,
                                0.5088022039832846,
                                0.520391789327562,
                            ],
                            [
                                -0.0861300651163632,
                                0.30291348404866386,
                                -0.6268565873680123,
                                -0.27469204305759976,
                            ],
                        ],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
    )
    m = flow.nn.AdaptiveAvgPool3d((2, 2, 2))
    m.to(device)
    of_out_1 = m(input)
    of_out_2 = flow.adaptive_avg_pool3d(input, (2, 2, 2))
    np_out = np.array(
        [
            [
                [
                    [
                        [-0.3192335125472539, 0.2159474151198386],
                        [-0.5121654212876662, -0.3655204892948264],
                    ],
                    [
                        [0.4966693377547728, -0.2015024299324123],
                        [-0.11470347800925032, 0.18131719803880864],
                    ],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(of_out_1.numpy(), np_out, 1e-05, 1e-05))
    test_case.assertTrue(np.allclose(of_out_2.numpy(), np_out, 1e-05, 1e-05))


def _test_adaptive_avgpool3d_backward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [
                            [
                                -1.077571799600885,
                                -0.7804538890365837,
                                -1.2627538752119443,
                                0.9993507145120477,
                            ],
                            [
                                2.0222532489157516,
                                1.103451377699465,
                                -0.4377324754879578,
                                1.890491810587517,
                            ],
                            [
                                -0.5593861899064654,
                                -0.4949520241526519,
                                -0.18536721363519787,
                                -0.6098969866775772,
                            ],
                            [
                                -1.6536215260171816,
                                -1.0392583540436786,
                                0.3686776597613967,
                                -0.5356882834951805,
                            ],
                        ],
                        [
                            [
                                -1.2617900664449953,
                                -1.4390921091631532,
                                0.20654399652431357,
                                0.8186472101906713,
                            ],
                            [
                                -0.3033378863400014,
                                -0.8173269764076293,
                                -0.3767515097625614,
                                -0.11021655039337777,
                            ],
                            [
                                -0.22977043608192885,
                                1.2717196366649905,
                                -0.4790851297878291,
                                -1.4495369404727856,
                            ],
                            [
                                -1.2802093286977783,
                                -0.11184514806663474,
                                1.7022167087210984,
                                -1.7354837287725355,
                            ],
                        ],
                        [
                            [
                                2.4706497991773606,
                                -0.6549702631973298,
                                -0.9318107079571676,
                                1.4652904271682428,
                            ],
                            [
                                1.1419864234341397,
                                1.389909081086008,
                                0.9657841900525568,
                                -0.8563114264976619,
                            ],
                            [
                                0.19515087084250754,
                                -0.37808457398571094,
                                0.2938625398496183,
                                0.9279930510353327,
                            ],
                            [
                                -0.9374118277994007,
                                0.3341831730452431,
                                -0.2792542765303833,
                                0.38029090707066726,
                            ],
                        ],
                        [
                            [
                                0.5918686659736041,
                                -0.7870631089938902,
                                -0.9534344874245392,
                                0.31341612954718795,
                            ],
                            [
                                0.7509029444145228,
                                -0.9299288398562323,
                                -0.7343054052782476,
                                -0.8806481590696694,
                            ],
                            [
                                -0.4707853016353985,
                                0.12253641652645629,
                                0.5088022039832846,
                                0.520391789327562,
                            ],
                            [
                                -0.0861300651163632,
                                0.30291348404866386,
                                -0.6268565873680123,
                                -0.27469204305759976,
                            ],
                        ],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
        requires_grad=True,
    )
    m = flow.nn.AdaptiveAvgPool3d((2, 2, 2))
    of_out = m(input)
    of_out = of_out.sum()
    of_out.backward()
    np_grad = np.array(
        [
            [
                [
                    [
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                    ],
                    [
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                    ],
                    [
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                    ],
                    [
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                        [0.125, 0.125, 0.125, 0.125],
                    ],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(input.grad.numpy(), np_grad, 1e-05, 1e-05))


def _test_adaptive_avgpool3d_dhw_forward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [
                            [
                                -1.077571799600885,
                                -0.7804538890365837,
                                -1.2627538752119443,
                                0.9993507145120477,
                            ],
                            [
                                2.0222532489157516,
                                1.103451377699465,
                                -0.4377324754879578,
                                1.890491810587517,
                            ],
                            [
                                -0.5593861899064654,
                                -0.4949520241526519,
                                -0.18536721363519787,
                                -0.6098969866775772,
                            ],
                            [
                                -1.6536215260171816,
                                -1.0392583540436786,
                                0.3686776597613967,
                                -0.5356882834951805,
                            ],
                        ],
                        [
                            [
                                -1.2617900664449953,
                                -1.4390921091631532,
                                0.20654399652431357,
                                0.8186472101906713,
                            ],
                            [
                                -0.3033378863400014,
                                -0.8173269764076293,
                                -0.3767515097625614,
                                -0.11021655039337777,
                            ],
                            [
                                -0.22977043608192885,
                                1.2717196366649905,
                                -0.4790851297878291,
                                -1.4495369404727856,
                            ],
                            [
                                -1.2802093286977783,
                                -0.11184514806663474,
                                1.7022167087210984,
                                -1.7354837287725355,
                            ],
                        ],
                        [
                            [
                                2.4706497991773606,
                                -0.6549702631973298,
                                -0.9318107079571676,
                                1.4652904271682428,
                            ],
                            [
                                1.1419864234341397,
                                1.389909081086008,
                                0.9657841900525568,
                                -0.8563114264976619,
                            ],
                            [
                                0.19515087084250754,
                                -0.37808457398571094,
                                0.2938625398496183,
                                0.9279930510353327,
                            ],
                            [
                                -0.9374118277994007,
                                0.3341831730452431,
                                -0.2792542765303833,
                                0.38029090707066726,
                            ],
                        ],
                        [
                            [
                                0.5918686659736041,
                                -0.7870631089938902,
                                -0.9534344874245392,
                                0.31341612954718795,
                            ],
                            [
                                0.7509029444145228,
                                -0.9299288398562323,
                                -0.7343054052782476,
                                -0.8806481590696694,
                            ],
                            [
                                -0.4707853016353985,
                                0.12253641652645629,
                                0.5088022039832846,
                                0.520391789327562,
                            ],
                            [
                                -0.0861300651163632,
                                0.30291348404866386,
                                -0.6268565873680123,
                                -0.27469204305759976,
                            ],
                        ],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
    )
    m = flow.nn.AdaptiveAvgPool3d((1, 2, 3))
    m.to(device)
    of_out = m(input)
    np_out = np.array(
        [
            [
                [
                    [0.08871791260375947, -0.4024959376509308, 0.00722249259371315],
                    [-0.31343444964845824, 0.08188803218941582, -0.09210164562800888],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(of_out.numpy(), np_out, 1e-05, 1e-05))


def _test_adaptive_avgpool3d_dhw_backward(test_case, device):
    input = flow.Tensor(
        np.array(
            [
                [
                    [
                        [
                            [
                                -1.077571799600885,
                                -0.7804538890365837,
                                -1.2627538752119443,
                                0.9993507145120477,
                            ],
                            [
                                2.0222532489157516,
                                1.103451377699465,
                                -0.4377324754879578,
                                1.890491810587517,
                            ],
                            [
                                -0.5593861899064654,
                                -0.4949520241526519,
                                -0.18536721363519787,
                                -0.6098969866775772,
                            ],
                            [
                                -1.6536215260171816,
                                -1.0392583540436786,
                                0.3686776597613967,
                                -0.5356882834951805,
                            ],
                        ],
                        [
                            [
                                -1.2617900664449953,
                                -1.4390921091631532,
                                0.20654399652431357,
                                0.8186472101906713,
                            ],
                            [
                                -0.3033378863400014,
                                -0.8173269764076293,
                                -0.3767515097625614,
                                -0.11021655039337777,
                            ],
                            [
                                -0.22977043608192885,
                                1.2717196366649905,
                                -0.4790851297878291,
                                -1.4495369404727856,
                            ],
                            [
                                -1.2802093286977783,
                                -0.11184514806663474,
                                1.7022167087210984,
                                -1.7354837287725355,
                            ],
                        ],
                        [
                            [
                                2.4706497991773606,
                                -0.6549702631973298,
                                -0.9318107079571676,
                                1.4652904271682428,
                            ],
                            [
                                1.1419864234341397,
                                1.389909081086008,
                                0.9657841900525568,
                                -0.8563114264976619,
                            ],
                            [
                                0.19515087084250754,
                                -0.37808457398571094,
                                0.2938625398496183,
                                0.9279930510353327,
                            ],
                            [
                                -0.9374118277994007,
                                0.3341831730452431,
                                -0.2792542765303833,
                                0.38029090707066726,
                            ],
                        ],
                        [
                            [
                                0.5918686659736041,
                                -0.7870631089938902,
                                -0.9534344874245392,
                                0.31341612954718795,
                            ],
                            [
                                0.7509029444145228,
                                -0.9299288398562323,
                                -0.7343054052782476,
                                -0.8806481590696694,
                            ],
                            [
                                -0.4707853016353985,
                                0.12253641652645629,
                                0.5088022039832846,
                                0.520391789327562,
                            ],
                            [
                                -0.0861300651163632,
                                0.30291348404866386,
                                -0.6268565873680123,
                                -0.27469204305759976,
                            ],
                        ],
                    ]
                ]
            ]
        ),
        dtype=flow.float32,
        device=flow.device(device),
        requires_grad=True,
    )
    m = flow.nn.AdaptiveAvgPool3d((1, 2, 3))
    of_out = m(input)
    of_out = of_out.sum()
    of_out.backward()
    np_grad = np.array(
        [
            [
                [
                    [
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                    ],
                    [
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                    ],
                    [
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                    ],
                    [
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                        [0.0625, 0.125, 0.125, 0.0625],
                    ],
                ]
            ]
        ]
    )
    test_case.assertTrue(np.allclose(input.grad.numpy(), np_grad, 1e-05, 1e-05))


@flow.unittest.skip_unless_1n1d()
class TestAdaptiveAvgPool(flow.unittest.TestCase):
    def test_adaptive_avgpool1d(test_case):
        arg_dict = OrderedDict()
        arg_dict["test_fun"] = [
            _test_adaptive_avgpool1d_forward,
            _test_adaptive_avgpool1d_backward,
        ]
        arg_dict["device"] = ["cpu", "cuda"]
        for arg in GenArgList(arg_dict):
            arg[0](test_case, *arg[1:])

    def test_adaptive_avgpool2d(test_case):
        arg_dict = OrderedDict()
        arg_dict["test_fun"] = [
            _test_adaptive_avgpool2d_forward,
            _test_adaptive_avgpool2d_backward,
            _test_adaptive_avgpool2d_hw_forward,
            _test_adaptive_avgpool2d_hw_backward,
        ]
        arg_dict["device"] = ["cpu", "cuda"]
        for arg in GenArgList(arg_dict):
            arg[0](test_case, *arg[1:])

    def test_adaptive_avgpool3d(test_case):
        arg_dict = OrderedDict()
        arg_dict["test_fun"] = [
            _test_adaptive_avgpool3d_forward,
            _test_adaptive_avgpool3d_backward,
            _test_adaptive_avgpool3d_dhw_forward,
            _test_adaptive_avgpool3d_dhw_backward,
        ]
        arg_dict["device"] = ["cpu", "cuda"]
        for arg in GenArgList(arg_dict):
            arg[0](test_case, *arg[1:])


if __name__ == "__main__":
    unittest.main()
