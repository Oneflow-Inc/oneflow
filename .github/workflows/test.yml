name: Build and Test CI
on:
  pull_request:
    types: [review_requested]
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      placeholder:
        description: "placeholder, no effect"
        required: false
jobs:
  mirror_third_party:
    name: Mirror third party dependencies
    runs-on: ubuntu-18.04
    if: github.event.pull_request.draft == false && github.base_ref == 'master' && contains(github.event.pull_request.requested_reviewers.*.login, 'oneflow-ci-bot')
    steps:
      - uses: actions/checkout@v2
      - name: Mirror dependencies to aliyun
        env:
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
        run: |
          set -x
          if [ -z "$OSS_ACCESS_KEY_ID" ]
          then
            exit 0
          fi
          python3 -m pip install -U pip setuptools wheel
          python3 -m pip install oss2
          python3 tools/package_mirror.py -i cmake

  check_license_and_format:
    name: License and format
    runs-on: ubuntu-18.04
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.requested_reviewers.*.login, 'oneflow-ci-bot')
    steps:
      - uses: actions/checkout@v2
      - name: Check license (please run 'make of_format' if failed)
        run: |
          python3 ci/check/run_license_format.py -i oneflow -c
      - name: Check license C++/CUDA format (please run 'make of_format' if failed)
        run: |
          python3 ci/check/run_clang_format.py --clang_format_binary clang-format --source_dir oneflow
      - name: Check Python format (please run 'make of_format' if failed)
        run: |
          python3 -m pip install black==19.10b0
          python3 ci/check/run_py_format.py --source_dir $PWD

  wait_for_gpu_slot:
    name: Wait for GPU slots
    runs-on: [self-hosted, scheduler]
    needs: [build]
    if: github.event.pull_request.draft == false && github.base_ref == 'master' && contains(github.event.pull_request.requested_reviewers.*.login, 'oneflow-ci-bot')
    steps:
      - name: Check if secrets accessible
        env:
          CI_PERSONAL_ACCESS_TOKEN: ${{ secrets.CI_PERSONAL_ACCESS_TOKEN }}
        run: |
          set -x
          if [ -z "$CI_PERSONAL_ACCESS_TOKEN" ]
          then
            exit 0
          fi
          echo "is_secrets_accessible=1" >> $GITHUB_ENV
      - uses: Oneflow-Inc/github-workflow-schedule@286010392b8658836e374657a39d87654512926d
        name: Wait for GPU slot
        if: env.is_secrets_accessible == '1'
        env:
          CI_PERSONAL_ACCESS_TOKEN: ${{ secrets.CI_PERSONAL_ACCESS_TOKEN }}

  build:
    name: Build
    needs: [check_license_and_format, mirror_third_party]
    continue-on-error: ${{ matrix.allow_fail }}
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false && github.base_ref == 'master' && contains(github.event.pull_request.requested_reviewers.*.login, 'oneflow-ci-bot')
    strategy:
      max-parallel: 5
      matrix:
        test_suite: ["cuda", "cpu", "xla", "mac"]
        include:
          - test_suite: cuda
            cuda_version: 10.2
            extra_flags: --extra_oneflow_cmake_args=-DFOR_CI=ON --extra_oneflow_cmake_args=-DRPC_BACKEND=GRPC,LOCAL
            os: [self-hosted, linux, release]
            allow_fail: false
          - test_suite: cpu
            cuda_version: 10.2
            extra_flags: --extra_oneflow_cmake_args=-DFOR_CI=ON --extra_oneflow_cmake_args=-DBUILD_SHARED_LIBS=ON --extra_oneflow_cmake_args=-DRPC_BACKEND=LOCAL --cpu --gcc7
            os: [self-hosted, linux, release]
            allow_fail: false
          - test_suite: xla
            cuda_version: 10.1
            extra_flags: --extra_oneflow_cmake_args=-DFOR_CI=ON --extra_oneflow_cmake_args=-DRPC_BACKEND=GRPC,LOCAL --xla
            os: [self-hosted, linux, release]
            allow_fail: true
          - test_suite: mac
            cuda_version: ""
            extra_flags: ""
            os: "macos-latest"
            allow_fail: true
    steps:
      - name: Set environments from secrets
        if: contains(${{ github.repository }}, "Oneflow-Inc")
        run: |
          echo "CI_STATIC_HOST=${{ secrets.CI_STATIC_HOST }}" >> $GITHUB_ENV
          echo "CI_STATIC_PATH=${{ secrets.CI_STATIC_PATH }}" >> $GITHUB_ENV
      - name: Set environments for forks
        run: |
          CI_STATIC_HOST=${CI_STATIC_HOST:-"192.168.1.13"}
          CI_STATIC_PATH=${CI_STATIC_PATH:-"/tank/ci-static"}
          echo "CI_STATIC_HOST=${CI_STATIC_HOST}" >> $GITHUB_ENV
          echo "CI_STATIC_PATH=${CI_STATIC_PATH}" >> $GITHUB_ENV
      - name: Set environment variables
        if: matrix.test_suite != 'mac'
        env:
          test_suite: ${{ matrix.test_suite }}
        run: |
          echo "test_suite=${test_suite}" >> $GITHUB_ENV
          export ci_tmp_dir=$HOME/ci-cache/test_suite/${test_suite}
          mkdir -p $ci_tmp_dir
          echo "ci_tmp_dir=${ci_tmp_dir}" >> $GITHUB_ENV
          echo "wheelhouse_dir=${ci_tmp_dir}/wheelhouse" >> $GITHUB_ENV
          sha_dir="${CI_STATIC_PATH}/${{ github.repository }}/pr/${{ github.event.pull_request.number }}/${{ github.sha }}/${{ matrix.test_suite }}"
          echo "sha_dir=${sha_dir}" >> $GITHUB_ENV
          if ssh -o StrictHostKeyChecking=no ${CI_STATIC_HOST} "test -d $sha_dir"; then
              echo "is_built=1" >> $GITHUB_ENV
          fi
          echo "bin_dir=${ci_tmp_dir}/manylinux2014-build-cache/10.2/build-oneflow/bin" >> $GITHUB_ENV
          extra_docker_args=""
          container_name=pr-${{ github.event.pull_request.number }}-run-id-${{ github.run_id }}-${test_suite}-build
          echo "container_name=${container_name}" >> $GITHUB_ENV
          extra_docker_args+=" --name ${container_name}"
          if [ "$test_suite" == "cpu" ]; then
            extra_docker_args+=" --env ONEFLOW_TEST_CPU_ONLY=1"
            extra_docker_args+=" --env CUDA_VISIBLE_DEVICES=''"
          fi
          echo "extra_docker_args=${extra_docker_args}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
      - name: Fix permissions
        if: matrix.test_suite != 'mac'
        run: |
          docker run --rm -v $PWD:/p -w /p busybox chmod -R o+w .
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: env.is_built != '1'
      - name: Build OneFlow
        if: env.is_built != '1' && matrix.test_suite != 'mac'
        uses: ./.github/actions/whl
        with:
          tmp_dir: ${ci_tmp_dir}
          extra_flags: ${{ matrix.extra_flags }}
          cuda_version: ${{ matrix.cuda_version }}
          extra_docker_args: $extra_docker_args
      - name: Cache build dir (macOS)
        if: matrix.test_suite == 'mac' && contains(github.event.pull_request.labels.*.name, 'mac-ci')
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-${{ github.repository }}-build-${{ hashFiles('**/*.cmake', '**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.repository }}-build-
            ${{ runner.os }}-${{ github.repository }}-
            ${{ runner.os }}-
      - name: Build OneFlow (macOS), enable by adding label 'mac-ci'
        if: matrix.test_suite == 'mac' && contains(github.event.pull_request.labels.*.name, 'mac-ci')
        uses: ./.github/actions/mac-build
        env:
          CPATH: /Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
      - name: Custom Op test (run by oneflow build docker)
        if: matrix.test_suite == 'cpu' && env.is_built != '1' && matrix.test_suite != 'mac'
        run: |
          docker run --shm-size=8g --rm -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
            $extra_docker_args \
            -v ${wheelhouse_dir}:${wheelhouse_dir} --env ONEFLOW_WHEEL_PATH=${wheelhouse_dir} \
            oneflow-manylinux2014-cuda10.2:0.1 \
            bash -c "export PATH=/opt/python/cp36-cp36m/bin:$PATH && source scl_source enable devtoolset-7 && bash ci/test/try_install.sh && bash ci/test/1node_custom_op_test.sh"
      - name: Remove cache
        if: ${{ failure() }}
        run: |
          set -x
          cache_parent_dir=$(dirname ${ci_tmp_dir})
          if [ "$cache_parent_dir" == "/" ] || [ -z "$cache_parent_dir" ]; then
            exit 1
          fi
          docker run --rm -v $cache_parent_dir:$cache_parent_dir busybox rm -rf ${ci_tmp_dir}
      - name: Upload wheel via SSH
        if: env.is_built != '1' && matrix.test_suite != 'mac'
        uses: ./.github/actions/upload_ssh
        with:
          src_path: ${wheelhouse_dir}
          dst_host: ${{ env.CI_STATIC_HOST }}
          dst_path: ${{ env.CI_STATIC_PATH }}/${{ github.repository }}/pr/${{ github.event.pull_request.number }}/${{ github.sha }}/${{ matrix.test_suite }}/whl
      - name: Upload bin via SSH
        if: matrix.test_suite == 'cuda' && env.is_built != '1' && matrix.test_suite != 'mac'
        uses: ./.github/actions/upload_ssh
        with:
          src_path: ${bin_dir}
          dst_host: ${{ env.CI_STATIC_HOST }}
          dst_path: ${{ env.CI_STATIC_PATH }}/${{ github.repository }}/pr/${{ github.event.pull_request.number }}/${{ github.sha }}/${{ matrix.test_suite }}/bin
      - name: Upload wheel to cloud, enable by adding label 'upload-wheel'
        if: contains(github.event.pull_request.labels.*.name, 'upload-wheel') && matrix.test_suite != 'mac'
        uses: ./.github/actions/upload_oss
        with:
          src_path: ${wheelhouse_dir}
          oss_dst_path: oss://oneflow-staging/${{ github.repository }}/pr/${{ github.event.pull_request.number }}/${{ github.sha }}/${{ matrix.test_suite }}/whl
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      - name: Upload bin to cloud, enable by adding label 'upload-wheel'
        if: contains(github.event.pull_request.labels.*.name, 'upload-wheel') && matrix.test_suite != 'mac'
        uses: ./.github/actions/upload_oss
        with:
          src_path: ${bin_dir}
          oss_dst_path: oss://oneflow-staging/${{ github.repository }}/pr/${{ github.event.pull_request.number }}/${{ github.sha }}/${{ matrix.test_suite }}/bin
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      - name: Remove container
        if: always() && matrix.test_suite != 'mac'
        run: |
          docker rm -f ${container_name} || true
      - name: Save shared env
        if: matrix.test_suite != 'mac'
        run: |
          set -x
          echo "builder_host=${CI_STATIC_HOST}" >> build.${{ matrix.test_suite }}.env
          echo "sha_dir=${sha_dir}" >> build.${{ matrix.test_suite }}.env
          echo "remote_whl_dir=${CI_STATIC_HOST}:$sha_dir/whl" >> build.${{ matrix.test_suite }}.env
          if [ "$test_suite" == "cuda" ]; then
            echo "remote_bin_dir=${CI_STATIC_HOST}:$sha_dir/bin" >> build.${{ matrix.test_suite }}.env
          fi
      - name: Upload shared env
        if: matrix.test_suite != 'mac'
        uses: actions/upload-artifact@v2
        with:
          name: build.${{ matrix.test_suite }}.env
          path: build.${{ matrix.test_suite }}.env

  test:
    name: Test suite
    needs: [build, wait_for_gpu_slot]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_fail }}
    if: github.event.pull_request.draft == false && github.base_ref == 'master' && contains(github.event.pull_request.requested_reviewers.*.login, 'oneflow-ci-bot')
    strategy:
      max-parallel: 5
      matrix:
        test_suite:
          ["cuda", "cuda_op", "cpu", "xla", "cuda_op_eager", "cpu_op_eager"]
        include:
          - test_suite: "cuda"
            os: [self-hosted, linux, gpu]
            allow_fail: false
            build_env: build.cuda.env
          - test_suite: "cuda_op"
            os: [self-hosted, linux, gpu]
            allow_fail: false
            build_env: build.cuda.env
          - test_suite: "cuda_op_eager"
            os: [self-hosted, linux, gpu]
            allow_fail: true
            build_env: build.cuda.env
          - test_suite: "cpu"
            os: [self-hosted, linux, cpu]
            allow_fail: false
            build_env: build.cpu.env
          - test_suite: "cpu_op_eager"
            os: [self-hosted, linux, cpu]
            allow_fail: true
            build_env: build.cpu.env
          - test_suite: "xla"
            os: [self-hosted, linux, gpu]
            allow_fail: true
            build_env: build.xla.env
    steps:
      - name: Fix permissions
        run: |
          docker run --rm -v $PWD:/p -w /p busybox chmod -R o+w .
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Download shared env
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.build_env }}
      - name: Set environment variables
        env:
          test_suite: ${{matrix.test_suite }}
        run: |
          set -x
          extra_docker_args=""

          # load shared environment variables
          cat ${{ matrix.build_env }} >> $GITHUB_ENV
          source ${{ matrix.build_env }}
          # check directory sha_dir exists
          ssh -o StrictHostKeyChecking=no ${builder_host} "[ -d ${sha_dir} ]"

          # dowload whl and bin
          scp -r $remote_whl_dir wheel_tmp
          if [ "$test_suite" == "cuda" ]; then
            scp -r $remote_bin_dir bin_tmp
          fi

          # set wheelpath
          wheelhouse_dir="${PWD}/wheel_tmp"
          extra_docker_args+=" --env ONEFLOW_WHEEL_PATH=${wheelhouse_dir}"
          echo "wheelhouse_dir=${wheelhouse_dir}" >> $GITHUB_ENV

          # set matrix environment variables
          echo "test_suite=${test_suite}" >> $GITHUB_ENV
          if [ "$test_suite" == "cuda" ]; then
            echo "bin_dir=${PWD}/bin_tmp" >> $GITHUB_ENV
          fi
          if [ "$test_suite" == "cpu" ] || [ "$test_suite" == "cpu_op_eager" ]; then
            extra_docker_args+=" --env ONEFLOW_TEST_CPU_ONLY=1"
            extra_docker_args+=" --env CUDA_VISIBLE_DEVICES=''"
          fi
          if [ "$test_suite" == "cuda_op_eager" ] || [ "$test_suite" == "cpu_op_eager" ]; then
            extra_docker_args+=" --env ONEFLOW_TEST_ENABLE_EAGER=1"
          fi
          # set container_name
          container_name=pr-${{ github.event.pull_request.number }}-run-id-${{ github.run_id }}-${test_suite}-test
          extra_docker_args+=" --name ${container_name}"
          echo "container_name=${container_name}" >> $GITHUB_ENV

          extra_docker_args+=" --shm-size=8g --rm -w $PWD -v $PWD:$PWD"
          extra_docker_args+=" -v /dataset:/dataset -v /model_zoo:/model_zoo"
          echo "extra_docker_args=${extra_docker_args}" >> $GITHUB_ENV
      - name: Build docker image for testing
        run: |
          bash docker/ci/test/build.sh
      - name: Exe test
        if: matrix.test_suite == 'cuda'
        run: |
          set -x
          docker run \
            $extra_docker_args \
            oneflow-test:$USER \
            ${bin_dir}/oneflow_testexe
      - name: Op test (distributed)
        if: matrix.test_suite == 'cuda'
        run: |
          python3 ci/test/distributed_run.py --make_dotssh
          python3 ci/test/distributed_run.py --run --bash_script=ci/test/2node_op_test.sh \
            --build_docker_img \
            --oneflow_wheel_path=${wheelhouse_dir} \
            --oneflow_worker_bin=${bin_dir}/oneflow_worker
      - name: Print backtrace (distributed test)
        if: always() && matrix.test_suite == 'cuda'
        run: |
          docker run \
            $extra_docker_args \
            oneflow-test:$USER bash ci/test/print_stack_from_core.sh python3 distributed-tmp
      - name: Upload log (distributed test)
        if: always() && matrix.test_suite == 'cuda'
        uses: ./.github/actions/upload_oss
        with:
          src_path: oneflow_temp
          oss_dst_path: oss://oneflow-log/${{ github.repository }}/pr/${{ github.event.pull_request.number }}/${{github.run_id}}/oneflow_temp
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      - name: Dry run test (run without runtime)
        if: matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/dry_run_test.sh"
      - name: Op test
        if: matrix.test_suite == 'cpu' || matrix.test_suite == 'cuda_op' || matrix.test_suite == 'cpu_op_eager' || matrix.test_suite == 'cuda_op_eager'
        run: |
          docker run \
            $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/1node_op_test.sh"
      - name: Model test
        if: matrix.test_suite == 'cpu' || matrix.test_suite == 'cuda'
        run: |
          docker run \
            $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/1node_model_test.sh"
      - name: Model serve test
        if: matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            --env ONEFLOW_TEST_TMP_DIR=$PWD/serving-tmp \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/1node_model_serve_test.sh"
      - name: Print backtrace (serving test)
        if: always() && matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER bash ci/test/print_stack_from_core.sh python3 serving-tmp
      - name: Benchmark (mainly for backward compatibility)
        if: matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/1node_benchmark_test.sh"
      - name: Benchmark FP16 (mainly for backward compatibility)
        if: matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/1node_benchmark_test_fp16.sh"
      - name: XLA Test
        if: matrix.test_suite == 'xla'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/test_xla.sh"
      - name: ONNX export test
        if: matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/onnx_export_model_test.sh"
      - name: Build documentation
        if: matrix.test_suite == 'cuda'
        run: |
          docker run $extra_docker_args \
            oneflow-test:$USER \
            bash -c "bash ci/test/try_install.sh && bash ci/test/build_docs.sh"
      - name: Remove container
        if: always()
        run: |
          docker rm -f ${container_name} || true
