name: Build and Test CI

on:
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      placeholder:
        description: 'placeholder, no effect'
        required: false
jobs:

  build_and_test:

    runs-on: [self-hosted, linux, gpu]
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v2
    - name: Check license (please run 'make of_format' if failed)
      run: |
        python3 ci/check/run_license_format.py -i oneflow -c
    - name: Check C++ format (please run 'make of_format' if failed)
      run: |
        python3 ci/check/run_clang_format.py --clang_format_binary clang-format --source_dir oneflow
    - name: Check python format (please run 'make of_format' if failed)
      run: |
        docker run --rm -v $PWD:$PWD --entrypoint "/bin/sh" cytopia/black@sha256:ea649b81bf6a64aaa34f4abba803da83528135b5d12bed9b485bcabb37480d33 -c "python3 $PWD/ci/check/run_py_format.py --source_dir $PWD/oneflow/python"
    - name: Setup environment
      run: |
        echo $HOSTNAME
        rm -rf build/third_party
        bash ci/build/clean.sh
        bash ci/setup_submodule.sh
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --recursive
    - name: Build OneFlow
      run: |
        bash ci/build/make.sh
    - name: Build docker image for testing
      run: |
        bash docker/ci/test/build.sh
    - name: Exe test
      run: |
        docker run --shm-size=8g --rm \
          -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
          -v $HOME/ci-tmp:/ci-tmp \
          -w /ci-tmp/manylinux2014-build-cache/build-oneflow/bin \
          oneflow-test \
          ./oneflow_testexe
    - name: Unit test
      run: |
        docker run --shm-size=8g --rm \
          -v $HOME/ci-tmp:/ci-tmp \
          -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
          --env ONEFLOW_WHEEL_PATH=/ci-tmp/wheelhouse \
          oneflow-test \
          bash -c "bash ci/test/try_install.sh && bash ci/test/1node_op_test.sh"
    - name: Integration test
      run: |
        docker run --shm-size=8g --rm \
          -v $HOME/ci-tmp:/ci-tmp \
          -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
          --env ONEFLOW_WHEEL_PATH=/ci-tmp/wheelhouse \
          oneflow-test \
          bash -c "bash ci/test/try_install.sh && bash ci/test/1node_model_test.sh"
    - name: Benchmark
      run: |
        docker run --shm-size=8g --rm \
          -v $HOME/ci-tmp:/ci-tmp \
          -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
          --env ONEFLOW_WHEEL_PATH=/ci-tmp/wheelhouse \
          oneflow-test \
          bash -c "bash ci/test/try_install.sh && bash ci/test/1node_benchmark_test.sh"
    - name: Benchmark FP16
      run: |
        docker run --shm-size=8g --rm \
          -v $HOME/ci-tmp:/ci-tmp \
          -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
          --env ONEFLOW_WHEEL_PATH=/ci-tmp/wheelhouse \
          oneflow-test \
          bash -c "bash ci/test/try_install.sh && bash ci/test/1node_benchmark_test_fp16.sh"
    - name: ONNX export test
      run: |
        docker run --shm-size=8g --rm \
          -v $HOME/ci-tmp:/ci-tmp \
          -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo \
          --env ONEFLOW_WHEEL_PATH=/ci-tmp/wheelhouse \
          oneflow-test \
          bash -c "bash ci/test/try_install.sh && bash ci/test/onnx_export_model_test.sh"
    - name: Build documentation
      run: |
        docker run --shm-size=8g --rm \
          -v $HOME/ci-tmp:/ci-tmp \
          -w $PWD -v $PWD:$PWD \
          --env ONEFLOW_WHEEL_PATH=/ci-tmp/wheelhouse \
          oneflow-test \
          bash -c "bash ci/test/try_install.sh && bash ci/test/build_docs.sh"
    - name: Clean up files created by root
      if: ${{ always() }}
      run: |
        bash ci/build/clean.sh
