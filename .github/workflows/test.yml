name: Build and Test CI

on:
    pull_request:
      types: [synchronize, opened, reopened, ready_for_review]
      branches:
        - develop
      paths-ignore:
        - '**.md'
        - '.gitignore'

jobs:

  build_and_test:

    runs-on: [self-hosted, linux]
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v2
    - name: Check format
      run: |
        python3 ci/check/run_clang_format.py --clang_format_binary clang-format --source_dir oneflow
    - name: Setup environment
      run: |
        echo $HOSTNAME
        rm -rf ci_tmp
        mkdir ci_tmp
        rm -rf build/third_party
        bash ci/setup_submodule.sh
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --recursive
    - name: Build OneFlow base
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        git_branch=${GITHUB_REF##*/}
        docker build --rm \
          --build-arg http_proxy=${ONEFLOW_CI_HTTP_PROXY} --build-arg https_proxy=${ONEFLOW_CI_HTTPS_PROXY} \
          -t oneflow-build-base:${git_branch} -t oneflow-build-base:${git_hash} \
          -f docker/ci/base/Dockerfile .
    - name: Build OneFlow third party
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        git_branch=${GITHUB_REF##*/}
        docker build --rm \
          --build-arg "from=oneflow-build-base:${git_hash}" \
          --build-arg http_proxy=${ONEFLOW_CI_HTTP_PROXY} --build-arg https_proxy=${ONEFLOW_CI_HTTPS_PROXY} \
          -t oneflow-build-third-party:${git_branch} -t oneflow-build-third-party:${git_hash} \
          -f docker/ci/third_party/Dockerfile .
    - name: Build OneFlow
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        git_branch=${GITHUB_REF##*/}
        docker build --rm \
          --build-arg "from=oneflow-build-third-party:${git_hash}" \
          --build-arg http_proxy=${ONEFLOW_CI_HTTP_PROXY} --build-arg https_proxy=${ONEFLOW_CI_HTTPS_PROXY} \
          -t oneflow-build-make:${git_hash} -f docker/ci/make/Dockerfile .
        docker run -u $(id -u ${USER}):$(id -g ${USER}) --shm-size=8g --rm \
          -v $PWD:$PWD oneflow-build-make:${git_hash} \
          bash -c "cp /workspace/*.whl $PWD/ci_tmp/ && cp /workspace/oneflow_testexe $PWD/ci_tmp/"
    - name: Teardown
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        git_branch=${GITHUB_REF##*/}
        docker rmi oneflow-build-base:${git_hash}
        docker rmi oneflow-build-third-party:${git_hash}
        docker rmi oneflow-build-make:${git_hash}
    - name: Unit test with/without user op
      run: |
        docker run --shm-size=8g --rm -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo ufoym/deepo bash ci/test/1node_op_test.sh
    - name: Integration test
      run: |
        docker run --shm-size=8g --rm -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo ufoym/deepo bash ci/test/1node_model_test.sh
    - name: Integration test with user op
      run: |
        docker run --shm-size=8g --rm -w $PWD -v $PWD:$PWD -v /dataset:/dataset -v /model_zoo:/model_zoo ufoym/deepo bash ci/test/1node_model_test_user_op.sh
