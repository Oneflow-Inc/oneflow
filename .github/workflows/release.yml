name: Release

on:
  schedule:
    # beijing: 2 am.
    # utc: 6 pm.
    - cron:  '0 18 * * *'
  workflow_dispatch:
    inputs:
      python_version:
        description: 'python_version'
        default: '3.5,3.6,3.7,3.8'
        required: false
jobs:
  staging_release:
    name: Staging Release
    timeout-minutes: 1200
    runs-on: [self-hosted, linux, release]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        release_version: [
          'cpu',
          'cu100',
          'cu101',
          'cu102',
          'cu110',
          'cu111',
          'cu100_xla',
          'cu101_xla',
          'cu102_xla',
          'cu110_xla'
        ]
    steps:
    - name: Fix permissions
      run: |
        docker run --rm -v $PWD:/p -w /p busybox chmod -R o+w .
    - uses: actions/checkout@v2
    - name: Set environment variables
      env:
        matrix_release_version: ${{matrix.release_version }}
        python_version: ${{ github.event.inputs.python_version }}
        OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
        OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      run: |
        set -x
        if [ "$matrix_release_version" == "cpu" ]; then
            cuda_version="10.2"
            extra_flags="--cpu"
        elif [ "$matrix_release_version" == "cu100" ]; then
            cuda_version="10.0"
        elif [ "$matrix_release_version" == "cu101" ]; then
            cuda_version="10.1"
        elif [ "$matrix_release_version" == "cu102" ]; then
            cuda_version="10.2"
        elif [ "$matrix_release_version" == "cu110" ]; then
            cuda_version="11.0"
        elif [ "$matrix_release_version" == "cu111" ]; then
            cuda_version="11.1"
        elif [ "$matrix_release_version" == "cu100_xla" ]; then
            cuda_version="10.0"
        elif [ "$matrix_release_version" == "cu101_xla" ]; then
            cuda_version="10.1"
            extra_flags="--xla"
        elif [ "$matrix_release_version" == "cu102_xla" ]; then
            cuda_version="10.2"
            extra_flags="--xla"
        elif [ "$matrix_release_version" == "cu110_xla" ]; then
            cuda_version="11.0"
            extra_flags="--xla"
        elif [ "$matrix_release_version" == "cu111_xla" ]; then
            cuda_version="11.1"
            extra_flags="--xla"
        else
            echo "Release version: $matrix_release_version not supported"
            exit 1
        fi

        if [ -z "$cuda_version" ]
        then
          echo "cuda_version empty"
          exit 1
        fi
        python3 ci/build/ensure_img.py
        python_version=${python_version:-"3.5,3.6,3.7,3.8"}
        echo "cuda_version=${cuda_version}" >> $GITHUB_ENV
        echo "python_version=${python_version}" >> $GITHUB_ENV
        echo "extra_flags=${extra_flags}" >> $GITHUB_ENV

        tmp_dir=$HOME/ci-tmp-rel
        echo "ci_tmp_dir=${tmp_dir}" >> $GITHUB_ENV
        echo "wheelhouse_dir=${tmp_dir}/wheelhouse" >> $GITHUB_ENV

        git_branch=${GITHUB_REF##*/}
        oss_branch_dir=branch/${git_branch}
        oss_dir=${oss_branch_dir}/${GITHUB_SHA}
        echo "oss_branch_dir=${oss_branch_dir}" >> $GITHUB_ENV
        echo "oss_dir=${oss_dir}" >> $GITHUB_ENV
        echo "git_branch=${git_branch}" >> $GITHUB_ENV

        $(python3 tools/oss_file_exist.py --bucket oneflow-staging --path ${oss_dir}/oneflow_${matrix_release_version})
        echo "is_built=${OSS_FILE_EXISTED}" >> $GITHUB_ENV
    - name: Build OneFlow
      if: env.is_built != '1'
      uses: ./.github/actions/whl
      with:
        tmp_dir: ${ci_tmp_dir}
        cuda_version: ${cuda_version}
        python_version: ${python_version}
        extra_flags: ${extra_flags}
    - name: Upload wheel
      if: env.is_built != '1'
      uses: ./.github/actions/upload_oss
      with:
        src_path: ${wheelhouse_dir}
        oss_dst_path: oss://oneflow-staging/${oss_dir}
        oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
        oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    - name: Update pip index
      if: env.is_built != '1' && matrix.release_version == 'cu102'
      env:
        OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
        OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      run: |
        python3 -m pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
        python3 -m pip install oss2 beautifulsoup4 --user
        python3 tools/create_pip_index.py --dir_key ${oss_dir} -b oneflow-staging --index_key=${oss_branch_dir}/index.html --index_key=${oss_dir}/index.html
    - name: Update API docs
      if: github.ref == 'refs/heads/master'
      env:
        READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
      run: |
        curl -X POST -d "branches=master" -d "token=${READTHEDOCS_TOKEN}"  https://readthedocs.org/api/v2/webhook/oneflow/135376/
  pack_src:
    name: Pack source code
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Pack OneFlow source code
      if: github.ref == 'refs/heads/master'
      env:
        OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
        OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      run: |
        git reset --hard
        git clean -f
        git archive --format zip HEAD > oneflow-src.zip
        curl http://gosspublic.alicdn.com/ossutil/1.6.19/ossutil64 -o $HOME/ossutil64
        chmod 755 $HOME/ossutil64
        $HOME/ossutil64 config -e oss-cn-beijing.aliyuncs.com -i ${OSS_ACCESS_KEY_ID} -k ${OSS_ACCESS_KEY_SECRET}  -L EN -c $HOME/.ossutilconfig
        $HOME/ossutil64 cp --update oneflow-src.zip oss://oneflow-public/oneflow-src.zip
